diff --git a/database/mysql/dbUpdate.java b/database/mysql/dbUpdate.java
index d1bf492ff2..160aa2303d 100755
--- a/database/mysql/dbUpdate.java
+++ b/database/mysql/dbUpdate.java
@@ -1,3 +1,7 @@
+import java.sql.DriverManager;
+import java.sql.Statement;
+import java.sql.ResultSet;
+import java.sql.Connection;
 /*
  * 
  * Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved. *
@@ -36,73 +40,56 @@ public class dbUpdate {
 			System.out.println("Usage: java dbUpdate 'path/to/oscar.properties'");
 			return;
 		}
-
-		try {
-                        FileInputStream fin = new FileInputStream(args[0]);        
-                        Properties prop = new Properties();
-                        prop.load(fin);                                                
-                        
-                        String driver = prop.getProperty("db_driver");
-                        System.out.println("Driver " + driver);
-                        
-                        String uri = prop.getProperty("db_uri");
-                        System.out.println("URI " + uri);
-                        
-                        String dbName = prop.getProperty("db_name");
-                        System.out.println("DB NAME " + dbName);
-                        
-                        String user = prop.getProperty("db_username");
-                        System.out.println("DB USER " + user);
-                        
-                        String passwd = prop.getProperty("db_password");
-                        System.out.println("DB PASSWD " + passwd);
-                        
-			Statement stmt, stmtUpdate;
-			ResultSet rs, rsUpdate;
-
+		try (FileInputStream fin = new FileInputStream(args[0])) {
+			Properties prop = new Properties();
+			prop.load(fin);
+			String driver = prop.getProperty("db_driver");
+			System.out.println("Driver " + driver);
+			String uri = prop.getProperty("db_uri");
+			System.out.println("URI " + uri);
+			String dbName = prop.getProperty("db_name");
+			System.out.println("DB NAME " + dbName);
+			String user = prop.getProperty("db_username");
+			System.out.println("DB USER " + user);
+			String passwd = prop.getProperty("db_password");
+			System.out.println("DB PASSWD " + passwd);
+			Statement stmt;
+			Statement stmtUpdate;
+			ResultSet rs;
+			ResultSet rsUpdate;
 			Class.forName(driver);
-			
-                        uri += dbName;
+			uri += dbName;
 			Connection con = DriverManager.getConnection(uri, user, passwd);
-
-			stmt = con.createStatement();			
-
+			stmt = con.createStatement();
 			rs = stmt.executeQuery("SELECT note_id FROM casemgmt_note where uuid is null");
-
 			stmtUpdate = con.createStatement();
 			UUID uuid;
 			String updateSQL;
-			while(rs.next()) {
+			while (rs.next()) {
 				uuid = UUID.randomUUID();
 				String id = rs.getString("note_id");
 				updateSQL = "UPDATE casemgmt_note set uuid = '" + uuid + "' WHERE note_id = " + id;
-				if( stmtUpdate.executeUpdate(updateSQL) != 1 ) 
-					throw new Exception(updateSQL);				                                 
-                                System.out.println(updateSQL);
-			}
-                        
-                        rs.close();
-                        rs = stmt.executeQuery("SELECT update_date, note_id FROM casemgmt_note where observation_date = '0000-00-00 00:00:00'");
-                        while(rs.next()) {
-                            updateSQL = "UPDATE casemgmt_note set observation_date = '" + rs.getString("update_date") + "' WHERE note_id = " + rs.getString("note_id");
-                            if( stmtUpdate.executeUpdate(updateSQL) != 1 ) 
-					throw new Exception(updateSQL);				                                 
-                            
-                            System.out.println(updateSQL);
-                            
-                        }
-                        
-                        rs.close();
+				if (stmtUpdate.executeUpdate(updateSQL) != 1)
+					throw new Exception(updateSQL);
+
+				System.out.println(updateSQL);
+			} 
+			rs.close();
+			rs = stmt.executeQuery("SELECT update_date, note_id FROM casemgmt_note where observation_date = '0000-00-00 00:00:00'");
+			while (rs.next()) {
+				updateSQL = "UPDATE casemgmt_note set observation_date = '" + rs.getString("update_date") + "' WHERE note_id = " + rs.getString("note_id");
+				if (stmtUpdate.executeUpdate(updateSQL) != 1)
+					throw new Exception(updateSQL);
+
+				System.out.println(updateSQL);
+			} 
+			rs.close();
 			con.close();
-                         
-		}
-                catch( FileNotFoundException e ) {
-                    System.out.println("Could not open properties file:\n" + e.getMessage());
-                }
-                catch( IOException e ) {
-                    System.out.println("Error reading properties file\n" + e.getMessage());
-                }                
-		catch( Exception e ) {
+		} catch (FileNotFoundException e) {
+			System.out.println("Could not open properties file:\n" + e.getMessage());
+		} catch (IOException e) {
+			System.out.println("Error reading properties file\n" + e.getMessage());
+		} catch (Exception e) {
 			System.out.println("DB ERROR: " + e.getMessage());
 			e.printStackTrace();
 		}
diff --git a/database/mysql/image_blob_migration/ImageStringToBlob.java b/database/mysql/image_blob_migration/ImageStringToBlob.java
index 3654f7d932..c0432b3a5d 100755
--- a/database/mysql/image_blob_migration/ImageStringToBlob.java
+++ b/database/mysql/image_blob_migration/ImageStringToBlob.java
@@ -44,61 +44,50 @@ public class ImageStringToBlob {
 			System.out.println("Missing argument: full path to <oscar.properties>");
 			return;
 		}
-		
-		try {
-			
-			FileInputStream fin = new FileInputStream(args[0]);        
-	        Properties prop = new Properties();
-	        prop.load(fin);
-	        
-	        String driver = prop.getProperty("db_driver");
+		try (FileInputStream fin = new FileInputStream(args[0])) {
+			Properties prop = new Properties();
+			prop.load(fin);
+			String driver = prop.getProperty("db_driver");
 			String uri = prop.getProperty("db_uri");
 			String db = prop.getProperty("db_name");
 			String username = prop.getProperty("db_username");
 			String password = prop.getProperty("db_password");
-			
 			Class.forName(driver);
 			conn = DriverManager.getConnection(uri + db, username, password);
-			conn.setAutoCommit(true); // no transactions
-			
-			/*
-			 * select all records ids with image_data not null and contents is null
-			 * for each id fetch record
-			 * migrate data from image_data to contents
+			conn.setAutoCommit(true);// no transactions
+
+			/* select all records ids with image_data not null and contents is null
+			for each id fetch record
+			migrate data from image_data to contents
 			 */
 			String sql = "select image_id from client_image where image_data is not null and contents is null";
 			PreparedStatement pst = conn.prepareStatement(sql);
 			ResultSet rs = pst.executeQuery();
 			List<Long> ids = new ArrayList<Long>();
-			
-			while(rs.next()) {
+			while (rs.next()) {
 				ids.add(rs.getLong("image_id"));
-			}
-			
+			} 
 			rs.close();
-			
 			sql = "select image_data from client_image where image_id = ?";
 			pst = conn.prepareStatement(sql);
-			
 			System.out.println("Migrating image data for " + ids.size() + " images...");
-			for(Long id : ids) {
+			for (Long id : ids) {
 				pst.setLong(1, id);
 				ResultSet imagesRS = pst.executeQuery();
-				while(imagesRS.next()) {
+				while (imagesRS.next()) {
 					String dataString = imagesRS.getString("image_data");
 					Blob dataBlob = fromStringToBlob(dataString);
-					if(writeBlobToDb(conn, id, dataBlob) == 1) {
+					if (writeBlobToDb(conn, id, dataBlob) == 1) {
 						System.out.println("Image data migrated for image_id: " + id);
 					}
-				}
+				} 
 				imagesRS.close();
 			}
 			System.out.println("Migration completed.");
-			
 		} catch (Exception e) {
 			e.printStackTrace();
 		} finally {
-			if(conn != null) {
+			if (conn != null) {
 				try {
 					conn.close();
 				} catch (SQLException e) {
diff --git a/database/mysql/importCPP.java b/database/mysql/importCPP.java
index aa6bb8fe8c..45dbe36342 100755
--- a/database/mysql/importCPP.java
+++ b/database/mysql/importCPP.java
@@ -1,3 +1,8 @@
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.Statement;
+import java.sql.ResultSet;
+import java.sql.Connection;
 import java.sql.*;
 import java.util.UUID;
 import java.util.Properties;
@@ -13,299 +18,266 @@ public class importCPP {
 			System.out.println("Usage: java -cp .:/path/to/mysql-connector-java-3.0.11-stable-bin.jar importCasemgmt 'path/to/oscar.properties'");
 			return;
 		}
+        try (FileInputStream fin = new FileInputStream(args[0])) {
+            Properties prop = new Properties();
+            prop.load(fin);
+            String driver = prop.getProperty("db_driver");
+            System.out.println("Driver " + driver);
+            String uri = prop.getProperty("db_uri");
+            System.out.println("URI " + uri);
+            String dbName = prop.getProperty("db_name");
+            System.out.println("DB NAME " + dbName);
+            String user = prop.getProperty("db_username");
+            System.out.println("DB USER " + user);
+            String passwd = prop.getProperty("db_password");
+            System.out.println("DB PASSWD " + passwd);
+            Statement stmt;
+            Statement stmtUpdate;
+            ResultSet rs;
+            ResultSet rsUpdate;
+            Class.forName(driver);
+            uri += dbName;
+            Connection con = DriverManager.getConnection(uri, user, passwd);
+            stmt = con.createStatement();
+            stmtUpdate = con.createStatement();
+            System.out.println("Grabbing cpp issues from issue table");
+            PreparedStatement pstmt = con.prepareStatement("select issue_id from issue where code =?");
+            PreparedStatement insert = con.prepareStatement("insert into issue (code, description, role, update_date) values(?,?,'nurse',now())", PreparedStatement.RETURN_GENERATED_KEYS);
+            String[][] iCodes = new java.lang.String[][]{ new java.lang.String[]{ "OMeds", "Other Meds as part of cpp" }, new java.lang.String[]{ "SocHistory", "Social History as part of cpp" }, new java.lang.String[]{ "MedHistory", "Medical History as part of cpp" }, new java.lang.String[]{ "Concerns", "Ongoing Concerns as part of cpp" }, new java.lang.String[]{ "Reminders", "Reminders as part of cpp" } };
+            ResultSet rs1;
+            long[] issueIds = new long[iCodes.length];
+            for (int idx = 0; idx < iCodes.length; ++idx) {
+                pstmt.setString(1, iCodes[idx][0]);
+                rs = pstmt.executeQuery();
+                if (!rs.next()) {
+                    System.out.println(iCodes[idx][0] + " not found. Inserting");
+                    insert.setString(1, iCodes[idx][0]);
+                    insert.setString(2, iCodes[idx][1]);
+                    insert.executeUpdate();
+                    rs1 = insert.getGeneratedKeys();
+                    rs1.next();
+                    issueIds[idx] = rs1.getLong(1);
+                    rs1.close();
+                } else
+                    issueIds[idx] = rs.getLong(1);
 
-		try {
-                        FileInputStream fin = new FileInputStream(args[0]);        
-                        Properties prop = new Properties();
-                        prop.load(fin);                                                
-                        
-                        String driver = prop.getProperty("db_driver");
-                        System.out.println("Driver " + driver);
-                        
-                        String uri = prop.getProperty("db_uri");
-                        System.out.println("URI " + uri);
-                        
-                        String dbName = prop.getProperty("db_name");
-                        System.out.println("DB NAME " + dbName);
-                        
-                        String user = prop.getProperty("db_username");
-                        System.out.println("DB USER " + user);
-                        
-                        String passwd = prop.getProperty("db_password");
-                        System.out.println("DB PASSWD " + passwd);
-                        
-			Statement stmt, stmtUpdate;
-			ResultSet rs, rsUpdate;
+                System.out.println(issueIds[idx] + " : " + iCodes[idx][0]);
+                rs.close();
+            }
+            pstmt.close();
+            System.out.println("Grabbing list of patients and respective cpp");
+            rs = stmt.executeQuery("select client_id,program_id from admission order by client_id");
+            pstmt = con.prepareStatement("select provider_no,socialHistory,familyHistory,medicalHistory,ongoingConcerns,reminders,update_date from casemgmt_cpp where demographic_no = ? and id = (select max(id) from casemgmt_cpp where demographic_no = ?)");
+            PreparedStatement pstmt2 = con.prepareStatement("select id from casemgmt_issue where demographic_no = ? and issue_id = ?");
+            PreparedStatement pstmt3 = con.prepareStatement("insert into casemgmt_issue (demographic_no,issue_id,program_id,type,update_date) values(?,?,?,'nurse',now())", PreparedStatement.RETURN_GENERATED_KEYS);
+            PreparedStatement pstmt4 = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " + ("reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'doctor doe'," + "false,?,'1','0',?,'','0',?,?)"), PreparedStatement.RETURN_GENERATED_KEYS);
+            PreparedStatement pstmt5 = con.prepareStatement("insert into casemgmt_issue_notes Values(?,?)");
+            ResultSet rs2;
+            ResultSet rs3;
+            ResultSet rs4;
+            long cIssueId;
+            UUID uuid;
+            ArrayList<Integer> clients = new ArrayList<Integer>();
+            while (rs.next()) {
+                int client_id = rs.getInt(1);
+                if (clients.contains(new Integer(client_id))) {
+                    System.out.println("Multiple record for " + client_id + " skipping");
+                    continue;
+                }
+                clients.add(client_id);
+                pstmt.setString(1, rs.getString(1));
+                pstmt.setString(2, rs.getString(1));
+                rs2 = pstmt.executeQuery();
+                if (rs2.next()) {
+                    String cpp = rs2.getString("socialHistory");
+                    if (cpp != null && !cpp.equals("")) {
+                        System.out.println("Inserting social history for " + rs.getString(1));
+                        pstmt2.setString(1, rs.getString(1));
+                        pstmt2.setLong(2, issueIds[1]);
+                        rs3 = pstmt2.executeQuery();
+                        if (!rs3.next()) {
+                            pstmt3.setString(1, rs.getString(1));
+                            pstmt3.setLong(2, issueIds[1]);
+                            pstmt3.setLong(3, rs.getInt("program_id"));
+                            pstmt3.executeUpdate();
+                            rs4 = pstmt3.getGeneratedKeys();
+                            rs4.next();
+                            cIssueId = rs4.getLong(1);
+                            rs4.close();
+                        } else
+                            cIssueId = rs3.getLong(1);
 
-			Class.forName(driver);
-			
-                        uri += dbName;
-			Connection con = DriverManager.getConnection(uri, user, passwd);
+                        uuid = UUID.randomUUID();
+                        pstmt4.setTimestamp(1, rs2.getTimestamp("update_date"));
+                        pstmt4.setString(2, rs.getString(1));
+                        pstmt4.setString(3, rs2.getString("provider_no"));
+                        pstmt4.setString(4, cpp);
+                        pstmt4.setString(5, rs.getString("program_id"));
+                        pstmt4.setString(6, cpp);
+                        pstmt4.setString(7, uuid.toString());
+                        pstmt4.setTimestamp(8, rs2.getTimestamp("update_date"));
+                        pstmt4.executeUpdate();
+                        rs4 = pstmt4.getGeneratedKeys();
+                        rs4.next();
+                        pstmt5.setLong(1, cIssueId);
+                        pstmt5.setLong(2, rs4.getLong(1));
+                        pstmt5.executeUpdate();
+                        rs3.close();
+                        rs4.close();
+                    }
+                    cpp = rs2.getString("familyHistory");
+                    if (cpp != null && !cpp.equals("")) {
+                        System.out.println("Inserting other Meds for " + rs.getString(1));
+                        pstmt2.setString(1, rs.getString(1));
+                        pstmt2.setLong(2, issueIds[0]);
+                        rs3 = pstmt2.executeQuery();
+                        if (!rs3.next()) {
+                            pstmt3.setString(1, rs.getString(1));
+                            pstmt3.setLong(2, issueIds[0]);
+                            pstmt3.setLong(3, rs.getInt("program_id"));
+                            pstmt3.executeUpdate();
+                            rs4 = pstmt3.getGeneratedKeys();
+                            rs4.next();
+                            cIssueId = rs4.getLong(1);
+                            rs4.close();
+                        } else
+                            cIssueId = rs3.getLong(1);
 
-			stmt = con.createStatement();	
-                        stmtUpdate = con.createStatement();
-                        
-                        System.out.println("Grabbing cpp issues from issue table");
-                        PreparedStatement pstmt = con.prepareStatement("select issue_id from issue where code =?");
-                        PreparedStatement insert = con.prepareStatement("insert into issue (code, description, role, update_date) values(?,?,'nurse',now())",PreparedStatement.RETURN_GENERATED_KEYS);
-                        String[][] iCodes = {{"OMeds","Other Meds as part of cpp"},{"SocHistory","Social History as part of cpp"},{"MedHistory","Medical History as part of cpp"},{"Concerns","Ongoing Concerns as part of cpp"},{"Reminders","Reminders as part of cpp"}};
-                        ResultSet rs1;
-                        long[] issueIds = new long[iCodes.length];
-                        for( int idx = 0; idx < iCodes.length; ++idx) {
-                            pstmt.setString(1,iCodes[idx][0]);
-                            rs = pstmt.executeQuery();                            
-                            if( !rs.next() ) {
-                                System.out.println(iCodes[idx][0] + " not found. Inserting");
-                                insert.setString(1,iCodes[idx][0]);
-                                insert.setString(2,iCodes[idx][1]);
-                                insert.executeUpdate();
-                                rs1 = insert.getGeneratedKeys();
-                                rs1.next();
-                                issueIds[idx] = rs1.getLong(1);
-                                rs1.close();
-                            }
-                            else
-                                issueIds[idx] = rs.getLong(1);
-                            
-                            System.out.println(issueIds[idx] + " : " + iCodes[idx][0]);
-                            rs.close();
-                        }
-                       
-                        pstmt.close();
-                        
-                        System.out.println("Grabbing list of patients and respective cpp");
-                        rs = stmt.executeQuery("select client_id,program_id from admission order by client_id");
-                        pstmt = con.prepareStatement("select provider_no,socialHistory,familyHistory,medicalHistory,ongoingConcerns,reminders,update_date from casemgmt_cpp where demographic_no = ? and id = (select max(id) from casemgmt_cpp where demographic_no = ?)");
-                        PreparedStatement pstmt2 = con.prepareStatement("select id from casemgmt_issue where demographic_no = ? and issue_id = ?");
-                        PreparedStatement pstmt3 = con.prepareStatement("insert into casemgmt_issue (demographic_no,issue_id,program_id,type,update_date) values(?,?,?,'nurse',now())",PreparedStatement.RETURN_GENERATED_KEYS);
-                        PreparedStatement pstmt4 = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " +
-                                "reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'doctor doe'," +
-                                "false,?,'1','0',?,'','0',?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
-                        PreparedStatement pstmt5 = con.prepareStatement("insert into casemgmt_issue_notes Values(?,?)");
-                        ResultSet rs2,rs3,rs4;
-                        long cIssueId;
-                        UUID uuid;
-                        ArrayList<Integer> clients = new ArrayList<Integer>();
-                        while(rs.next()) {
-                            int client_id = rs.getInt(1);
-                            if( clients.contains( new Integer(client_id) ) ) {
-                                System.out.println("Multiple record for " + client_id + " skipping");
-                                continue;
-                            }
-                            
-                            clients.add(client_id);
-                            pstmt.setString(1,rs.getString(1));
-                            pstmt.setString(2,rs.getString(1));
-                            rs2 = pstmt.executeQuery();
-                            if( rs2.next() ) {
-                                String cpp = rs2.getString("socialHistory");
-                                if( cpp != null && !cpp.equals("") ) {
-                                    System.out.println("Inserting social history for " + rs.getString(1));
-                                    pstmt2.setString(1,rs.getString(1));
-                                    pstmt2.setLong(2,issueIds[1]);
-                                    rs3 = pstmt2.executeQuery();
-                                    if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString(1));
-                                        pstmt3.setLong(2,issueIds[1]);
-                                        pstmt3.setLong(3,rs.getInt("program_id"));
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();
-                                    }
-                                    else
-                                        cIssueId = rs3.getLong(1);
-                                    
-                                    uuid = UUID.randomUUID();
-                                    pstmt4.setTimestamp(1,rs2.getTimestamp("update_date"));
-                                    pstmt4.setString(2,rs.getString(1));
-                                    pstmt4.setString(3,rs2.getString("provider_no"));
-                                    pstmt4.setString(4,cpp);
-                                    pstmt4.setString(5,rs.getString("program_id"));
-                                    pstmt4.setString(6,cpp);
-                                    pstmt4.setString(7,uuid.toString());
-                                    pstmt4.setTimestamp(8,rs2.getTimestamp("update_date"));
-                                    pstmt4.executeUpdate();
-                                    rs4 = pstmt4.getGeneratedKeys();
-                                    rs4.next();
-                                    pstmt5.setLong(1,cIssueId);
-                                    pstmt5.setLong(2,rs4.getLong(1));
-                                    pstmt5.executeUpdate();
-                                    rs3.close();
-                                    rs4.close();
-                                }
-                                cpp = rs2.getString("familyHistory");
-                                if( cpp != null && !cpp.equals("") ) {
-                                    System.out.println("Inserting other Meds for " + rs.getString(1));
-                                    pstmt2.setString(1,rs.getString(1));
-                                    pstmt2.setLong(2,issueIds[0]);
-                                    rs3 = pstmt2.executeQuery();
-                                    if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString(1));
-                                        pstmt3.setLong(2,issueIds[0]);
-                                        pstmt3.setLong(3,rs.getInt("program_id"));
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();
-                                    }
-                                    else
-                                        cIssueId = rs3.getLong(1);
-                                    
-                                    uuid = UUID.randomUUID();
-                                    pstmt4.setTimestamp(1,rs2.getTimestamp("update_date"));
-                                    pstmt4.setString(2,rs.getString(1));
-                                    pstmt4.setString(3,rs2.getString("provider_no"));
-                                    pstmt4.setString(4,cpp);
-                                    pstmt4.setString(5,rs.getString("program_id"));
-                                    pstmt4.setString(6,cpp);
-                                    pstmt4.setString(7,uuid.toString());
-                                    pstmt4.setTimestamp(8,rs2.getTimestamp("update_date"));
-                                    pstmt4.executeUpdate();
-                                    rs4 = pstmt4.getGeneratedKeys();
-                                    rs4.next();
-                                    pstmt5.setLong(1,cIssueId);
-                                    pstmt5.setLong(2,rs4.getLong(1));
-                                    pstmt5.executeUpdate();
-                                    rs3.close();
-                                    rs4.close();
-                                }
-                                
-                                cpp = rs2.getString("medicalHistory");
-                                if( cpp != null && !cpp.equals("") ) {
-                                    System.out.println("Inserting Medical History for " + rs.getString(1));
-                                    pstmt2.setString(1,rs.getString(1));
-                                    pstmt2.setLong(2,issueIds[2]);
-                                    rs3 = pstmt2.executeQuery();
-                                    if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString(1));
-                                        pstmt3.setLong(2,issueIds[2]);
-                                        pstmt3.setLong(3,rs.getInt("program_id"));
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();
-                                    }
-                                    else
-                                        cIssueId = rs3.getLong(1);
-                                    
-                                    uuid = UUID.randomUUID();
-                                    pstmt4.setTimestamp(1,rs2.getTimestamp("update_date"));
-                                    pstmt4.setString(2,rs.getString(1));
-                                    pstmt4.setString(3,rs2.getString("provider_no"));
-                                    pstmt4.setString(4,cpp);
-                                    pstmt4.setString(5,rs.getString("program_id"));
-                                    pstmt4.setString(6,cpp);
-                                    pstmt4.setString(7,uuid.toString());
-                                    pstmt4.setTimestamp(8,rs2.getTimestamp("update_date"));
-                                    pstmt4.executeUpdate();
-                                    rs4 = pstmt4.getGeneratedKeys();
-                                    rs4.next();
-                                    pstmt5.setLong(1,cIssueId);
-                                    pstmt5.setLong(2,rs4.getLong(1));
-                                    pstmt5.executeUpdate();
-                                    rs3.close();
-                                    rs4.close();
-                                }
-                                
-                                
-                                cpp = rs2.getString("ongoingConcerns");
-                                if( cpp != null && !cpp.equals("") ) {
-                                    System.out.println("Inserting ongoing Concerns for " + rs.getString(1));
-                                    pstmt2.setString(1,rs.getString(1));
-                                    pstmt2.setLong(2,issueIds[3]);
-                                    rs3 = pstmt2.executeQuery();
-                                    if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString(1));
-                                        pstmt3.setLong(2,issueIds[3]);
-                                        pstmt3.setLong(3,rs.getInt("program_id"));
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();
-                                    }
-                                    else
-                                        cIssueId = rs3.getLong(1);
-                                    
-                                    uuid = UUID.randomUUID();
-                                    pstmt4.setTimestamp(1,rs2.getTimestamp("update_date"));
-                                    pstmt4.setString(2,rs.getString(1));
-                                    pstmt4.setString(3,rs2.getString("provider_no"));
-                                    pstmt4.setString(4,cpp);
-                                    pstmt4.setString(5,rs.getString("program_id"));
-                                    pstmt4.setString(6,cpp);
-                                    pstmt4.setString(7,uuid.toString());
-                                    pstmt4.setTimestamp(8,rs2.getTimestamp("update_date"));
-                                    pstmt4.executeUpdate();
-                                    rs4 = pstmt4.getGeneratedKeys();
-                                    rs4.next();
-                                    pstmt5.setLong(1,cIssueId);
-                                    pstmt5.setLong(2,rs4.getLong(1));
-                                    pstmt5.executeUpdate();
-                                    rs3.close();
-                                    rs4.close();
-                                }
-                                
-                                cpp = rs2.getString("reminders");
-                                if( cpp != null && !cpp.equals("") ) {
-                                    System.out.println("Inserting Reminders for " + rs.getString(1));
-                                    pstmt2.setString(1,rs.getString(1));
-                                    pstmt2.setLong(2,issueIds[4]);
-                                    rs3 = pstmt2.executeQuery();
-                                    if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString(1));
-                                        pstmt3.setLong(2,issueIds[4]);
-                                        pstmt3.setLong(3,rs.getInt("program_id"));
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();
-                                    }
-                                    else
-                                        cIssueId = rs3.getLong(1);
-                                    
-                                    uuid = UUID.randomUUID();
-                                    pstmt4.setTimestamp(1,rs2.getTimestamp("update_date"));
-                                    pstmt4.setString(2,rs.getString(1));
-                                    pstmt4.setString(3,rs2.getString("provider_no"));
-                                    pstmt4.setString(4,cpp);
-                                    pstmt4.setString(5,rs.getString("program_id"));
-                                    pstmt4.setString(6,cpp);
-                                    pstmt4.setString(7,uuid.toString());
-                                    pstmt4.setTimestamp(8,rs2.getTimestamp("update_date"));
-                                    pstmt4.executeUpdate();
-                                    rs4 = pstmt4.getGeneratedKeys();
-                                    rs4.next();
-                                    pstmt5.setLong(1,cIssueId);
-                                    pstmt5.setLong(2,rs4.getLong(1));
-                                    pstmt5.executeUpdate();
-                                    rs3.close();
-                                    rs4.close();
-                                }
-                            }
-                        }
-                        
-                        
-                        
-                        
-                        
-                        
-                        
-                }
-                catch( FileNotFoundException e ) {
-                    System.out.println("Could not open properties file:\n" + e.getMessage());
+                        uuid = UUID.randomUUID();
+                        pstmt4.setTimestamp(1, rs2.getTimestamp("update_date"));
+                        pstmt4.setString(2, rs.getString(1));
+                        pstmt4.setString(3, rs2.getString("provider_no"));
+                        pstmt4.setString(4, cpp);
+                        pstmt4.setString(5, rs.getString("program_id"));
+                        pstmt4.setString(6, cpp);
+                        pstmt4.setString(7, uuid.toString());
+                        pstmt4.setTimestamp(8, rs2.getTimestamp("update_date"));
+                        pstmt4.executeUpdate();
+                        rs4 = pstmt4.getGeneratedKeys();
+                        rs4.next();
+                        pstmt5.setLong(1, cIssueId);
+                        pstmt5.setLong(2, rs4.getLong(1));
+                        pstmt5.executeUpdate();
+                        rs3.close();
+                        rs4.close();
+                    }
+                    cpp = rs2.getString("medicalHistory");
+                    if (cpp != null && !cpp.equals("")) {
+                        System.out.println("Inserting Medical History for " + rs.getString(1));
+                        pstmt2.setString(1, rs.getString(1));
+                        pstmt2.setLong(2, issueIds[2]);
+                        rs3 = pstmt2.executeQuery();
+                        if (!rs3.next()) {
+                            pstmt3.setString(1, rs.getString(1));
+                            pstmt3.setLong(2, issueIds[2]);
+                            pstmt3.setLong(3, rs.getInt("program_id"));
+                            pstmt3.executeUpdate();
+                            rs4 = pstmt3.getGeneratedKeys();
+                            rs4.next();
+                            cIssueId = rs4.getLong(1);
+                            rs4.close();
+                        } else
+                            cIssueId = rs3.getLong(1);
+
+                        uuid = UUID.randomUUID();
+                        pstmt4.setTimestamp(1, rs2.getTimestamp("update_date"));
+                        pstmt4.setString(2, rs.getString(1));
+                        pstmt4.setString(3, rs2.getString("provider_no"));
+                        pstmt4.setString(4, cpp);
+                        pstmt4.setString(5, rs.getString("program_id"));
+                        pstmt4.setString(6, cpp);
+                        pstmt4.setString(7, uuid.toString());
+                        pstmt4.setTimestamp(8, rs2.getTimestamp("update_date"));
+                        pstmt4.executeUpdate();
+                        rs4 = pstmt4.getGeneratedKeys();
+                        rs4.next();
+                        pstmt5.setLong(1, cIssueId);
+                        pstmt5.setLong(2, rs4.getLong(1));
+                        pstmt5.executeUpdate();
+                        rs3.close();
+                        rs4.close();
+                    }
+                    cpp = rs2.getString("ongoingConcerns");
+                    if (cpp != null && !cpp.equals("")) {
+                        System.out.println("Inserting ongoing Concerns for " + rs.getString(1));
+                        pstmt2.setString(1, rs.getString(1));
+                        pstmt2.setLong(2, issueIds[3]);
+                        rs3 = pstmt2.executeQuery();
+                        if (!rs3.next()) {
+                            pstmt3.setString(1, rs.getString(1));
+                            pstmt3.setLong(2, issueIds[3]);
+                            pstmt3.setLong(3, rs.getInt("program_id"));
+                            pstmt3.executeUpdate();
+                            rs4 = pstmt3.getGeneratedKeys();
+                            rs4.next();
+                            cIssueId = rs4.getLong(1);
+                            rs4.close();
+                        } else
+                            cIssueId = rs3.getLong(1);
+
+                        uuid = UUID.randomUUID();
+                        pstmt4.setTimestamp(1, rs2.getTimestamp("update_date"));
+                        pstmt4.setString(2, rs.getString(1));
+                        pstmt4.setString(3, rs2.getString("provider_no"));
+                        pstmt4.setString(4, cpp);
+                        pstmt4.setString(5, rs.getString("program_id"));
+                        pstmt4.setString(6, cpp);
+                        pstmt4.setString(7, uuid.toString());
+                        pstmt4.setTimestamp(8, rs2.getTimestamp("update_date"));
+                        pstmt4.executeUpdate();
+                        rs4 = pstmt4.getGeneratedKeys();
+                        rs4.next();
+                        pstmt5.setLong(1, cIssueId);
+                        pstmt5.setLong(2, rs4.getLong(1));
+                        pstmt5.executeUpdate();
+                        rs3.close();
+                        rs4.close();
+                    }
+                    cpp = rs2.getString("reminders");
+                    if (cpp != null && !cpp.equals("")) {
+                        System.out.println("Inserting Reminders for " + rs.getString(1));
+                        pstmt2.setString(1, rs.getString(1));
+                        pstmt2.setLong(2, issueIds[4]);
+                        rs3 = pstmt2.executeQuery();
+                        if (!rs3.next()) {
+                            pstmt3.setString(1, rs.getString(1));
+                            pstmt3.setLong(2, issueIds[4]);
+                            pstmt3.setLong(3, rs.getInt("program_id"));
+                            pstmt3.executeUpdate();
+                            rs4 = pstmt3.getGeneratedKeys();
+                            rs4.next();
+                            cIssueId = rs4.getLong(1);
+                            rs4.close();
+                        } else
+                            cIssueId = rs3.getLong(1);
+
+                        uuid = UUID.randomUUID();
+                        pstmt4.setTimestamp(1, rs2.getTimestamp("update_date"));
+                        pstmt4.setString(2, rs.getString(1));
+                        pstmt4.setString(3, rs2.getString("provider_no"));
+                        pstmt4.setString(4, cpp);
+                        pstmt4.setString(5, rs.getString("program_id"));
+                        pstmt4.setString(6, cpp);
+                        pstmt4.setString(7, uuid.toString());
+                        pstmt4.setTimestamp(8, rs2.getTimestamp("update_date"));
+                        pstmt4.executeUpdate();
+                        rs4 = pstmt4.getGeneratedKeys();
+                        rs4.next();
+                        pstmt5.setLong(1, cIssueId);
+                        pstmt5.setLong(2, rs4.getLong(1));
+                        pstmt5.executeUpdate();
+                        rs3.close();
+                        rs4.close();
+                    }
                 }
-                catch( IOException e ) {
-                    System.out.println("Error reading properties file\n" + e.getMessage());
-                }                
-		catch( Exception e ) {
-			System.out.println("DB ERROR: " + e.getMessage());
-			e.printStackTrace();
-		}
+            } 
+        } catch (FileNotFoundException e) {
+            System.out.println("Could not open properties file:\n" + e.getMessage());
+        } catch (IOException e) {
+            System.out.println("Error reading properties file\n" + e.getMessage());
+        } catch (Exception e) {
+            System.out.println("DB ERROR: " + e.getMessage());
+            e.printStackTrace();
+        }
 	}
 }
\ No newline at end of file
diff --git a/database/mysql/importCasemgmt.java b/database/mysql/importCasemgmt.java
index d636d57f2d..594f926109 100644
--- a/database/mysql/importCasemgmt.java
+++ b/database/mysql/importCasemgmt.java
@@ -1,3 +1,10 @@
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.sql.Date;
+import java.sql.ResultSet;
+import java.sql.Connection;
 /*n
  * 
  * Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved. *
@@ -50,534 +57,459 @@ public class importCasemgmt {
 			System.out.println("Usage: java -cp .:/path/to/mysql-connector-java-3.0.11-stable-bin.jar importCasemgmt 'path/to/oscar.properties'");
 			return;
 		}
-
-		try {
-                        FileInputStream fin = new FileInputStream(args[0]);        
-                        Properties prop = new Properties();
-                        prop.load(fin);                                                
-                        
-                        String driver = prop.getProperty("db_driver");
-                        System.out.println("Driver " + driver);
-                        
-                        String uri = prop.getProperty("db_uri");
-                        System.out.println("URI " + uri);
-                        
-                        String dbName = prop.getProperty("db_name");
-                        System.out.println("DB NAME " + dbName);
-                        
-                        String user = prop.getProperty("db_username");
-                        System.out.println("DB USER " + user);
-                        
-                        String passwd = prop.getProperty("db_password");
-                        System.out.println("DB PASSWD " + passwd);
-                        
-			Statement stmt, stmtUpdate;
-			ResultSet rs, rs1, rsUpdate;
-
+		try (FileInputStream fin = new FileInputStream(args[0])) {
+			Properties prop = new Properties();
+			prop.load(fin);
+			String driver = prop.getProperty("db_driver");
+			System.out.println("Driver " + driver);
+			String uri = prop.getProperty("db_uri");
+			System.out.println("URI " + uri);
+			String dbName = prop.getProperty("db_name");
+			System.out.println("DB NAME " + dbName);
+			String user = prop.getProperty("db_username");
+			System.out.println("DB USER " + user);
+			String passwd = prop.getProperty("db_password");
+			System.out.println("DB PASSWD " + passwd);
+			Statement stmt;
+			Statement stmtUpdate;
+			ResultSet rs;
+			ResultSet rs1;
+			ResultSet rsUpdate;
 			Class.forName(driver);
-			
-                        uri += dbName;
+			uri += dbName;
 			Connection con = DriverManager.getConnection(uri, user, passwd);
+			stmt = con.createStatement();
+			stmtUpdate = con.createStatement();
+			System.out.println("Checking for OSCAR program");
+			String sql = "select id from program where name = 'OSCAR'";
+			rs1 = stmt.executeQuery(sql);
+			String programId;
+			if (!rs1.next()) {
+				System.out.println("Creating OSCAR program");
+				int result = stmt.executeUpdate("insert into program (facilityId, name,emergencyNumber,maxAllowed,holdingTank,type,programStatus,allowBatchAdmission,allowBatchDischarge,hic,exclusiveView,defaultServiceRestrictionDays,userDefined,enableEncounterTime,enableEncounterTransportationTime) " + "Values(1,'OSCAR','','99999',0,'Bed','active',0,0,0,'',0,0,0,0)", Statement.RETURN_GENERATED_KEYS);
+				rs = stmt.getGeneratedKeys();
+				rs.next();
+				programId = rs.getString(1);
+				rs.close();
+				System.out.println("INSERT into program " + programId);
+			} else {
+				System.out.println("OSCAR program already present -- skipping");
+				programId = rs1.getString(1);
+				rs1.close();
+			}
+			System.out.println("Checking for additional providers to add");
+			sql = "select provider_no from provider where provider_no = '000000'";
+			rs1 = stmt.executeQuery(sql);
+			if (!rs1.next()) {
+				rs1.close();
+				System.out.println("Creating dummy provider to sign imported notes");
+				stmt.executeUpdate("INSERT INTO provider (provider_no, last_name, first_name, provider_type, specialty, team, sex, dob, address, phone, work_phone, ohip_no, rma_no," + ("billing_no, hso_no, status, comments, provider_activity) " + "VALUES ('000000','doe','doctor','doctor','','','','0001-01-01','','','','','','','','1','','')"));
+				stmt.executeUpdate("insert into `secUserRole` (provider_no, role_name, orgcd, activeyn) values('000000', 'doctor', 'R0000001', 1)");
+			} else
+				System.out.println("Dummy provider present -- skipping");
 
-			stmt = con.createStatement();	
-                        stmtUpdate = con.createStatement();
-                        System.out.println("Checking for OSCAR program");
-                        String sql = "select id from program where name = 'OSCAR'";
-                        rs1 = stmt.executeQuery(sql);
-                        String programId;
-                        if( !rs1.next() ) {
-                            System.out.println("Creating OSCAR program");
-                        
-                            int result = stmt.executeUpdate("insert into program (facilityId, name,emergencyNumber,maxAllowed,holdingTank,type,programStatus,allowBatchAdmission,allowBatchDischarge,hic,exclusiveView,defaultServiceRestrictionDays,userDefined,enableEncounterTime,enableEncounterTransportationTime) " +
-                                "Values(1,'OSCAR','','99999',0,'Bed','active',0,0,0,'',0,0,0,0)", Statement.RETURN_GENERATED_KEYS);
-                        
-                            rs = stmt.getGeneratedKeys();
-                        
-                            rs.next();
-                        
-                            programId = rs.getString(1);
-                            rs.close();
-                            System.out.println("INSERT into program " + programId);
-                        }
-                        else {
-                            System.out.println("OSCAR program already present -- skipping");
-                            programId = rs1.getString(1);
-                            rs1.close();
-                        }                        
-                        
-                        System.out.println("Checking for additional providers to add");
-                        sql = "select provider_no from provider where provider_no = '000000'";
-                        rs1 = stmt.executeQuery(sql);
-                        
-                        if( !rs1.next() ) {
-                            rs1.close();
-                            System.out.println("Creating dummy provider to sign imported notes");
-                            stmt.executeUpdate("INSERT INTO provider (provider_no, last_name, first_name, provider_type, specialty, team, sex, dob, address, phone, work_phone, ohip_no, rma_no," +
-                                    "billing_no, hso_no, status, comments, provider_activity) " +
-                                    "VALUES ('000000','doe','doctor','doctor','','','','0001-01-01','','','','','','','','1','','')");
-                            stmt.executeUpdate("insert into `secUserRole` (provider_no, role_name, orgcd, activeyn) values('000000', 'doctor', 'R0000001', 1)");
-                        }
-                        else
-                            System.out.println("Dummy provider present -- skipping");
-                        
-                        //we have to make sure we only grant perms to entitled providers
-                        sql = "select roleUserGroup from secObjPrivilege where objectName = '_eChart' and privilege = 'x'";
-                        rs = stmt.executeQuery(sql);
-                        ArrayList<String> secObjs  = new ArrayList<String>();
-                        while( rs.next() ) {
-                            secObjs.add(rs.getString(1));
-                        }
-                        
-                        rs.close();
-                        sql = "select provider_no, role_name from secUserRole where provider_no in (select provider_no from provider) ";
-                        if( secObjs.size() > 0 )
-                            sql += "and ";
-                        
-                        for( int idx = 0; idx < secObjs.size(); ++idx ) {
-                            sql += "role_name = '" + secObjs.get(idx) + "'";
-                            if( idx <= secObjs.size() - 2)
-                                sql += " or ";
-                        }
-                        
-                        sql += " order by role_name";
-                        rs = stmt.executeQuery(sql);
-                        
-                        //we got to watch out for duplicate entries
-                        //right now we default to first record as they are alpha sorted i.e. doctor locum nurse
-                        ArrayList<String> providers = new ArrayList<String>();
-                        String role_name, prov;
-                        int role_id;
-                        PreparedStatement insert = con.prepareStatement("insert into program_provider (program_id,provider_no,role_id) Values('" + programId + "',?,?)");
-                        PreparedStatement pcheck = con.prepareStatement("select id from program_provider where provider_no = ?");
-                        while( rs.next() ) {                            
-                            prov = rs.getString("provider_no");
-                            pcheck.setString(1,prov);
-                            rs1 = pcheck.executeQuery();
-                            if( !rs1.next() ) {
-                                role_name = rs.getString("role_name");                                
-                                insert.setString(1, prov);
-                                
-                                if( role_name.equalsIgnoreCase("nurse") )
-                                    role_id = 2;
-                                else
-                                    role_id = 1;
+			// we have to make sure we only grant perms to entitled providers
+			sql = "select roleUserGroup from secObjPrivilege where objectName = '_eChart' and privilege = 'x'";
+			rs = stmt.executeQuery(sql);
+			ArrayList<String> secObjs = new ArrayList<String>();
+			while (rs.next()) {
+				secObjs.add(rs.getString(1));
+			} 
+			rs.close();
+			sql = "select provider_no, role_name from secUserRole where provider_no in (select provider_no from provider) ";
+			if (secObjs.size() > 0)
+				sql += "and ";
 
-                                insert.setInt(2, role_id);
+			for (int idx = 0; idx < secObjs.size(); ++idx) {
+				sql += "role_name = '" + secObjs.get(idx) + "'";
+				if (idx <= secObjs.size() - 2)
+					sql += " or ";
 
-                                if( insert.executeUpdate() != 1 )
-                                    throw new SQLException("insert into program_provider failed" + prov);
-                                                                
-                                System.out.println("Imported provider " + prov);
-                            }
-                            else
-                                System.out.println("provider " + prov + " present -- skipping");
-                            
-                            rs1.close();
-                        }
-                        
-                        rs.close();
-                        insert.close();
-                        System.out.println("Checking CAISI role permissions");
-                        sql = "Select program_id from program_access where program_id = " + programId;
-                        rs1 = stmt.executeQuery(sql);
-                        if( !rs1.next() ) {
-                            System.out.println("Setting up CAISI role permissions");
-                            String id;                        
-                            insert = con.prepareStatement("insert into program_access (program_id,access_type_id,all_roles) Values(" + programId + ",?,false)", PreparedStatement.RETURN_GENERATED_KEYS);
-                            PreparedStatement roleInsert = con.prepareStatement("insert into program_access_roles (id,role_id) Values(?,1),(?,2)");
-                            for( int idx = 1; idx < 9; ++idx ) {
+			}
+			sql += " order by role_name";
+			rs = stmt.executeQuery(sql);
+			// we got to watch out for duplicate entries
+			// right now we default to first record as they are alpha sorted i.e. doctor locum nurse
+			ArrayList<String> providers = new ArrayList<String>();
+			String role_name;
+			String prov;
+			int role_id;
+			PreparedStatement insert = con.prepareStatement("insert into program_provider (program_id,provider_no,role_id) Values('" + programId + "',?,?)");
+			PreparedStatement pcheck = con.prepareStatement("select id from program_provider where provider_no = ?");
+			while (rs.next()) {
+				prov = rs.getString("provider_no");
+				pcheck.setString(1, prov);
+				rs1 = pcheck.executeQuery();
+				if (!rs1.next()) {
+					role_name = rs.getString("role_name");
+					insert.setString(1, prov);
+					if (role_name.equalsIgnoreCase("nurse"))
+						role_id = 2;
+					else
+						role_id = 1;
 
-                                insert.setString(1, String.valueOf(idx));
+					insert.setInt(2, role_id);
+					if (insert.executeUpdate() != 1)
+						throw new SQLException("insert into program_provider failed" + prov);
 
-                                if( insert.executeUpdate() != 1 )
-                                        throw new SQLException("Setting up CAISI role permissions failed");
+					System.out.println("Imported provider " + prov);
+				} else
+					System.out.println("provider " + prov + " present -- skipping");
 
-                                rs = insert.getGeneratedKeys();
-                                rs.next();                                                        
+				rs1.close();
+			} 
+			rs.close();
+			insert.close();
+			System.out.println("Checking CAISI role permissions");
+			sql = "Select program_id from program_access where program_id = " + programId;
+			rs1 = stmt.executeQuery(sql);
+			if (!rs1.next()) {
+				System.out.println("Setting up CAISI role permissions");
+				String id;
+				insert = con.prepareStatement("insert into program_access (program_id,access_type_id,all_roles) Values(" + programId + ",?,false)", PreparedStatement.RETURN_GENERATED_KEYS);
+				PreparedStatement roleInsert = con.prepareStatement("insert into program_access_roles (id,role_id) Values(?,1),(?,2)");
+				for (int idx = 1; idx < 9; ++idx) {
+					insert.setString(1, String.valueOf(idx));
+					if (insert.executeUpdate() != 1)
+						throw new SQLException("Setting up CAISI role permissions failed");
 
-                                roleInsert.setInt(1, rs.getInt(1));
-                                roleInsert.setInt(2, rs.getInt(1));
+					rs = insert.getGeneratedKeys();
+					rs.next();
+					roleInsert.setInt(1, rs.getInt(1));
+					roleInsert.setInt(2, rs.getInt(1));
+					if (roleInsert.executeUpdate() != 2)
+						throw new SQLException("Setting up CAISI role permissions failed");
 
-                                if( roleInsert.executeUpdate() != 2 )
-                                        throw new SQLException("Setting up CAISI role permissions failed");
+					rs.close();
+				}
+				insert.close();
+				roleInsert.close();
+				System.out.println("Doctors and Nurses now have full CAISI privs");
+			} else
+				System.out.println("skipping CAISI role permissions already done");
 
-                                rs.close();
-                            }
+			rs1.close();
+			System.out.println("Importing OSCAR patients into CAISI");
+			sql = "select demographic_no, date_joined, provider_no from demographic";
+			rs = stmt.executeQuery(sql);
+			insert = con.prepareStatement("insert into admission (client_id,program_id,provider_no,admission_date,admission_status,team_id,temporary_admission_flag) Values(?,'" + programId + "',?,?,'current',0,0)");
+			pcheck = con.prepareStatement("select client_id from admission where client_id = ?");
+			int i = 1;
+			while (rs.next()) {
+				pcheck.setInt(1, rs.getInt("demographic_no"));
+				rs1 = pcheck.executeQuery();
+				if (!rs1.next()) {
+					insert.setInt(1, rs.getInt("demographic_no"));
+					insert.setString(2, rs.getString("provider_no"));
+					insert.setDate(3, rs.getDate("date_joined"));
+					if (insert.executeUpdate() != 1)
+						throw new SQLException("insert into admission failed " + rs.getString("demographic_no"));
 
-                            insert.close();
-                            roleInsert.close();
-                            System.out.println("Doctors and Nurses now have full CAISI privs");
-                        }
-                        else
-                            System.out.println("skipping CAISI role permissions already done");
-                        rs1.close();
-                        
-                        System.out.println("Importing OSCAR patients into CAISI");
-                        
-                        sql = "select demographic_no, date_joined, provider_no from demographic";
-                        rs = stmt.executeQuery(sql);
-                        insert = con.prepareStatement("insert into admission (client_id,program_id,provider_no,admission_date,admission_status,team_id,temporary_admission_flag) Values(?,'" + programId +"',?,?,'current',0,0)");
-                        pcheck = con.prepareStatement("select client_id from admission where client_id = ?");
-                        int i = 1;
-                        while( rs.next() ) {                            
-                            pcheck.setInt(1,rs.getInt("demographic_no"));
-                            rs1 = pcheck.executeQuery();
-                            if( !rs1.next() ) {
-                                insert.setInt(1, rs.getInt("demographic_no"));
-                                insert.setString(2, rs.getString("provider_no"));
-                                insert.setDate(3, rs.getDate("date_joined"));
-                            
-                                if( insert.executeUpdate() != 1 )
-                                       throw new SQLException("insert into admission failed " + rs.getString("demographic_no"));
-                            
-                                ++i;
-                                if( i > 4 ) {
-                                    System.out.println("OK");
-                                    i = 1;
-                                }
-                                
-                                System.out.print(rs.getString("demographic_no") + " ");
-                            }                           
-                        }
-                        rs.close();
-                        insert.close();
-                        System.out.println("OK -- Done");
-                        System.out.println("Importing current eChart records. Be patient this may take a few minutes.");
-                        
-                        System.out.println("Grabbing cpp issues from issue table");
-                        PreparedStatement pstmt = con.prepareStatement("select issue_id from issue where code =?");
-                        insert = con.prepareStatement("insert into issue (code, description, role, update_date) values(?,?,'nurse',now())",PreparedStatement.RETURN_GENERATED_KEYS);
-                        String[][] iCodes = {{"OMeds","Other Meds as part of cpp"},{"SocHistory","Social History as part of cpp"},{"MedHistory","Medical History as part of cpp"},{"Concerns","Ongoing Concerns as part of cpp"},{"Reminders","Reminders as part of cpp"}};
-                        long[] issueIds = new long[iCodes.length];
-                        for( int idx = 0; idx < iCodes.length; ++idx) {
-                            pstmt.setString(1,iCodes[idx][0]);
-                            rs = pstmt.executeQuery();                            
-                            if( !rs.next() ) {
-                                System.out.println(iCodes[idx][0] + " not found. Inserting");
-                                insert.setString(1,iCodes[idx][0]);
-                                insert.setString(2,iCodes[idx][1]);
-                                insert.executeUpdate();
-                                rs1 = insert.getGeneratedKeys();
-                                rs1.next();
-                                issueIds[idx] = rs1.getLong(1);
-                                rs1.close();
-                            }
-                            else
-                                issueIds[idx] = rs.getLong(1);
-                            
-                            System.out.println(issueIds[idx] + " : " + iCodes[idx][0]);
-                            rs.close();
-                        }
-                       
-                        pstmt.close();
+					++i;
+					if (i > 4) {
+						System.out.println("OK");
+						i = 1;
+					}
+					System.out.print(rs.getString("demographic_no") + " ");
+				}
+			} 
+			rs.close();
+			insert.close();
+			System.out.println("OK -- Done");
+			System.out.println("Importing current eChart records. Be patient this may take a few minutes.");
+			System.out.println("Grabbing cpp issues from issue table");
+			PreparedStatement pstmt = con.prepareStatement("select issue_id from issue where code =?");
+			insert = con.prepareStatement("insert into issue (code, description, role, update_date) values(?,?,'nurse',now())", PreparedStatement.RETURN_GENERATED_KEYS);
+			String[][] iCodes = new java.lang.String[][]{ new java.lang.String[]{ "OMeds", "Other Meds as part of cpp" }, new java.lang.String[]{ "SocHistory", "Social History as part of cpp" }, new java.lang.String[]{ "MedHistory", "Medical History as part of cpp" }, new java.lang.String[]{ "Concerns", "Ongoing Concerns as part of cpp" }, new java.lang.String[]{ "Reminders", "Reminders as part of cpp" } };
+			long[] issueIds = new long[iCodes.length];
+			for (int idx = 0; idx < iCodes.length; ++idx) {
+				pstmt.setString(1, iCodes[idx][0]);
+				rs = pstmt.executeQuery();
+				if (!rs.next()) {
+					System.out.println(iCodes[idx][0] + " not found. Inserting");
+					insert.setString(1, iCodes[idx][0]);
+					insert.setString(2, iCodes[idx][1]);
+					insert.executeUpdate();
+					rs1 = insert.getGeneratedKeys();
+					rs1.next();
+					issueIds[idx] = rs1.getLong(1);
+					rs1.close();
+				} else
+					issueIds[idx] = rs.getLong(1);
 
-                        PreparedStatement pstmt2 = con.prepareStatement("select id from casemgmt_issue where demographic_no = ? and issue_id = ?");
-                        PreparedStatement pstmt3 = con.prepareStatement("insert into casemgmt_issue (demographic_no,issue_id, program_id,type,update_date) values(?,?," + programId + ",'nurse',now())",PreparedStatement.RETURN_GENERATED_KEYS);
-                        PreparedStatement pstmt4 = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " +
-                                "reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'000000'," +
-                                "false," + programId + ",'1','0',?,'','0',?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
-                        PreparedStatement pstmt5 = con.prepareStatement("insert into casemgmt_issue_notes (id, note_id) Values(?,?)");
-                        
-                        
-                        sql = "select * from eChart e left join (select max(eChartId) eChartId from eChart where subject != 'SPLIT CHART' group by demographicNo) " + 
-                                "mx using(eChartId) where e.eChartId = mx.eChartId and e.subject != 'SPLIT CHART'";
-                        
-                        rs = stmt.executeQuery(sql);
-                        insert = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " +
-                                "reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'000000'," +
-                                "false,'" + programId + "','1','0',?,'','0',?,?)");
-                        PreparedStatement cppInsert = con.prepareStatement("insert into casemgmt_cpp (demographic_no,provider_no,socialHistory,familyHistory,medicalHistory,ongoingConcerns," +
-                                "reminders,update_date) Values(?,?,?,?,?,?,?,?)");
-                        pcheck = con.prepareStatement("select note_id from casemgmt_note where demographic_no = ? and (signing_provider_no = '000000' or (note = ? and update_date = ?))");
-                        UUID uuid;
-                        String note;                        
-                        ResultSet rs3,rs4;
-                        long cIssueId, msecs;
-                        Date d;
-                        while( rs.next() ) {
-                            pcheck.setString(1, rs.getString("demographicNo"));
-                            pcheck.setString(2, rs.getString("encounter"));
-                            
-                            msecs = rs.getTimestamp("timeStamp").getTime();
-                            msecs += (1000*60*2);
-                            
-                            d = new Date(msecs);
-                            pcheck.setDate(3, d);
-                            rs1 = pcheck.executeQuery();
-                            if( rs1.next() ) {
-                                System.out.println("EChart for " + rs.getString("demographicNo") + " already present -- skipping");
-                                continue;
-                            }
-                            uuid = UUID.randomUUID();
-                           
-                            Timestamp time = new Timestamp(msecs);
-                            
-                            insert.setTimestamp(1, time);
-                            insert.setString(2, rs.getString("demographicNo"));
-                            insert.setString(3, rs.getString("providerNo"));
-                            note = formatNote(new StringBuffer(rs.getString("encounter")));
-                            note = "LAST CHART\n" + note;
-                            insert.setString(4, note);
-                            insert.setString(5, note);
-                            insert.setString(6, uuid.toString());
-                            insert.setTimestamp(7, time);
-                            
-                            if( insert.executeUpdate() != 1 )
-                                    throw new SQLException("inserting case note for " + rs.getString("demographicNo") + " failed");
-                            
-                            insert.clearParameters();
-                            System.out.println("Imported note for " + rs.getString("demographicNo"));
-                            
-                            cppInsert.setString(1, rs.getString("demographicNo"));
-                            cppInsert.setString(2, rs.getString("providerNo"));
-                            cppInsert.setString(3, rs.getString("socialHistory"));
-                            cppInsert.setString(4, rs.getString("familyHistory"));
-                            cppInsert.setString(5, rs.getString("medicalHistory"));
-                            cppInsert.setString(6, rs.getString("ongoingConcerns"));
-                            cppInsert.setString(7, rs.getString("reminders"));
-                            cppInsert.setTimestamp(8, rs.getTimestamp("timeStamp"));
-                            
-                            if( cppInsert.executeUpdate() != 1 )
-                                    throw new SQLException(sql);
-                            
-                            cppInsert.clearParameters();
-                            System.out.println("Imported eChart cpp for " + rs.getString("demographicNo"));
-                            System.out.println("Creating cpp issue note");
-                            
-                            note = rs.getString("socialHistory");
-                            if( note != null && !note.equals("") ) {
-                                System.out.println("Inserting social history for " + rs.getString("demographicNo"));
-                                pstmt2.setString(1,rs.getString("demographicNo"));
-                                pstmt2.setLong(2,issueIds[1]);
-                                rs3 = pstmt2.executeQuery();
-                                if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString("demographicNo"));
-                                        pstmt3.setLong(2,issueIds[1]);
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();                                          
-                                }
-                                else
-                                    cIssueId = rs3.getLong(1);
+				System.out.println(issueIds[idx] + " : " + iCodes[idx][0]);
+				rs.close();
+			}
+			pstmt.close();
+			PreparedStatement pstmt2 = con.prepareStatement("select id from casemgmt_issue where demographic_no = ? and issue_id = ?");
+			PreparedStatement pstmt3 = con.prepareStatement("insert into casemgmt_issue (demographic_no,issue_id, program_id,type,update_date) values(?,?," + programId + ",'nurse',now())", PreparedStatement.RETURN_GENERATED_KEYS);
+			PreparedStatement pstmt4 = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " + ("reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'000000'," + "false,") + programId + ",'1','0',?,'','0',?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
+			PreparedStatement pstmt5 = con.prepareStatement("insert into casemgmt_issue_notes (id, note_id) Values(?,?)");
+			sql = "select * from eChart e left join (select max(eChartId) eChartId from eChart where subject != 'SPLIT CHART' group by demographicNo) " + "mx using(eChartId) where e.eChartId = mx.eChartId and e.subject != 'SPLIT CHART'";
+			rs = stmt.executeQuery(sql);
+			insert = con.prepareStatement("insert into casemgmt_note (update_date, demographic_no, provider_no, note,  signed, signing_provider_no, include_issue_innote, program_no, " + ("reporter_caisi_role, reporter_program_team, history, password, locked, uuid, observation_date) Values(?,?,?,?,true,'000000'," + "false,'") + programId + "','1','0',?,'','0',?,?)");
+			PreparedStatement cppInsert = con.prepareStatement("insert into casemgmt_cpp (demographic_no,provider_no,socialHistory,familyHistory,medicalHistory,ongoingConcerns," + "reminders,update_date) Values(?,?,?,?,?,?,?,?)");
+			pcheck = con.prepareStatement("select note_id from casemgmt_note where demographic_no = ? and (signing_provider_no = '000000' or (note = ? and update_date = ?))");
+			UUID uuid;
+			String note;
+			ResultSet rs3;
+			ResultSet rs4;
+			long cIssueId;
+			long msecs;
+			Date d;
+			while (rs.next()) {
+				pcheck.setString(1, rs.getString("demographicNo"));
+				pcheck.setString(2, rs.getString("encounter"));
+				msecs = rs.getTimestamp("timeStamp").getTime();
+				msecs += 1000 * 60 * 2;
+				d = new Date(msecs);
+				pcheck.setDate(3, d);
+				rs1 = pcheck.executeQuery();
+				if (rs1.next()) {
+					System.out.println("EChart for " + rs.getString("demographicNo") + " already present -- skipping");
+					continue;
+				}
+				uuid = UUID.randomUUID();
+				Timestamp time = new Timestamp(msecs);
+				insert.setTimestamp(1, time);
+				insert.setString(2, rs.getString("demographicNo"));
+				insert.setString(3, rs.getString("providerNo"));
+				note = formatNote(new StringBuffer(rs.getString("encounter")));
+				note = "LAST CHART\n" + note;
+				insert.setString(4, note);
+				insert.setString(5, note);
+				insert.setString(6, uuid.toString());
+				insert.setTimestamp(7, time);
+				if (insert.executeUpdate() != 1)
+					throw new SQLException("inserting case note for " + rs.getString("demographicNo") + " failed");
 
-                                uuid = UUID.randomUUID();
-                                pstmt4.setTimestamp(1,rs.getTimestamp("timeStamp"));
-                                pstmt4.setString(2,rs.getString("demographicNo"));
-                                pstmt4.setString(3,rs.getString("providerNo"));
-                                pstmt4.setString(4,note);
-                                pstmt4.setString(5,note);
-                                pstmt4.setString(6,uuid.toString());
-                                pstmt4.setTimestamp(7,rs.getTimestamp("timeStamp"));
-                                pstmt4.executeUpdate();
-                                rs4 = pstmt4.getGeneratedKeys();
-                                rs4.next();
-                                pstmt5.setLong(1,cIssueId);
-                                pstmt5.setLong(2,rs4.getLong(1));
-                                pstmt5.executeUpdate();
-                                rs3.close();
-                                rs4.close();
-                                                               
-                            }
-                            
-                            note = rs.getString("familyHistory");
-                            if( note != null && !note.equals("") ) {
-                                System.out.println("Inserting other Meds for " + rs.getString("demographicNo"));
-                                pstmt2.setString(1,rs.getString("demographicNo"));
-                                pstmt2.setLong(2,issueIds[0]);
-                                rs3 = pstmt2.executeQuery();
-                                if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString("demographicNo"));
-                                        pstmt3.setLong(2,issueIds[0]);
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();                                          
-                                }
-                                else
-                                    cIssueId = rs3.getLong(1);
+				insert.clearParameters();
+				System.out.println("Imported note for " + rs.getString("demographicNo"));
+				cppInsert.setString(1, rs.getString("demographicNo"));
+				cppInsert.setString(2, rs.getString("providerNo"));
+				cppInsert.setString(3, rs.getString("socialHistory"));
+				cppInsert.setString(4, rs.getString("familyHistory"));
+				cppInsert.setString(5, rs.getString("medicalHistory"));
+				cppInsert.setString(6, rs.getString("ongoingConcerns"));
+				cppInsert.setString(7, rs.getString("reminders"));
+				cppInsert.setTimestamp(8, rs.getTimestamp("timeStamp"));
+				if (cppInsert.executeUpdate() != 1)
+					throw new SQLException(sql);
 
-                                uuid = UUID.randomUUID();
-                                pstmt4.setTimestamp(1,rs.getTimestamp("timeStamp"));
-                                pstmt4.setString(2,rs.getString("demographicNo"));
-                                pstmt4.setString(3,rs.getString("providerNo"));
-                                pstmt4.setString(4,note);
-                                pstmt4.setString(5,note);
-                                pstmt4.setString(6,uuid.toString());
-                                pstmt4.setTimestamp(7,rs.getTimestamp("timeStamp"));
-                                pstmt4.executeUpdate();
-                                rs4 = pstmt4.getGeneratedKeys();
-                                rs4.next();
-                                pstmt5.setLong(1,cIssueId);
-                                pstmt5.setLong(2,rs4.getLong(1));
-                                pstmt5.executeUpdate();
-                                rs3.close();
-                                rs4.close();
-                                                               
-                            }
-                            note = rs.getString("medicalHistory");
-                            if( note != null && !note.equals("") ) {
-                                System.out.println("Inserting Medical History for " + rs.getString("demographicNo"));
-                                pstmt2.setString(1,rs.getString("demographicNo"));
-                                pstmt2.setLong(2,issueIds[2]);
-                                rs3 = pstmt2.executeQuery();
-                                if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString("demographicNo"));
-                                        pstmt3.setLong(2,issueIds[2]);
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();                                          
-                                }
-                                else
-                                    cIssueId = rs3.getLong(1);
+				cppInsert.clearParameters();
+				System.out.println("Imported eChart cpp for " + rs.getString("demographicNo"));
+				System.out.println("Creating cpp issue note");
+				note = rs.getString("socialHistory");
+				if (note != null && !note.equals("")) {
+					System.out.println("Inserting social history for " + rs.getString("demographicNo"));
+					pstmt2.setString(1, rs.getString("demographicNo"));
+					pstmt2.setLong(2, issueIds[1]);
+					rs3 = pstmt2.executeQuery();
+					if (!rs3.next()) {
+						pstmt3.setString(1, rs.getString("demographicNo"));
+						pstmt3.setLong(2, issueIds[1]);
+						pstmt3.executeUpdate();
+						rs4 = pstmt3.getGeneratedKeys();
+						rs4.next();
+						cIssueId = rs4.getLong(1);
+						rs4.close();
+					} else
+						cIssueId = rs3.getLong(1);
 
-                                uuid = UUID.randomUUID();
-                                pstmt4.setTimestamp(1,rs.getTimestamp("timeStamp"));
-                                pstmt4.setString(2,rs.getString("demographicNo"));
-                                pstmt4.setString(3,rs.getString("providerNo"));
-                                pstmt4.setString(4,note);
-                                pstmt4.setString(5,note);
-                                pstmt4.setString(6,uuid.toString());
-                                pstmt4.setTimestamp(7,rs.getTimestamp("timeStamp"));
-                                pstmt4.executeUpdate();
-                                rs4 = pstmt4.getGeneratedKeys();
-                                rs4.next();
-                                pstmt5.setLong(1,cIssueId);
-                                pstmt5.setLong(2,rs4.getLong(1));
-                                pstmt5.executeUpdate();
-                                rs3.close();
-                                rs4.close();
-                                                               
-                            }
-                            note = rs.getString("ongoingConcerns");
-                            if( note != null && !note.equals("") ) {
-                                System.out.println("Inserting ongoing Concerns for " + rs.getString("demographicNo"));
-                                pstmt2.setString(1,rs.getString("demographicNo"));
-                                pstmt2.setLong(2,issueIds[3]);
-                                rs3 = pstmt2.executeQuery();
-                                if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString("demographicNo"));
-                                        pstmt3.setLong(2,issueIds[3]);
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();                                          
-                                }
-                                else
-                                    cIssueId = rs3.getLong(1);
+					uuid = UUID.randomUUID();
+					pstmt4.setTimestamp(1, rs.getTimestamp("timeStamp"));
+					pstmt4.setString(2, rs.getString("demographicNo"));
+					pstmt4.setString(3, rs.getString("providerNo"));
+					pstmt4.setString(4, note);
+					pstmt4.setString(5, note);
+					pstmt4.setString(6, uuid.toString());
+					pstmt4.setTimestamp(7, rs.getTimestamp("timeStamp"));
+					pstmt4.executeUpdate();
+					rs4 = pstmt4.getGeneratedKeys();
+					rs4.next();
+					pstmt5.setLong(1, cIssueId);
+					pstmt5.setLong(2, rs4.getLong(1));
+					pstmt5.executeUpdate();
+					rs3.close();
+					rs4.close();
+				}
+				note = rs.getString("familyHistory");
+				if (note != null && !note.equals("")) {
+					System.out.println("Inserting other Meds for " + rs.getString("demographicNo"));
+					pstmt2.setString(1, rs.getString("demographicNo"));
+					pstmt2.setLong(2, issueIds[0]);
+					rs3 = pstmt2.executeQuery();
+					if (!rs3.next()) {
+						pstmt3.setString(1, rs.getString("demographicNo"));
+						pstmt3.setLong(2, issueIds[0]);
+						pstmt3.executeUpdate();
+						rs4 = pstmt3.getGeneratedKeys();
+						rs4.next();
+						cIssueId = rs4.getLong(1);
+						rs4.close();
+					} else
+						cIssueId = rs3.getLong(1);
 
-                                uuid = UUID.randomUUID();
-                                pstmt4.setTimestamp(1,rs.getTimestamp("timeStamp"));
-                                pstmt4.setString(2,rs.getString("demographicNo"));
-                                pstmt4.setString(3,rs.getString("providerNo"));
-                                pstmt4.setString(4,note);
-                                pstmt4.setString(5,note);
-                                pstmt4.setString(6,uuid.toString());
-                                pstmt4.setTimestamp(7,rs.getTimestamp("timeStamp"));
-                                pstmt4.executeUpdate();
-                                rs4 = pstmt4.getGeneratedKeys();
-                                rs4.next();
-                                pstmt5.setLong(1,cIssueId);
-                                pstmt5.setLong(2,rs4.getLong(1));
-                                pstmt5.executeUpdate();
-                                rs3.close();
-                                rs4.close();
-                                                               
-                            }
-                            note = rs.getString("reminders");
-                            if( note != null && !note.equals("") ) {
-                                System.out.println("Inserting Reminders for " + rs.getString("demographicNo"));
-                                pstmt2.setString(1,rs.getString("demographicNo"));
-                                pstmt2.setLong(2,issueIds[4]);
-                                rs3 = pstmt2.executeQuery();
-                                if( !rs3.next() ) {
-                                        pstmt3.setString(1,rs.getString("demographicNo"));
-                                        pstmt3.setLong(2,issueIds[4]);
-                                        pstmt3.executeUpdate();
-                                        rs4 = pstmt3.getGeneratedKeys();
-                                        rs4.next();
-                                        cIssueId = rs4.getLong(1);
-                                        rs4.close();                                          
-                                }
-                                else
-                                    cIssueId = rs3.getLong(1);
+					uuid = UUID.randomUUID();
+					pstmt4.setTimestamp(1, rs.getTimestamp("timeStamp"));
+					pstmt4.setString(2, rs.getString("demographicNo"));
+					pstmt4.setString(3, rs.getString("providerNo"));
+					pstmt4.setString(4, note);
+					pstmt4.setString(5, note);
+					pstmt4.setString(6, uuid.toString());
+					pstmt4.setTimestamp(7, rs.getTimestamp("timeStamp"));
+					pstmt4.executeUpdate();
+					rs4 = pstmt4.getGeneratedKeys();
+					rs4.next();
+					pstmt5.setLong(1, cIssueId);
+					pstmt5.setLong(2, rs4.getLong(1));
+					pstmt5.executeUpdate();
+					rs3.close();
+					rs4.close();
+				}
+				note = rs.getString("medicalHistory");
+				if (note != null && !note.equals("")) {
+					System.out.println("Inserting Medical History for " + rs.getString("demographicNo"));
+					pstmt2.setString(1, rs.getString("demographicNo"));
+					pstmt2.setLong(2, issueIds[2]);
+					rs3 = pstmt2.executeQuery();
+					if (!rs3.next()) {
+						pstmt3.setString(1, rs.getString("demographicNo"));
+						pstmt3.setLong(2, issueIds[2]);
+						pstmt3.executeUpdate();
+						rs4 = pstmt3.getGeneratedKeys();
+						rs4.next();
+						cIssueId = rs4.getLong(1);
+						rs4.close();
+					} else
+						cIssueId = rs3.getLong(1);
 
-                                uuid = UUID.randomUUID();
-                                pstmt4.setTimestamp(1,rs.getTimestamp("timeStamp"));
-                                pstmt4.setString(2,rs.getString("demographicNo"));
-                                pstmt4.setString(3,rs.getString("providerNo"));
-                                pstmt4.setString(4,note);
-                                pstmt4.setString(5,note);
-                                pstmt4.setString(6,uuid.toString());
-                                pstmt4.setTimestamp(7,rs.getTimestamp("timeStamp"));
-                                pstmt4.executeUpdate();
-                                rs4 = pstmt4.getGeneratedKeys();
-                                rs4.next();
-                                pstmt5.setLong(1,cIssueId);
-                                pstmt5.setLong(2,rs4.getLong(1));
-                                pstmt5.executeUpdate();
-                                rs3.close();
-                                rs4.close();
-                                                               
-                            }
-                            
-                        }
-                        
-                        rs.close();
-                        cppInsert.close();
-                        System.out.println("Finished current notes.");
-                        System.out.println("Importing split charts");
-                        
-                        sql = "select * from eChart e where e.subject = 'SPLIT CHART'";
-                        pcheck = con.prepareStatement("select note_id from casemgmt_note where update_date = ? and demographic_no = ? and provider_no = ? and signing_provider_no = '000000' and note like 'SPLIT CHART%'");
-                        rs = stmt.executeQuery(sql);
-                        while( rs.next() ) {
-                            d = new Date(rs.getTimestamp("timeStamp").getTime());
-                            pcheck.setDate(1,d);
-                            pcheck.setString(2, rs.getString("demographicNo"));
-                            pcheck.setString(3, rs.getString("providerNo"));
-                            rs1 = pcheck.executeQuery();
-                            if( rs1.next() ) {
-                                System.out.println(rs.getString("demographicNo") + " already present -- skipping split chart");
-                                continue;
-                            }
+					uuid = UUID.randomUUID();
+					pstmt4.setTimestamp(1, rs.getTimestamp("timeStamp"));
+					pstmt4.setString(2, rs.getString("demographicNo"));
+					pstmt4.setString(3, rs.getString("providerNo"));
+					pstmt4.setString(4, note);
+					pstmt4.setString(5, note);
+					pstmt4.setString(6, uuid.toString());
+					pstmt4.setTimestamp(7, rs.getTimestamp("timeStamp"));
+					pstmt4.executeUpdate();
+					rs4 = pstmt4.getGeneratedKeys();
+					rs4.next();
+					pstmt5.setLong(1, cIssueId);
+					pstmt5.setLong(2, rs4.getLong(1));
+					pstmt5.executeUpdate();
+					rs3.close();
+					rs4.close();
+				}
+				note = rs.getString("ongoingConcerns");
+				if (note != null && !note.equals("")) {
+					System.out.println("Inserting ongoing Concerns for " + rs.getString("demographicNo"));
+					pstmt2.setString(1, rs.getString("demographicNo"));
+					pstmt2.setLong(2, issueIds[3]);
+					rs3 = pstmt2.executeQuery();
+					if (!rs3.next()) {
+						pstmt3.setString(1, rs.getString("demographicNo"));
+						pstmt3.setLong(2, issueIds[3]);
+						pstmt3.executeUpdate();
+						rs4 = pstmt3.getGeneratedKeys();
+						rs4.next();
+						cIssueId = rs4.getLong(1);
+						rs4.close();
+					} else
+						cIssueId = rs3.getLong(1);
 
-                            uuid = UUID.randomUUID();                                                        
-                            
-                            insert.setTimestamp(1, rs.getTimestamp("timeStamp"));
-                            insert.setString(2, rs.getString("demographicNo"));
-                            insert.setString(3, rs.getString("providerNo"));
-                            note = formatNote(new StringBuffer(rs.getString("encounter")));
-                            note = "SPLIT CHART...\n" + note;
-                            insert.setString(4, note);
-                            insert.setString(5, note);
-                            insert.setString(6, uuid.toString());
-                            insert.setTimestamp(7, rs.getTimestamp("timeStamp"));
-                            
-                            if( insert.executeUpdate() != 1 )
-                                    throw new SQLException(sql);
-                            
-                            System.out.println("Imported split chart for " + rs.getString("demographicNo"));
-                        }
-                        
-                        insert.clearParameters();
-                        System.out.println("It's been fun but we're all done!");
-			
+					uuid = UUID.randomUUID();
+					pstmt4.setTimestamp(1, rs.getTimestamp("timeStamp"));
+					pstmt4.setString(2, rs.getString("demographicNo"));
+					pstmt4.setString(3, rs.getString("providerNo"));
+					pstmt4.setString(4, note);
+					pstmt4.setString(5, note);
+					pstmt4.setString(6, uuid.toString());
+					pstmt4.setTimestamp(7, rs.getTimestamp("timeStamp"));
+					pstmt4.executeUpdate();
+					rs4 = pstmt4.getGeneratedKeys();
+					rs4.next();
+					pstmt5.setLong(1, cIssueId);
+					pstmt5.setLong(2, rs4.getLong(1));
+					pstmt5.executeUpdate();
+					rs3.close();
+					rs4.close();
+				}
+				note = rs.getString("reminders");
+				if (note != null && !note.equals("")) {
+					System.out.println("Inserting Reminders for " + rs.getString("demographicNo"));
+					pstmt2.setString(1, rs.getString("demographicNo"));
+					pstmt2.setLong(2, issueIds[4]);
+					rs3 = pstmt2.executeQuery();
+					if (!rs3.next()) {
+						pstmt3.setString(1, rs.getString("demographicNo"));
+						pstmt3.setLong(2, issueIds[4]);
+						pstmt3.executeUpdate();
+						rs4 = pstmt3.getGeneratedKeys();
+						rs4.next();
+						cIssueId = rs4.getLong(1);
+						rs4.close();
+					} else
+						cIssueId = rs3.getLong(1);
+
+					uuid = UUID.randomUUID();
+					pstmt4.setTimestamp(1, rs.getTimestamp("timeStamp"));
+					pstmt4.setString(2, rs.getString("demographicNo"));
+					pstmt4.setString(3, rs.getString("providerNo"));
+					pstmt4.setString(4, note);
+					pstmt4.setString(5, note);
+					pstmt4.setString(6, uuid.toString());
+					pstmt4.setTimestamp(7, rs.getTimestamp("timeStamp"));
+					pstmt4.executeUpdate();
+					rs4 = pstmt4.getGeneratedKeys();
+					rs4.next();
+					pstmt5.setLong(1, cIssueId);
+					pstmt5.setLong(2, rs4.getLong(1));
+					pstmt5.executeUpdate();
+					rs3.close();
+					rs4.close();
+				}
+			} 
+			rs.close();
+			cppInsert.close();
+			System.out.println("Finished current notes.");
+			System.out.println("Importing split charts");
+			sql = "select * from eChart e where e.subject = 'SPLIT CHART'";
+			pcheck = con.prepareStatement("select note_id from casemgmt_note where update_date = ? and demographic_no = ? and provider_no = ? and signing_provider_no = '000000' and note like 'SPLIT CHART%'");
+			rs = stmt.executeQuery(sql);
+			while (rs.next()) {
+				d = new Date(rs.getTimestamp("timeStamp").getTime());
+				pcheck.setDate(1, d);
+				pcheck.setString(2, rs.getString("demographicNo"));
+				pcheck.setString(3, rs.getString("providerNo"));
+				rs1 = pcheck.executeQuery();
+				if (rs1.next()) {
+					System.out.println(rs.getString("demographicNo") + " already present -- skipping split chart");
+					continue;
+				}
+				uuid = UUID.randomUUID();
+				insert.setTimestamp(1, rs.getTimestamp("timeStamp"));
+				insert.setString(2, rs.getString("demographicNo"));
+				insert.setString(3, rs.getString("providerNo"));
+				note = formatNote(new StringBuffer(rs.getString("encounter")));
+				note = "SPLIT CHART...\n" + note;
+				insert.setString(4, note);
+				insert.setString(5, note);
+				insert.setString(6, uuid.toString());
+				insert.setTimestamp(7, rs.getTimestamp("timeStamp"));
+				if (insert.executeUpdate() != 1)
+					throw new SQLException(sql);
+
+				System.out.println("Imported split chart for " + rs.getString("demographicNo"));
+			} 
+			insert.clearParameters();
+			System.out.println("It's been fun but we're all done!");
 			con.close();
-                         
-		}
-                catch( FileNotFoundException e ) {
-                    System.out.println("Could not open properties file:\n" + e.getMessage());
-                }
-                catch( IOException e ) {
-                    System.out.println("Error reading properties file\n" + e.getMessage());
-                }                
-		catch( Exception e ) {
+		} catch (FileNotFoundException e) {
+			System.out.println("Could not open properties file:\n" + e.getMessage());
+		} catch (IOException e) {
+			System.out.println("Error reading properties file\n" + e.getMessage());
+		} catch (Exception e) {
 			System.out.println("DB ERROR: " + e.getMessage());
 			e.printStackTrace();
 		}
diff --git a/src/main/java/com/indivica/olis/Driver.java b/src/main/java/com/indivica/olis/Driver.java
index 6186634fb7..ebf6376be4 100644
--- a/src/main/java/com/indivica/olis/Driver.java
+++ b/src/main/java/com/indivica/olis/Driver.java
@@ -288,54 +288,37 @@ public class Driver {
 		KeyStore keystore = null;
 		String pwd = OscarProperties.getInstance().getProperty("olis_ssl_keystore_password","changeit");
 		String result = null;
-		try {
+		try (FileInputStream is = new FileInputStream(OscarProperties.getInstance().getProperty("olis_returned_cert"))) {
 			Security.addProvider(new BouncyCastleProvider());
-
 			keystore = KeyStore.getInstance("JKS");
 			// Load the keystore
 			keystore.load(new FileInputStream(OscarProperties.getInstance().getProperty("olis_keystore")), pwd.toCharArray());
-
-			//Enumeration e = keystore.aliases();
+			// Enumeration e = keystore.aliases();
 			String name = "olis";
 			Enumeration e = keystore.aliases();
-			while(e.hasMoreElements()) {
-				name = (String)e.nextElement();
-				
-			}
-
+			while (e.hasMoreElements()) {
+				name = ((String) (e.nextElement()));
+			} 
 			// Get the private key and the certificate
-			priv = (PrivateKey) keystore.getKey(name, pwd.toCharArray());
-
-			FileInputStream is = new FileInputStream(OscarProperties.getInstance().getProperty("olis_returned_cert"));
+			priv = ((PrivateKey) (keystore.getKey(name, pwd.toCharArray())));
 			CertificateFactory cf = CertificateFactory.getInstance("X.509");
-			cert = (X509Certificate) cf.generateCertificate(is);
-
+			cert = ((X509Certificate) (cf.generateCertificate(is)));
 			// I'm not sure if this is necessary
-
 			ArrayList<Certificate> certList = new ArrayList<Certificate>();
 			certList.add(cert);
-
 			Store certs = new JcaCertStore(certList);
-			
 			// Encrypt data
 			CMSSignedDataGenerator sgen = new CMSSignedDataGenerator();
-
 			// What digest algorithm i must use? SHA1? MD5? RSA?...
-			ContentSigner sha1Signer = new JcaContentSignerBuilder("SHA256withRSA").setProvider("BC").build(priv);			
-			sgen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider("BC").build())
-	                     .build(sha1Signer, cert));
-			
+			ContentSigner sha1Signer = new JcaContentSignerBuilder("SHA256withRSA").setProvider("BC").build(priv);
+			sgen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider("BC").build()).build(sha1Signer, cert));
 			// I'm not sure this is necessary
 			sgen.addCertificates(certs);
-			
 			// I think that the 2nd parameter need to be false (detached form)
 			CMSSignedData csd = sgen.generate(new CMSProcessableByteArray(data.getBytes()), true);
-			
 			byte[] signedData = csd.getEncoded();
 			byte[] signedDataB64 = Base64.encode(signedData);
-
 			result = new String(signedDataB64);
-
 		} catch (Exception e) {
 			MiscUtils.getLogger().error("Can't sign HL7 message for OLIS", e);
 		}
@@ -438,9 +421,8 @@ public class Driver {
 	}
 
 	static void writeToFile(String data) {
-		try {
-			File tempFile = new File(System.getProperty("java.io.tmpdir") + (Math.random() * 100) + ".xml");
-			PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
+		try (PrintWriter pw = new PrintWriter(new FileWriter(tempFile))) {
+			File tempFile = new File(System.getProperty("java.io.tmpdir") + Math.random() * 100 + ".xml");
 			pw.println(data);
 			pw.flush();
 			pw.close();
diff --git a/src/main/java/com/quatro/util/Utility.java b/src/main/java/com/quatro/util/Utility.java
index 28874bab01..e39e48352b 100644
--- a/src/main/java/com/quatro/util/Utility.java
+++ b/src/main/java/com/quatro/util/Utility.java
@@ -384,40 +384,37 @@ public class Utility {
 		ArrayList list = new ArrayList();
 		String fileDir=pathLoc + "/" + dir + "/"+ filename;
 		try {
+            try (BufferedReader in = new BufferedReader(new FileReader(fileDir))) {
+                String str;
+                if (fileDir.indexOf("/in/") > -1) {
+                    while ((str = in.readLine()) != null) {
+                        fDev = new FieldDefinition();
+                        fDev.setFieldName(str.substring(0, 30).trim());
+                        fDev.setFieldLength(new Integer(str.substring(30, 35).trim()));
+                        fDev.setFieldType(str.substring(35, 36));
+                        fDev.setFieldStartIndex(new Integer(str.substring(36, 41).trim()));
+                        if (str.length() > 41)
+                            fDev.setDateFormatStr(str.substring(41, 53).trim());
 
-			BufferedReader in = null;                    
-			try {
-				in = new BufferedReader(new FileReader(fileDir));
-				String str;
-				if(fileDir.indexOf("/in/")>-1){
-					while ((str = in.readLine()) != null) {
-						fDev = new FieldDefinition();
-						fDev.setFieldName(str.substring(0, 30).trim());
-						fDev.setFieldLength(new Integer(str.substring(30, 35).trim()));
-						fDev.setFieldType(str.substring(35, 36));
-						fDev.setFieldStartIndex(new Integer(str.substring(36, 41).trim()));
-						if(str.length()>41)fDev.setDateFormatStr(str.substring(41,53).trim());
-						list.add(fDev);
-					}
-				}else{
-					while ((str = in.readLine()) != null) {
-						fDev = new FieldDefinition();
-						fDev.setFieldName(str.substring(0, 30).trim());
-						fDev.setFieldLength(new Integer(str.substring(30, 35).trim()));
-						fDev.setFieldType(str.substring(35, 36));
-						if(str.length()>36)fDev.setDateFormatStr(str.substring(36,48).trim());
-						list.add(fDev);
-					}
-				}
-				in.close();
+                        list.add(fDev);
+                    } 
+                } else {
+                    while ((str = in.readLine()) != null) {
+                        fDev = new FieldDefinition();
+                        fDev.setFieldName(str.substring(0, 30).trim());
+                        fDev.setFieldLength(new Integer(str.substring(30, 35).trim()));
+                        fDev.setFieldType(str.substring(35, 36));
+                        if (str.length() > 36)
+                            fDev.setDateFormatStr(str.substring(36, 48).trim());
 
-			} catch (Exception e) {
-				MiscUtils.getLogger().error("Uh oh, got an IOException error!", e);
-			} 
-			finally {
-				if (in != null)
-					in.close();
-			}
+                        list.add(fDev);
+                    } 
+                }
+                in.close();
+            } catch (Exception e) {
+                MiscUtils.getLogger().error("Uh oh, got an IOException error!", e);
+            } finally {
+            }
 
 		} catch (Exception e) {
 			MiscUtils.getLogger().error("Error", e);
diff --git a/src/main/java/org/oscarehr/PMmodule/caisi_integrator/CaisiIntegratorUpdateTask.java b/src/main/java/org/oscarehr/PMmodule/caisi_integrator/CaisiIntegratorUpdateTask.java
index e76c3f74f7..c1cf435760 100644
--- a/src/main/java/org/oscarehr/PMmodule/caisi_integrator/CaisiIntegratorUpdateTask.java
+++ b/src/main/java/org/oscarehr/PMmodule/caisi_integrator/CaisiIntegratorUpdateTask.java
@@ -2209,31 +2209,26 @@ public class CaisiIntegratorUpdateTask extends TimerTask {
 	}
 	
 	protected void createTarFile(String parentDir, String parentFile, String[] files) {
-		 FileOutputStream fOut = null;
 		 BufferedOutputStream bOut = null;
 		 GzipCompressorOutputStream gzOut = null;
 		 TarArchiveOutputStream tOut = null;
-		 
-		 try {
-			 fOut = new FileOutputStream(new File(parentDir + File.separator + parentFile + ".tar"));
-		     bOut = new BufferedOutputStream(fOut);
-		     gzOut = new GzipCompressorOutputStream(bOut);
-		     tOut = new TarArchiveOutputStream(gzOut);
-		     
-			 for(int x=0;x<files.length;x++) {
-				 File f = new File(parentDir + File.separator + files[x]);
-				 TarArchiveEntry original = new TarArchiveEntry( f);
-				 tOut.putArchiveEntry(original);
-				 IOUtils.copy(new FileInputStream(f), tOut);
-				 tOut.closeArchiveEntry();
-			 }
-			 
-			 tOut.finish();
-		 }catch(Exception e) {
-			 logger.error("Error",e);
-		 } finally {
-			 IOUtils.closeQuietly(tOut);
-		 }
+		try (FileOutputStream fOut = new FileOutputStream(new File(parentDir + File.separator + parentFile + ".tar"))) {
+			bOut = new BufferedOutputStream(fOut);
+			gzOut = new GzipCompressorOutputStream(bOut);
+			tOut = new TarArchiveOutputStream(gzOut);
+			for (int x = 0; x < files.length; x++) {
+				File f = new File(parentDir + File.separator + files[x]);
+				TarArchiveEntry original = new TarArchiveEntry(f);
+				tOut.putArchiveEntry(original);
+				IOUtils.copy(new FileInputStream(f), tOut);
+				tOut.closeArchiveEntry();
+			}
+			tOut.finish();
+		} catch (Exception e) {
+			logger.error("Error", e);
+		} finally {
+			IOUtils.closeQuietly(tOut);
+		}
 	}
 		
 	protected void createZipFile(final String parentDir, final String parentFile, String[] files) {
@@ -2288,50 +2283,13 @@ public class CaisiIntegratorUpdateTask extends TimerTask {
 	
 	private void addZipFile(final String source, final ZipOutputStream destination, final String filename) throws IOException {
 
-		byte data[] = new byte[1024];
+		byte data = new byte[1024];
 		//out.putNextEntry(new ZipEntry(files[x].getName()));
-		FileInputStream fi = new FileInputStream(source);
-		BufferedInputStream origin = new BufferedInputStream(fi, 1024);
-        
-		ZipEntry entry = new ZipEntry(filename);
-		destination.putNextEntry(entry);
-        int count;
-        while((count = origin.read(data, 0, 1024)) != -1) {
-        	destination.write(data, 0, count);
-        }
-        origin.close(); 
+		FileInputStream fi = new FileInputStream(source); 
 	}
 		
 	private static String getFileChecksum(MessageDigest digest, File file) throws IOException
 	{
-	    //Get file input stream for reading the file content
-	    FileInputStream fis = new FileInputStream(file);
-	     
-	    //Create byte array to read data in chunks
-	    byte[] byteArray = new byte[1024];
-	    int bytesCount = 0; 
-	      
-	    //Read file data and update in message digest
-	    while ((bytesCount = fis.read(byteArray)) != -1) {
-	        digest.update(byteArray, 0, bytesCount);
-	    }
-	     
-	    //close the stream; We don't need it now.
-	    fis.close();
-	     
-	    //Get the hash's bytes
-	    byte[] bytes = digest.digest();
-	     
-	    //This bytes[] has bytes in decimal format;
-	    //Convert it to hexadecimal format
-	    StringBuilder sb = new StringBuilder();
-	    for(int i=0; i< bytes.length ;i++)
-	    {
-	        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
-	    }
-	     
-	    //return complete hash
-	   return sb.toString();
 	}
 
 	/**
diff --git a/src/main/java/org/oscarehr/PMmodule/exporter/DATISExporterServlet.java b/src/main/java/org/oscarehr/PMmodule/exporter/DATISExporterServlet.java
index 7a7e628e32..f055703030 100644
--- a/src/main/java/org/oscarehr/PMmodule/exporter/DATISExporterServlet.java
+++ b/src/main/java/org/oscarehr/PMmodule/exporter/DATISExporterServlet.java
@@ -149,27 +149,6 @@ public class DATISExporterServlet extends HttpServlet {
 		byte[] buf = new byte[1024];
 
 		String outFilename = dirLocation + File.separatorChar + OUTFILE_ZIP;
-		ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outFilename));
-		for (int i = 0; i < filenames.length; i++) {
-			if(StringUtils.isBlank(filenames[i])) {
-				continue;
-			}
-
-			FileInputStream in = new FileInputStream(filenames[i]);
-			out.putNextEntry(new ZipEntry(filenames[i].substring(1 + filenames[i].lastIndexOf(File.separatorChar))));
-
-			int len;
-			while ((len = in.read(buf)) > 0) {
-				out.write(buf, 0, len);
-			}
-
-			out.closeEntry();
-			in.close();
-		}
-
-		out.close();
-
-		return new FileInputStream(outFilename);
 	}
 
 	private void exportCSVFile(AbstractIntakeExporter exporter, String filename, String dirLocation, int facilityId, String[] filenames, int fileIndex) throws Exception {
diff --git a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceAction.java b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceAction.java
index 58b9107901..c75ab6dc83 100644
--- a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceAction.java
+++ b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceAction.java
@@ -59,31 +59,24 @@ public class GenerateTraceAction extends DispatchAction {
 			return null;
 		}
 		PipedInputStream pipedInputStream = null;
-		PipedOutputStream pipedOutputStream = null;
 		ExecutorService executor = null;
 		Future<String> futureTRP = null;
 		Future<String> futureTRC = null;
-		try {
+		try (PipedOutputStream pipedOutputStream = new PipedOutputStream(pipedInputStream)) {
 			pipedInputStream = new PipedInputStream(BUFFER_SIZE);
-			pipedOutputStream = new PipedOutputStream(pipedInputStream);
-			
 			executor = Executors.newFixedThreadPool(2);
-	        TraceDataProcessor traceDataProcessor = new TraceDataProcessor(pipedOutputStream, request);
+			TraceDataProcessor traceDataProcessor = new TraceDataProcessor(pipedOutputStream, request);
 			TraceDataConsumer traceDataConsumer = new TraceDataConsumer(pipedInputStream, response);
-			
 			futureTRP = executor.submit(traceDataProcessor);
 			futureTRC = executor.submit(traceDataConsumer);
-
-            MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRP.get());
-            MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRC.get());
-            LogAction.addLog(userName, LogConst.ADD, "traceability downloaded", "trace_" + InetAddress.getLocalHost().getHostName().replace(' ', '_') + ".bin");
+			MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRP.get());
+			MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRC.get());
+			LogAction.addLog(userName, LogConst.ADD, "traceability downloaded", "trace_" + InetAddress.getLocalHost().getHostName().replace(' ', '_') + ".bin");
 			executor.shutdown();
 		} catch (Exception e) {
 			MiscUtils.getLogger().error("Not able to create", e);
-		}
-		finally {
+		} finally {
 			pipedInputStream.close();
-			pipedOutputStream.close();
 		}
 		return null;
 	}
diff --git a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityReportAction.java b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityReportAction.java
index 020827334e..ee0b7de1a7 100644
--- a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityReportAction.java
+++ b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityReportAction.java
@@ -59,32 +59,24 @@ public class GenerateTraceabilityReportAction extends Action{
 			return null;
 		}
 		PipedInputStream pipedInputStream = null;
-		PipedOutputStream pipedOutputStream = null;
 		ExecutorService executor = null;
 		Future<String> futureTRP = null;
 		Future<String> futureTRC = null;
-		try {
+		try (PipedOutputStream pipedOutputStream = new PipedOutputStream(pipedInputStream)) {
 			pipedInputStream = new PipedInputStream(GenerateTraceAction.BUFFER_SIZE);
-			pipedOutputStream = new PipedOutputStream(pipedInputStream);
-
-	        executor = Executors.newFixedThreadPool(2);
-	        TraceabilityReportProcessor traceabilityReportProcessor = new TraceabilityReportProcessor(pipedOutputStream, request);
+			executor = Executors.newFixedThreadPool(2);
+			TraceabilityReportProcessor traceabilityReportProcessor = new TraceabilityReportProcessor(pipedOutputStream, request);
 			TraceabilityReportConsumer traceabilityReportConsumer = new TraceabilityReportConsumer(pipedInputStream, response);
-			
 			futureTRP = executor.submit(traceabilityReportProcessor);
 			futureTRC = executor.submit(traceabilityReportConsumer);
-
-            MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRP.get());
-            MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRC.get());
+			MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRP.get());
+			MiscUtils.getLogger().debug(new java.util.Date() + " " + futureTRC.get());
 			LogAction.addLog(userName, LogConst.ADD, "traceability report downloaded", "trace_report.txt");
 			executor.shutdown();
-
 		} catch (Exception e) {
 			MiscUtils.getLogger().error("Not able to create file", e);
-		}
-		finally {
+		} finally {
 			pipedInputStream.close();
-			pipedOutputStream.close();
 		}
 		return null;
 	}
diff --git a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityUtil.java b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityUtil.java
index 02c29bf466..0456c8ea28 100644
--- a/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityUtil.java
+++ b/src/main/java/org/oscarehr/admin/traceability/GenerateTraceabilityUtil.java
@@ -71,16 +71,6 @@ public class GenerateTraceabilityUtil {
 	public static void download (HttpServletResponse response, String fileName, String contentType) throws Exception {
 		response.setContentType(contentType);
 		response.setHeader("Content-Disposition", "attachment;filename=" + fileName);
-		FileInputStream in = new FileInputStream(fileName);
-		ServletOutputStream out = response.getOutputStream();
-		long buf_size = new File(fileName).length();
-		byte[] outputByte = new byte[(int) buf_size];
-		while (in.read(outputByte) != -1) {
-			out.write(outputByte, 0, (int)buf_size);
-		}
-		in.close();
-		out.flush();
-		out.close();
 	}
 	
 	@SuppressWarnings("unchecked")
diff --git a/src/main/java/org/oscarehr/admin/traceability/TraceabilityReportProcessor.java b/src/main/java/org/oscarehr/admin/traceability/TraceabilityReportProcessor.java
index 1daaf84a93..1f8f388898 100644
--- a/src/main/java/org/oscarehr/admin/traceability/TraceabilityReportProcessor.java
+++ b/src/main/java/org/oscarehr/admin/traceability/TraceabilityReportProcessor.java
@@ -76,105 +76,6 @@ public class TraceabilityReportProcessor implements Callable<String> {
 		PrintWriter pw = new PrintWriter(outputStream);
 		List<FileItem> items = upload.parseRequest(request);
 		for (FileItem diskFileItem : items) {
-			GZIPInputStream gzip = new GZIPInputStream(diskFileItem.getInputStream()); 
-			ObjectInputStream ios = new ObjectInputStream(gzip);
-			@SuppressWarnings("unchecked")
-			Map<String, String> sourceMap = (Map<String, String>) ios.readObject();
-			originDate = sourceMap.get("origin_date");
-			originDate = (originDate == null) ? "n/a" : originDate;
-			sourceMap.remove("origin_date");
-			gitSHA = sourceMap.get("git_sha");
-			gitSHA = (gitSHA == null) ? "n/a" : gitSHA;
-			sourceMap.remove("origin_date");
-			sourceMap.remove("git_sha");
-			// build local 'trace' 
-			Map<String, String> targetMap = GenerateTraceabilityUtil.buildTraceMap(request);
-			// find the difference between incoming and local 'trace'
-			MapDifference<String, String> diff = Maps.difference(sourceMap, targetMap);
-			// modified, for the same keys
-			Map<String, MapDifference.ValueDifference<String>> differing = diff.entriesDiffering();
-
-			pw.write("---------------------------------------------------------------------------------------");
-			pw.write(newLine);
-			pw.write("----------------------------TRACEABILITY REPORT----------------------------------------");
-			pw.write(newLine);
-			pw.write("---------------------------------------------------------------------------------------");
-			pw.write(newLine);
-			pw.write(newLine);
-			pw.write("Started: " + new java.util.Date());
-			pw.write(newLine);
-			pw.write(newLine);
-			pw.write("Trace Generated On Date: " + originDate);
-			pw.write(newLine);
-			pw.write("Clinic Name: " + clinicName);
-			pw.write(newLine);
-			pw.write("Git SHA: " + gitSHA);
-			pw.write(newLine);
-			pw.write(newLine);
-			pw.write("Changed:");
-			pw.write(newLine);
-			pw.write("-----------------------------------------");
-			pw.write(newLine);
-			pw.write(newLine);
-			for (Map.Entry<String, MapDifference.ValueDifference<String>> entry : differing.entrySet()) {
-				String key = entry.getKey();
-				pw.write(key);
-				pw.write(newLine);
-				pw.write(newLine);
-			}
-			//to check equality
-			//boolean mapsEqual = diff.areEqual();
-
-			pw.write(newLine);
-			pw.write("Removed:");
-			pw.write(newLine);
-			pw.write("-----------------------------------------");
-			pw.write(newLine);
-			pw.write(newLine);
-			Map<String, String> left_ = diff.entriesOnlyOnLeft();
-			for (Map.Entry<String, String> entry : left_.entrySet()) {
-				String key = entry.getKey();
-				pw.write(key);
-				pw.write(newLine);
-			}
-
-			pw.write(newLine);
-			pw.write("Added:");
-			pw.write(newLine);
-			pw.write("-----------------------------------------");
-			pw.write(newLine);
-			pw.write(newLine);
-			Map<String, String> right_ = diff.entriesOnlyOnRight();
-			for (Map.Entry<String, String> entry : right_.entrySet()) {
-				String key = entry.getKey();
-				pw.write(key);
-				pw.write(newLine);
-			}
-
-			pw.write(newLine);
-			pw.write("Unchanged:");
-			pw.write(newLine);
-			pw.write("-----------------------------------------");
-			pw.write(newLine);
-			pw.write(newLine);
-			Map<String, String> common = diff.entriesInCommon();
-			for (Map.Entry<String, String> entry : common.entrySet()) {
-				String key = entry.getKey();
-				pw.write(key);
-				pw.write(newLine);
-			}
-
-			pw.write("Finished: " + new java.util.Date());
-			pw.write(newLine);
-			pw.write("---------------------------------------------------------------------------------------");
-			pw.write(newLine);
-			pw.write("--------------------------------END OF REPORT------------------------------------------");
-			pw.write(newLine);
-			pw.write("---------------------------------------------------------------------------------------");
-			pw.write(newLine);
-			pw.flush();
-			pw.close();
-			break;
 		}
 		return getClass().getName();
 	}
diff --git a/src/main/java/org/oscarehr/casemgmt/service/CaseManagementPrint.java b/src/main/java/org/oscarehr/casemgmt/service/CaseManagementPrint.java
index 48b32d8227..be4652fad5 100644
--- a/src/main/java/org/oscarehr/casemgmt/service/CaseManagementPrint.java
+++ b/src/main/java/org/oscarehr/casemgmt/service/CaseManagementPrint.java
@@ -236,7 +236,6 @@ public class CaseManagementPrint {
                 File file=null;
                 FileOutputStream out=null;
                 File file2=null;
-                FileOutputStream os2=null;
                 
                 FileOutputStream fos = null;
                 List<Object> pdfDocs = new ArrayList<Object>();
@@ -298,25 +297,6 @@ public class CaseManagementPrint {
 				MessageHandler handler = Factory.getHandler(segmentId);
 				String fileName2 = OscarProperties.getInstance().getProperty("DOCUMENT_DIR") + "//" + handler.getPatientName().replaceAll("\\s", "_") + "_" + handler.getMsgDate() + "_LabReport.pdf";
                                 file2= new File(fileName2);
-				os2 = new FileOutputStream(file2);
-				if (handler instanceof OLISHL7Handler) {
-					OLISLabPDFCreator olisLabPdfCreator = new OLISLabPDFCreator(os2, request, segmentId);
-					olisLabPdfCreator.printPdf();
-					os2.close();
-					pdfDocs.add(fileName2);
-				}
-				else {
-					LabPDFCreator pdfCreator = new LabPDFCreator(os2, segmentId, loggedInInfo.getLoggedInProviderNo());
-					pdfCreator.printPdf();
-					os2.close();
-					String fileName3 = OscarProperties.getInstance().getProperty("DOCUMENT_DIR") + "//" + handler.getPatientName().replaceAll("\\s", "_") + "_" + handler.getMsgDate() + "_LabReport.1.pdf";
-					File file3= new File(fileName3);
-					
-					fos = new FileOutputStream(file3);
-					pdfCreator.addEmbeddedDocuments(file2,fos);
-					
-					pdfDocs.add(fileName3);
-				}
 
 			}
 
diff --git a/src/main/java/org/oscarehr/casemgmt/web/BaseCaseManagementViewAction.java b/src/main/java/org/oscarehr/casemgmt/web/BaseCaseManagementViewAction.java
index 5f38416ebd..39c667b848 100644
--- a/src/main/java/org/oscarehr/casemgmt/web/BaseCaseManagementViewAction.java
+++ b/src/main/java/org/oscarehr/casemgmt/web/BaseCaseManagementViewAction.java
@@ -22,6 +22,7 @@
  */
 
 package org.oscarehr.casemgmt.web;
+import java.io.FileOutputStream;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -127,13 +128,12 @@ public class BaseCaseManagementViewAction extends DispatchAction {
 			String path=request.getSession().getServletContext().getRealPath("/");
 			int encodedValue = (int)(Math.random()*Integer.MAX_VALUE);
 			String filename = "client" +encodedValue+"."+ img.getImage_type();
-			try {
-				java.io.FileOutputStream os= new java.io.FileOutputStream(path+"/images/"+filename);
+			try (FileOutputStream os = new FileOutputStream(path + "/images/" + filename)) {
 				os.write(img.getImage_data());
 				os.flush();
 				os.close();
 				return filename;
-			}catch(Exception e) {
+			} catch (Exception e) {
 				log.warn("Warning", e);
 			}
 		}
diff --git a/src/main/java/org/oscarehr/common/dao/OscarAppointmentDao.java b/src/main/java/org/oscarehr/common/dao/OscarAppointmentDao.java
index e190431600..fe7badd6aa 100644
--- a/src/main/java/org/oscarehr/common/dao/OscarAppointmentDao.java
+++ b/src/main/java/org/oscarehr/common/dao/OscarAppointmentDao.java
@@ -849,12 +849,7 @@ public class OscarAppointmentDao extends AbstractDao<Appointment> {
 	}
 	
 	private String getJoin4LatestDemographicExtValue(String keyval, int seqNum) {
-		StringBuilder sb = new StringBuilder();
-		Formatter f = new Formatter(sb, Locale.US);
-		f.format("LEFT JOIN demographicExt %1$s ON a.demographic_no = %1$s.demographic_no AND %1$s.key_val = '%3$s' " +
-				"AND %1$s.date_time=(SELECT max(%2$s.date_time) from demographicExt %2$s WHERE %2$s.demographic_no=a.demographic_no "
-						+ "and key_val='%3$s') ", "e"+seqNum, "e1"+seqNum, keyval);
-		return sb.toString(); 
+		StringBuilder sb = new StringBuilder(); 
 	}
 	
 	/*
diff --git a/src/main/java/org/oscarehr/common/hl7/v2/EmeraldHL7A04TransportTask.java b/src/main/java/org/oscarehr/common/hl7/v2/EmeraldHL7A04TransportTask.java
index 955cdc589b..4232ffa57a 100644
--- a/src/main/java/org/oscarehr/common/hl7/v2/EmeraldHL7A04TransportTask.java
+++ b/src/main/java/org/oscarehr/common/hl7/v2/EmeraldHL7A04TransportTask.java
@@ -81,83 +81,68 @@ public class EmeraldHL7A04TransportTask extends TimerTask {
 	 */
 	@Override
 	public void run() {
-		try {        	
-        	File directory = new File(this.dirName);
-        	if (!directory.exists()) {
-        		logger.info("HL7 A04 directory does not exist!  Location: " + this.dirName);
-        		return;
-			}
-			
-			// get files in directory
-			File[] listOfFiles = directory.listFiles(new HL7A04FileFilter());
-			
-			if (listOfFiles == null || listOfFiles.length == 0) {
-        		logger.info("No HL7 A04 files to send.");
-        		return;
-			}
-			
-			String sendAddr = oscarProperties.getEmeraldHL7A04TransportAddr();
-			int sendPort = oscarProperties.getEmeraldHL7A04TransportPort();
-			
-			Socket client = new Socket(sendAddr, sendPort);
-			//getting the o/p stream of that connection
-			PrintStream out = new PrintStream(client.getOutputStream());
-			//reading the response using input stream
-			BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
-			
-			logger.info("Sending file(s) to '" + sendAddr + ":" + sendPort + "'");
-			
-			int numErrors = 0;
-			
-			for (int i = 0; i < listOfFiles.length; i++)  {				
-				String fName = listOfFiles[i].getName();
-				
-				// Read message
-				String message = this.readA04File(this.dirName + fName);
-				
-				if (message.equals(""))
-					continue;
-				
-				logger.info("Sending HL7 A04 file '" + fName + "' with message: " + message);
-				
-				// Send message
-				this.sendMessage(out, message);
-				
-				// Get response from Emerald
-				String messageReceived = this.getResponse(in);
-				
-				// Process Emeralds response (returns false if error found in received message)
-				boolean emeraldError = (this.processResponse(listOfFiles[i], messageReceived) == false);
-				if (emeraldError)
-					numErrors++;
-				
-				// move file to 'sent' directory
-				File dir = new File( (!emeraldError? this.sentDir : this.failDir) );				
-				boolean moveSuccess = listOfFiles[i].renameTo(new File(dir, fName));
-				
-				if (!moveSuccess) {
-					// File was not successfully moved
-					logger.info("HL7 A04 not successfully moved to 'sent' directory.");
+			try (Socket client = new Socket(sendAddr, sendPort)) {
+				File directory = new File(this.dirName);
+				if (!directory.exists()) {
+					logger.info("HL7 A04 directory does not exist!  Location: " + this.dirName);
+					return;
 				}
+				// get files in directory
+				File[] listOfFiles = directory.listFiles(new HL7A04FileFilter());
+				if (listOfFiles == null || listOfFiles.length == 0) {
+					logger.info("No HL7 A04 files to send.");
+					return;
+				}
+				String sendAddr = oscarProperties.getEmeraldHL7A04TransportAddr();
+				int sendPort = oscarProperties.getEmeraldHL7A04TransportPort();
+				// getting the o/p stream of that connection
+				PrintStream out = new PrintStream(client.getOutputStream());
+				// reading the response using input stream
+				BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
+				logger.info("Sending file(s) to '" + sendAddr + ":" + sendPort + "'");
+				int numErrors = 0;
+				for (int i = 0; i < listOfFiles.length; i++) {
+					String fName = listOfFiles[i].getName();
+					// Read message
+					String message = this.readA04File(this.dirName + fName);
+					if (message.equals(""))
+						continue;
+
+					logger.info("Sending HL7 A04 file '" + fName + "' with message: " + message);
+					// Send message
+					this.sendMessage(out, message);
+					// Get response from Emerald
+					String messageReceived = this.getResponse(in);
+					// Process Emeralds response (returns false if error found in received message)
+					boolean emeraldError = this.processResponse(listOfFiles[i], messageReceived) == false;
+					if (emeraldError)
+						numErrors++;
+
+					// move file to 'sent' directory
+					File dir = new File(!emeraldError ? this.sentDir : this.failDir);
+					boolean moveSuccess = listOfFiles[i].renameTo(new File(dir, fName));
+					if (!moveSuccess) {
+						// File was not successfully moved
+						logger.info("HL7 A04 not successfully moved to 'sent' directory.");
+					}
+				}
+				in.close();
+				out.close();
+				if (!client.isClosed())
+					client.shutdownOutput();
+
+				if (!client.isClosed())
+					client.close();
+
+				if (numErrors == 0)
+					logger.info("Successfully sent all HL7 A04 file(s)!");
+				else {
+					logger.info("Finished sending all HL7 A04 file(s).");
+					logger.info("Warning: " + numErrors + " error(s) occured during transmission.");
+				}
+			} catch (Exception e) {
+				logger.error("ERROR while sending HL7 A04 file: " + e.toString(), e);
 			}
-			
-			in.close();
-			out.close();
-			
-			if (!client.isClosed())
-				client.shutdownOutput();
-			if (!client.isClosed())
-				client.close();
-			
-			if (numErrors == 0)
-				logger.info("Successfully sent all HL7 A04 file(s)!");
-			else {
-				logger.info("Finished sending all HL7 A04 file(s).");
-				logger.info("Warning: " + numErrors + " error(s) occured during transmission.");
-			}
-		} catch (Exception e) {
-			logger.error("ERROR while sending HL7 A04 file: " + e.toString(),e);
-		}
 	}
 	
 	/**
@@ -252,18 +237,6 @@ public class EmeraldHL7A04TransportTask extends TimerTask {
 	 */
 	private String readA04File(String theFile) throws java.io.FileNotFoundException, java.io.IOException {
 		FileInputStream fin = new FileInputStream(theFile);
-		DataInputStream dis = new DataInputStream(fin);
-		
-		// Read message
-		String message = "";
-		String messagePart = "";
-		while ((messagePart = dis.readLine()) != null)
-			message += messagePart + "\r";
-			
-		fin.close();
-		dis.close();
-		
-		return message;
 	}
 	
 	/**
@@ -275,16 +248,15 @@ public class EmeraldHL7A04TransportTask extends TimerTask {
 	private void createErrorFile(File sentFile, String messageReceived) {
 		File f = new File(this.failDir + sentFile.getName().replace(".txt", "") + "_ERROR.txt");
 		if (!f.exists()) {
-			try {
-				f.createNewFile();
-				FileWriter fstream = new FileWriter(f);
-				BufferedWriter out = new BufferedWriter(fstream);
-				out.write(messageReceived);
-				//Close the output stream
-				out.close();
-			} catch (Exception e) { //Catch exception if any
-				logger.error("Error occured while creating error file: " + e.getMessage());
-			}
+				try (FileWriter fstream = new FileWriter(f);BufferedWriter out = new BufferedWriter(fstream)) {
+					f.createNewFile();
+					out.write(messageReceived);
+					// Close the output stream
+					out.close();
+				} catch (Exception e) {
+					// Catch exception if any
+					logger.error("Error occured while creating error file: " + e.getMessage());
+				}
 		}
 	}
 }
diff --git a/src/main/java/org/oscarehr/common/hl7/v2/HL7A04Data.java b/src/main/java/org/oscarehr/common/hl7/v2/HL7A04Data.java
index b33f1cac63..ea53cb23d1 100644
--- a/src/main/java/org/oscarehr/common/hl7/v2/HL7A04Data.java
+++ b/src/main/java/org/oscarehr/common/hl7/v2/HL7A04Data.java
@@ -176,21 +176,18 @@ public class HL7A04Data
         logger.info("Creating HL7 A04 file with contents: " + this.message);
         
         String saveDir = oscarProperties.getHL7A04BuildDirectory();
-        
-        // create HL7 A04 file
-        try {
-        	File directory = new File(saveDir);
-        	if (!directory.exists())
-        		directory.mkdir();
-        	
-        	FileWriter fw = new FileWriter(saveDir + this.fileName, true);
-        	BufferedWriter out = new BufferedWriter(fw);
-        	out.write(this.message);
-        	out.close();
-        } catch (IOException e) {
+		try (BufferedWriter out = new BufferedWriter(fw)) {
+			File directory = new File(saveDir);
+			if (!directory.exists())
+				directory.mkdir();
+
+			FileWriter fw = new FileWriter(saveDir + this.fileName, true);
+			out.write(this.message);
+			out.close();
+		} catch (IOException e) {
 			logger.error("ERROR while saving HL7 A04 file: " + e.toString());
 			return false;
-        }
+		}
         
         logger.info("Successfully saved HL7 A04 file: " + saveDir + this.fileName);
         
diff --git a/src/main/java/org/oscarehr/common/hl7/v2/oscar_to_oscar/OscarToOscarUtils.java b/src/main/java/org/oscarehr/common/hl7/v2/oscar_to_oscar/OscarToOscarUtils.java
index 4925f0304d..253e62b030 100644
--- a/src/main/java/org/oscarehr/common/hl7/v2/oscar_to_oscar/OscarToOscarUtils.java
+++ b/src/main/java/org/oscarehr/common/hl7/v2/oscar_to_oscar/OscarToOscarUtils.java
@@ -88,12 +88,10 @@ public final class OscarToOscarUtils {
 	}
 
 	public static void dumpMessageToFile(AbstractMessage message) {
-		try {
+		try (FileOutputStream fos = new FileOutputStream("/tmp/temp.hl7")) {
 			String result = pipeParser.encode(message);
 			result = result.replace("\r", "\r\n");
 			result = result.replace("\r\r", "\r");
-
-			FileOutputStream fos = new FileOutputStream("/tmp/temp.hl7");
 			fos.write(result.getBytes());
 			fos.flush();
 			fos.close();
diff --git a/src/main/java/org/oscarehr/document/web/ManageDocumentAction.java b/src/main/java/org/oscarehr/document/web/ManageDocumentAction.java
index 84e6ed864a..71c9f9d269 100644
--- a/src/main/java/org/oscarehr/document/web/ManageDocumentAction.java
+++ b/src/main/java/org/oscarehr/document/web/ManageDocumentAction.java
@@ -573,45 +573,6 @@ public class ManageDocumentAction extends DispatchAction {
 
 		File file = new File(documentDir, d.getDocfilename());
 
-		RandomAccessFile raf = new RandomAccessFile(file, "r");
-		FileChannel channel = raf.getChannel();
-		ByteBuffer buf = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel.size());
-		PDFFile pdffile = new PDFFile(buf);
-		if(raf != null) raf.close();
-		if(channel != null) channel.close();
-		// long readfile = System.currentTimeMillis() - start;
-		// draw the first page to an image
-		PDFPage ppage = pdffile.getPage(0);
-
-		log.debug("WIDTH " + (int) ppage.getBBox().getWidth() + " height " + (int) ppage.getBBox().getHeight());
-
-		// get the width and height for the doc at the default zoom
-		Rectangle rect = new Rectangle(0, 0, (int) ppage.getBBox().getWidth(), (int) ppage.getBBox().getHeight());
-
-		log.debug("generate the image");
-		Image img = ppage.getImage(rect.width, rect.height, // width & height
-		        rect, // clip rect
-		        null, // null for the ImageObserver
-		        true, // fill background with white
-		        true // block until drawing is done
-		        );
-
-		log.debug("about to Print to stream");
-		File outfile = new File(documentCacheDir, d.getDocfilename() + ".png");
-
-		OutputStream outs = null;
-		try {
-			outs = new FileOutputStream(outfile);
-
-			RenderedImage rendImage = (RenderedImage) img;
-			ImageIO.write(rendImage, "png", outs);
-			outs.flush();
-		} finally {
-			if (outs != null) outs.close();
-		}
-
-		return outfile;
-
 	}
 
 	public ActionForward showPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
@@ -756,36 +717,6 @@ public class ManageDocumentAction extends DispatchAction {
 		// response.setHeader("Content-Disposition", "attachment;filename=\"" + filename+ "\"");
 		// read the file name.
 		File file = new File(documentDir, d.getDocfilename());
-
-		RandomAccessFile raf = new RandomAccessFile(file, "r");
-		FileChannel channel = raf.getChannel();
-		ByteBuffer buf = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel.size());
-		PDFFile pdffile = new PDFFile(buf);
-		// long readfile = System.currentTimeMillis() - start;
-		// draw the first page to an image
-		PDFPage ppage = pdffile.getPage(0);
-
-		log.debug("WIDTH " + (int) ppage.getBBox().getWidth() + " height " + (int) ppage.getBBox().getHeight());
-
-		// get the width and height for the doc at the default zoom
-		Rectangle rect = new Rectangle(0, 0, (int) ppage.getBBox().getWidth(), (int) ppage.getBBox().getHeight());
-
-		log.debug("generate the image");
-		Image img = ppage.getImage(rect.width, rect.height, // width & height
-		        rect, // clip rect
-		        null, // null for the ImageObserver
-		        true, // fill background with white
-		        true // block until drawing is done
-		        );
-
-		log.debug("about to Print to stream");
-		ServletOutputStream outs = response.getOutputStream();
-
-		RenderedImage rendImage = (RenderedImage) img;
-		ImageIO.write(rendImage, "png", outs);
-		outs.flush();
-		outs.close();
-		return null;
 	}
 
 	public ActionForward getDocPageNumber(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
diff --git a/src/main/java/org/oscarehr/hospitalReportManager/HRMUploadKeyAction.java b/src/main/java/org/oscarehr/hospitalReportManager/HRMUploadKeyAction.java
index 3abd130768..4edea991f0 100644
--- a/src/main/java/org/oscarehr/hospitalReportManager/HRMUploadKeyAction.java
+++ b/src/main/java/org/oscarehr/hospitalReportManager/HRMUploadKeyAction.java
@@ -39,40 +39,30 @@ public class HRMUploadKeyAction extends Action {
         String filename = importFile.getFileName();
         String proNo = (String) request.getSession().getAttribute("user");
         String outcome = "failure";
-        
-        try{
-            InputStream is = importFile.getInputStream();
-            
+        try (InputStream is = new FileInputStream(filePath)) {
             String type = request.getParameter("type");
-           
-            
             String filePath = Utilities.saveFile(is, filename);
             is.close();
             File file = new File(filePath);
-            
-            is = new FileInputStream(filePath);
-            int checkFileUploadedSuccessfully = FileUploadCheck.addFile(file.getName(),is,proNo);            
+            int checkFileUploadedSuccessfully = FileUploadCheck.addFile(file.getName(), is, proNo);
             is.close();
-          
-            if (checkFileUploadedSuccessfully != FileUploadCheck.UNSUCCESSFUL_SAVE){
-                logger.debug("filePath"+filePath);
-                logger.debug("Type :"+type);
-                
-                DefaultHandler defaultHandler =  HandlerClassFactory.getDefaultHandler();
-                if(defaultHandler != null) {
-                	logger.debug("MESSAGE HANDLER "+defaultHandler.getClass().getName());
+            if (checkFileUploadedSuccessfully != FileUploadCheck.UNSUCCESSFUL_SAVE) {
+                logger.debug("filePath" + filePath);
+                logger.debug("Type :" + type);
+                DefaultHandler defaultHandler = HandlerClassFactory.getDefaultHandler();
+                if (defaultHandler != null) {
+                    logger.debug("MESSAGE HANDLER " + defaultHandler.getClass().getName());
                 }
-                if((defaultHandler.readTextFile(filePath))!= null) {
-                	outcome = "success";
+                if (defaultHandler.readTextFile(filePath) != null) {
+                    outcome = "success";
+                } else {
+                    outcome = "uploaded previously";
                 }
-                else{
-	                outcome = "uploaded previously";
-	            } 
-            } 
+            }
             request.setAttribute("filePath", filePath);
             request.setAttribute("type", type);
-        }catch(Exception e){
-            logger.error("Error: "+e);
+        } catch (Exception e) {
+            logger.error("Error: " + e);
             outcome = "exception";
         }
         
diff --git a/src/main/java/org/oscarehr/hospitalReportManager/SFTPConnector.java b/src/main/java/org/oscarehr/hospitalReportManager/SFTPConnector.java
index 2dc85723e1..af2a304262 100644
--- a/src/main/java/org/oscarehr/hospitalReportManager/SFTPConnector.java
+++ b/src/main/java/org/oscarehr/hospitalReportManager/SFTPConnector.java
@@ -370,30 +370,27 @@ public class SFTPConnector {
 		//we'll get each file's contents in a string then dump that onto a file
 		String decryptedContent = null;
 		String filename = "";
-
-		FileWriter handler = null;
 		BufferedWriter out = null;
 		for (int x=0;x<fullPaths.length;x++) {
 			String sfile = fullPaths[x];
 			if(sfile == null)
 				continue;
-			
-			try {
-	            decryptedContent = decryptFile(sfile,decryptionKey);
-	            filename = sfile.substring(sfile.lastIndexOf("/"));
-	            String newFullPath = saveToDirectoryFullPath + filename;
-	            handler = new FileWriter(newFullPath);
-	            out = new BufferedWriter(handler);
-	            out.write(decryptedContent);
-	            decryptedFilePaths[x] = newFullPath;
-			} catch(Exception e) {
-				//Don't want this to fail on all other files in the directory just because one doesn't decrypt;
+			try (FileWriter handler = new FileWriter(newFullPath)) {
+				decryptedContent = decryptFile(sfile, decryptionKey);
+				filename = sfile.substring(sfile.lastIndexOf("/"));
+				String newFullPath = saveToDirectoryFullPath + filename;
+				out = new BufferedWriter(handler);
+				out.write(decryptedContent);
+				decryptedFilePaths[x] = newFullPath;
+			} catch (Exception e) {
+				// Don't want this to fail on all other files in the directory just because one doesn't decrypt;
 				logger.error("Error decrypting file - " + sfile);
 				decryptedFilePaths[x] = null;
-            } finally {
-	            if (out!=null) out.close();
-	            if (handler!=null) handler.close();
-            }
+			} finally {
+				if (out != null)
+					out.close();
+
+			}
 		}
 
 		return decryptedFilePaths;
diff --git a/src/main/java/org/oscarehr/integration/excelleris/com/colcamex/www/main/StartupListener.java b/src/main/java/org/oscarehr/integration/excelleris/com/colcamex/www/main/StartupListener.java
index 3af50011cc..96c1fd03e5 100644
--- a/src/main/java/org/oscarehr/integration/excelleris/com/colcamex/www/main/StartupListener.java
+++ b/src/main/java/org/oscarehr/integration/excelleris/com/colcamex/www/main/StartupListener.java
@@ -118,45 +118,6 @@ public class StartupListener implements ServletContextListener {
 
     	String line = "";
     	ArrayList<String> lines = new ArrayList<String>();
-    	BufferedReader bufferedReader = new BufferedReader( new FileReader(keyFilePath) );
-		while ( ( line = bufferedReader.readLine().trim() ) != null) {
-			lines.add(line);
-		}
-		
-		String[] keys = (String[]) lines.toArray();
-    	
-		String[] array1 = null;
-		String[] array2 = null;
-		boolean b = true;
-		
-		if(properties != null) {
-			array1  = properties.keySet().toArray(new String[]{});
-			Arrays.sort(array1 ); 
-			Arrays.sort(keys);
-			array2 = keys;		
-		}
-		
-		if (array1 != null && array2 != null){
-
-			if (array1.length != array2.length) {
-				b = false;
-			} else {
-				for (int i = 0; i < array2.length; i++) {
-			
-					if (! array2[i].equalsIgnoreCase(array1[i]) ) {						
-						b = false;    
-					}                 
-				}
-			}
-		}else{
-			b = false;
-		}
-		
-		if(bufferedReader != null) {
-			bufferedReader.close();
-		}
-	
-		return b;
 	}
     
 }
diff --git a/src/main/java/org/oscarehr/integration/hl7/handlers/upload/PhsStarHandler.java b/src/main/java/org/oscarehr/integration/hl7/handlers/upload/PhsStarHandler.java
index f52d8a696f..52152b69cd 100644
--- a/src/main/java/org/oscarehr/integration/hl7/handlers/upload/PhsStarHandler.java
+++ b/src/main/java/org/oscarehr/integration/hl7/handlers/upload/PhsStarHandler.java
@@ -44,21 +44,19 @@ public class PhsStarHandler implements MessageHandler {
 		logger.info("received PHS/STAR message");
 
 		org.oscarehr.integration.hl7.handlers.PhsStarHandler handler = new org.oscarehr.integration.hl7.handlers.PhsStarHandler();
-		try {
-			BufferedReader in = new BufferedReader(new FileReader(fileName));
+		try (BufferedReader in = new BufferedReader(new FileReader(fileName))) {
 			String line = null;
 			StringBuilder sb = new StringBuilder();
-			while((line=in.readLine())!=null) {
+			while ((line = in.readLine()) != null) {
 				sb.append(line);
-				sb.append("\n");			
-			}
+				sb.append("\n");
+			} 
 			handler.init(sb.toString());
-		
-			return ("success");
-		}catch(Exception e) {
-	        logger.error("Unexpected error.", e);
-	        MessageUploader.clean(fileId);
-	        throw(new RuntimeException(e));
+			return "success";
+		} catch (Exception e) {
+			logger.error("Unexpected error.", e);
+			MessageUploader.clean(fileId);
+			throw new RuntimeException(e);
 		}
 		
 	}
diff --git a/src/main/java/org/oscarehr/integration/mcedt/ResourceAction.java b/src/main/java/org/oscarehr/integration/mcedt/ResourceAction.java
index cd62613771..64627750aa 100644
--- a/src/main/java/org/oscarehr/integration/mcedt/ResourceAction.java
+++ b/src/main/java/org/oscarehr/integration/mcedt/ResourceAction.java
@@ -166,23 +166,5 @@ public class ResourceAction extends DispatchAction {
 		response.setContentType("application/zip");
 		response.setHeader("Content-Transfer-Encoding", "binary");
 		response.setHeader("Content-Disposition","attachment; filename=\"mcedt_download_" + System.currentTimeMillis() + ".zip\"");
-		
-		ZipOutputStream zos = new ZipOutputStream(response.getOutputStream());
-		for(DownloadData d : downloadResult.getData()) {
-			byte[] inputBytes = d.getContent();
-			
-			String name = d.getResourceID().toString();
-			ZipEntry ze = new ZipEntry(name);
-			ze.setComment(d.getDescription());
-			ze.setSize(inputBytes.length);
-			
-			zos.putNextEntry(ze);
-			zos.write(inputBytes);
-			zos.closeEntry();
-			zos.flush();
-		}
-		zos.close();
-
-		return null;
 	}
 }
diff --git a/src/main/java/org/oscarehr/integration/mcedt/mailbox/ActionUtils.java b/src/main/java/org/oscarehr/integration/mcedt/mailbox/ActionUtils.java
index c0c7828e9e..6115200cf4 100644
--- a/src/main/java/org/oscarehr/integration/mcedt/mailbox/ActionUtils.java
+++ b/src/main/java/org/oscarehr/integration/mcedt/mailbox/ActionUtils.java
@@ -360,17 +360,20 @@ public class ActionUtils {
 	
 	public static Date getOutboxTimestamp() {
 		Date startDate = new Date();
-		try {
+		try (BufferedReader br = new BufferedReader(new FileReader(dateFile))) {
 			SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm");
 			OscarProperties props = OscarProperties.getInstance();
-			//File dateFile = new File(props.getProperty("ONEDT_OUTBOX", "") + ".timestamp");
+			// File dateFile = new File(props.getProperty("ONEDT_OUTBOX", "") + ".timestamp");
 			File dateDir = new File(props.getProperty("ONEDT_OUTBOX", ""));
-			if (!dateDir.exists()) dateDir.mkdirs();
-			File dateFile = new File(dateDir,".timestamp");
-			if (!dateFile.exists()) dateFile.createNewFile();
-			BufferedReader br = new BufferedReader(new FileReader(dateFile));
-			String temp= br.readLine().trim();
-			if (temp!=null) {
+			if (!dateDir.exists())
+				dateDir.mkdirs();
+
+			File dateFile = new File(dateDir, ".timestamp");
+			if (!dateFile.exists())
+				dateFile.createNewFile();
+
+			String temp = br.readLine().trim();
+			if (temp != null) {
 				startDate = formatter.parse(temp);
 			}
 			br.close();
@@ -381,12 +384,13 @@ public class ActionUtils {
 	}
 	
 	public static void setOutboxTimestamp(Date endDate) {
-		try {
+		try (BufferedWriter bw = new BufferedWriter(new FileWriter(dateFile))) {
 			SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm");
 			OscarProperties props = OscarProperties.getInstance();
 			File dateFile = new File(props.getProperty("ONEDT_OUTBOX", "") + ".timestamp");
-			if (!dateFile.exists()) dateFile.createNewFile();
-			BufferedWriter bw = new BufferedWriter(new FileWriter(dateFile));
+			if (!dateFile.exists())
+				dateFile.createNewFile();
+
 			bw.write(formatter.format(endDate));
 			bw.close();
 		} catch (Exception e) {
diff --git a/src/main/java/org/oscarehr/integration/mcedt/mailbox/UploadAction.java b/src/main/java/org/oscarehr/integration/mcedt/mailbox/UploadAction.java
index e7d594f52f..cfca460654 100644
--- a/src/main/java/org/oscarehr/integration/mcedt/mailbox/UploadAction.java
+++ b/src/main/java/org/oscarehr/integration/mcedt/mailbox/UploadAction.java
@@ -336,10 +336,6 @@ public class UploadAction extends DispatchAction {
 			} else {
 				OscarProperties props = OscarProperties.getInstance();
 				File myFile = new File(props.getProperty("ONEDT_OUTBOX", "")+formFile.getFileName());
-				FileOutputStream outputStream = new FileOutputStream(myFile);
-				outputStream.write(formFile.getFileData());
-				outputStream.close();
-				saveMessages(request, ActionUtils.addMessage("uploadAction.upload.add.success", formFile.getFileName()+ "is succesfully added to the uploads list!"));
 			}
 			
 		} catch (IOException e) {
diff --git a/src/main/java/org/oscarehr/integration/mchcv/OBECRunner.java b/src/main/java/org/oscarehr/integration/mchcv/OBECRunner.java
index 5683836e11..af5c5501ea 100644
--- a/src/main/java/org/oscarehr/integration/mchcv/OBECRunner.java
+++ b/src/main/java/org/oscarehr/integration/mchcv/OBECRunner.java
@@ -67,10 +67,9 @@ public class OBECRunner {
         UploadData result = new UploadData();
         result.setDescription("Overnight Batch Eligibility CheckiupdoadDatang");
         result.setResourceType("TXT");
-        try {
+        try (RandomAccessFile f = new RandomAccessFile(oscar_home + fileName, "r")) {
             String oscar_home = properties.getProperty("DOCUMENT_DIR");
-            RandomAccessFile f = new RandomAccessFile(oscar_home + fileName, "r");
-            byte[] b = new byte[(int) f.length()];
+            byte[] b = new byte[((int) (f.length()))];
             f.read(b);
             result.setContent(b);
         } catch (Exception e) {
diff --git a/src/main/java/org/oscarehr/olis/OLISPoller.java b/src/main/java/org/oscarehr/olis/OLISPoller.java
index 1f47b86b0a..9d43740a9b 100644
--- a/src/main/java/org/oscarehr/olis/OLISPoller.java
+++ b/src/main/java/org/oscarehr/olis/OLISPoller.java
@@ -231,12 +231,10 @@ public class OLISPoller {
 			String fileLocation = System.getProperty("java.io.tmpdir") + "/olis_" + uuidToAdd + ".response";
 			File file = new File(fileLocation);
 			oscar.oscarLab.ca.all.upload.handlers.MessageHandler msgHandler = oscar.oscarLab.ca.all.upload.HandlerClassFactory.getHandler("OLIS_HL7");
-	
-			try {
-				InputStream is = new FileInputStream(fileLocation);
+			try (InputStream is = new FileInputStream(fileLocation)) {
 				int check = FileUploadCheck.addFile(file.getName(), is, "0");
 				if (check != FileUploadCheck.UNSUCCESSFUL_SAVE) {
-					if (msgHandler.parse(loggedInInfo, "OLIS_HL7",fileLocation, check,null) != null) {
+					if (msgHandler.parse(loggedInInfo, "OLIS_HL7", fileLocation, check, null) != null) {
 						logger.info("Lab successfully added.");
 					} else {
 						logger.info("Error adding lab.");
@@ -245,7 +243,6 @@ public class OLISPoller {
 					logger.info("Lab already in system.");
 				}
 				is.close();
-	
 			} catch (Exception e) {
 				MiscUtils.getLogger().error("Couldn't add requested OLIS lab to Inbox.", e);
 			}
diff --git a/src/main/java/org/oscarehr/olis/OLISPollingUtil.java b/src/main/java/org/oscarehr/olis/OLISPollingUtil.java
index ad56f3e54b..109a30c062 100644
--- a/src/main/java/org/oscarehr/olis/OLISPollingUtil.java
+++ b/src/main/java/org/oscarehr/olis/OLISPollingUtil.java
@@ -330,12 +330,10 @@ public class OLISPollingUtil {
 		logger.debug(fileLocation);
 		File file = new File(fileLocation);
 		oscar.oscarLab.ca.all.upload.handlers.MessageHandler msgHandler = oscar.oscarLab.ca.all.upload.HandlerClassFactory.getHandler("OLIS_HL7");
-		try {
-			InputStream is = new FileInputStream(fileLocation);
+		try (InputStream is = new FileInputStream(fileLocation)) {
 			int check = FileUploadCheck.addFile(file.getName(), is, "0");
 			if (check != FileUploadCheck.UNSUCCESSFUL_SAVE) {
-				timeStampForNextStartDate = msgHandler.parse(loggedInInfo, "OLIS_HL7",fileLocation, check,null);
-				
+				timeStampForNextStartDate = msgHandler.parse(loggedInInfo, "OLIS_HL7", fileLocation, check, null);
 				if (timeStampForNextStartDate != null) {
 					logger.info("Lab successfully added.");
 				} else {
@@ -345,7 +343,6 @@ public class OLISPollingUtil {
 				logger.info("Lab already in system.");
 			}
 			is.close();
-
 		} catch (Exception e) {
 			MiscUtils.getLogger().error("Couldn't add requested OLIS lab to Inbox.", e);
 		}
diff --git a/src/main/java/org/oscarehr/sharingcenter/SharingCenterUtil.java b/src/main/java/org/oscarehr/sharingcenter/SharingCenterUtil.java
index 3024d38f26..40ca0706fb 100644
--- a/src/main/java/org/oscarehr/sharingcenter/SharingCenterUtil.java
+++ b/src/main/java/org/oscarehr/sharingcenter/SharingCenterUtil.java
@@ -301,10 +301,8 @@ public class SharingCenterUtil {
         // TODO: Home community id
         DocumentMetaData metaData = new DocumentMetaData(doc.getUniqueDocumentId(), doc.getRepositoryUniqueId());
         metaData.setPatient(createPatientDemographic(Integer.parseInt(demographicId)));
-
-        try {
+        try (FileOutputStream out = new FileOutputStream(oscarProperties.getProperty("DOCUMENT_DIR") + "/" + fileName)) {
             metaData = communicator.retrieveDocumentSet(metaData);
-            
             // proper way to find extension for mimetype (using Apache Tika)
             String ext = "";
             try {
@@ -315,26 +313,20 @@ public class SharingCenterUtil {
                 MiscUtils.getLogger().error("Unable to find extension for MimeType " + metaData.getMimeType(), e);
             }
             String fileName = doc.getTitle() + System.currentTimeMillis() + ext;
-
-            FileOutputStream out = new FileOutputStream(oscarProperties.getProperty("DOCUMENT_DIR") + "/" + fileName);
             out.write(metaData.getContent());
-
             // Add edoc entry
             Calendar cal = Calendar.getInstance();
             DateFormat dayFormat = new SimpleDateFormat("yyyy-MM-dd");
             DateFormat timeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-            EDocUtil.addDocument(demographicId, fileName, doc.getTitle(), "others", "", "", doc.getMimetype(), dayFormat.format(cal.getTime()), timeFormat.format(cal.getTime()), providerId, "", // responsible
-                    "", // reviewer
-                    null, "", // source
-                    "" // sourceFacility
-            );
-
+            // responsible
+            // reviewer
+            // source
+            // sourceFacility
+            EDocUtil.addDocument(demographicId, fileName, doc.getTitle(), "others", "", "", doc.getMimetype(), dayFormat.format(cal.getTime()), timeFormat.format(cal.getTime()), providerId, "", "", null, "", "");
             // mark the document as downloaded
             doc.setDownloaded(true);
             patientDocumentDao.merge(doc);
-
             out.close();
-
         } catch (CommunicationsException ex) {
             throw ex;
         } catch (FileNotFoundException ex) {
@@ -934,12 +926,10 @@ public class SharingCenterUtil {
             // get the actual document content from the filesystem
             String edocDir = oscarProperties.getProperty("DOCUMENT_DIR");
             File file = new File(edocDir + "/" + edoc.getDocfilename());
-            try {
-                FileInputStream fin = new FileInputStream(file);
-                byte content[] = new byte[(int) file.length()];
+            try (FileInputStream fin = new FileInputStream(file)) {
+                byte[] content = new byte[((int) (file.length()))];
                 fin.read(content);
                 document.setContent(content);
-
             } catch (Exception e) {
                 MiscUtils.getLogger().debug("Exception: " + e.getMessage());
             }
diff --git a/src/main/java/org/oscarehr/sharingcenter/util/CDADocumentUtil.java b/src/main/java/org/oscarehr/sharingcenter/util/CDADocumentUtil.java
index 431f6e0376..8edc7b888d 100644
--- a/src/main/java/org/oscarehr/sharingcenter/util/CDADocumentUtil.java
+++ b/src/main/java/org/oscarehr/sharingcenter/util/CDADocumentUtil.java
@@ -416,13 +416,6 @@ public class CDADocumentUtil {
 
                 //Create actual file for PhrExtract Document
                 File file = new File(xPhrFile);
-                FileWriter filewriter = new FileWriter(file, true);
-                filewriter.write("<?xml version='1.0' encoding='utf-8'?>");
-
-                //Adding XSL stylesheet link to format xPhr file:       
-                filewriter.write("<?xml-stylesheet type='text/xsl' href='OscarStyleCda.xsl'?>");
-                filewriter.write(phrDocString);
-                filewriter.close();
             }
         } catch (IOException e) {
             LOGGER.error("Error, Could not write xPhr Document to directory", e);
diff --git a/src/main/java/org/oscarehr/ui/servlet/ImageRenderingServlet.java b/src/main/java/org/oscarehr/ui/servlet/ImageRenderingServlet.java
index 1feeb138b6..efa5d44085 100644
--- a/src/main/java/org/oscarehr/ui/servlet/ImageRenderingServlet.java
+++ b/src/main/java/org/oscarehr/ui/servlet/ImageRenderingServlet.java
@@ -72,7 +72,7 @@ public final class ImageRenderingServlet extends HttpServlet {
 	private static DigitalSignatureDao digitalSignatureDao = (DigitalSignatureDao) SpringUtils.getBean("digitalSignatureDao");
 
 	public static enum Source {
-		local_client, hnr_client, integrator_client, signature_preview, signature_stored,clinic_logo
+		local_client, hnr_client, integrator_client, signature_preview, signature_stored,clinic_logo;
 	}
 
 	@Override
@@ -121,9 +121,6 @@ public final class ImageRenderingServlet extends HttpServlet {
 		response.setContentType("image/" + imageType);
 		if(image !=null)
 			response.setContentLength(image.length);
-		BufferedOutputStream bos = new BufferedOutputStream(response.getOutputStream());
-		bos.write(image);
-		bos.flush();
 	}
 
 	private static final void renderIntegratorClient(HttpServletRequest request, HttpServletResponse response) throws IOException {
@@ -243,27 +240,22 @@ public final class ImageRenderingServlet extends HttpServlet {
 		}
 
 		try {
-			// get image
-			FileInputStream fileInputStream = null;
-			try {
+			try (// get image
+			FileInputStream fileInputStream = new FileInputStream(tempFilePath)) {
 				String signatureRequestId = request.getParameter(DigitalSignatureUtils.SIGNATURE_REQUEST_ID_KEY);
 				String tempFilePath = DigitalSignatureUtils.getTempFilePath(signatureRequestId);
-				fileInputStream = new FileInputStream(tempFilePath);
 				byte[] imageBytes = new byte[1024 * 256];
 				fileInputStream.read(imageBytes);
 				renderImage(response, imageBytes, "jpeg");
 				return;
 			} catch (FileNotFoundException e) {
-				// no image, render a blank gif, yes this breaks the concept 
+				// no image, render a blank gif, yes this breaks the concept
 				// of the image already exists, but it's difficult to implement the preview otherwise
 				String tempFilePath = getServletContext().getRealPath("/images/1x1.gif");
-				fileInputStream = new FileInputStream(tempFilePath);
 				byte[] imageBytes = new byte[1024 * 32];
-				fileInputStream.read(imageBytes);
 				renderImage(response, imageBytes, "gif");
 				return;
 			} finally {
-				IOUtils.closeQuietly(fileInputStream);
 			}
 		} catch (Exception e) {
 			logger.error("Unexpected error.", e);
diff --git a/src/main/java/org/oscarehr/util/QrCodeUtils.java b/src/main/java/org/oscarehr/util/QrCodeUtils.java
index afbcc9598e..fef9096048 100644
--- a/src/main/java/org/oscarehr/util/QrCodeUtils.java
+++ b/src/main/java/org/oscarehr/util/QrCodeUtils.java
@@ -57,7 +57,7 @@ public class QrCodeUtils {
 
 	public enum QrCodesOrientation
 	{
-		VERTICAL, HORIZONTAL
+		VERTICAL, HORIZONTAL;
 	}
 	
 	public static byte[] toMultipleQrCodePngs(String s, ErrorCorrectionLevel ec, QrCodesOrientation qrCodesOrientation, int scaleFactor) throws IOException, WriterException
@@ -219,29 +219,5 @@ public class QrCodeUtils {
 	public static void main(String... argv) throws Exception
 	{
 		byte[] b = toSingleQrCodePng("this is a test of some text", ErrorCorrectionLevel.H, 1);
-		
-		FileOutputStream fos = new FileOutputStream("/tmp/test_h.png");
-		fos.write(b);
-		fos.flush();
-		fos.close();
-
-		//------
-		{
-			byte[] b1=toMultipleQrCodePngs("1234567890abcdefghijklmnopqrstuvwxyz", ErrorCorrectionLevel.H, QrCodesOrientation.HORIZONTAL, null, 5, 1);
-	
-			FileOutputStream fos1 = new FileOutputStream("/tmp/test_h1.png");
-			fos1.write(b1);
-			fos1.flush();
-			fos1.close();
-		}
-		//------
-		{
-			byte[] b1=toMultipleQrCodePngs("1234567890abcdefghijklmnopqrstuvwxyz", ErrorCorrectionLevel.H, QrCodesOrientation.HORIZONTAL, null, 5, 3);
-	
-			FileOutputStream fos1 = new FileOutputStream("/tmp/test_h1_x3.png");
-			fos1.write(b1);
-			fos1.flush();
-			fos1.close();
-		}
 	}
 }
diff --git a/src/main/java/org/oscarehr/ws/rest/util/ClinicalConnectUtil.java b/src/main/java/org/oscarehr/ws/rest/util/ClinicalConnectUtil.java
index e9e37aa5b4..90c562201e 100644
--- a/src/main/java/org/oscarehr/ws/rest/util/ClinicalConnectUtil.java
+++ b/src/main/java/org/oscarehr/ws/rest/util/ClinicalConnectUtil.java
@@ -134,25 +134,22 @@ public class ClinicalConnectUtil {
 		String documentDir = OscarProperties.getInstance().getProperty("DOCUMENT_DIR");
 		String secretKeyDir = documentDir+"/SSOClinicalConnect/";
 		String secretKeyFile = secretKeyDir+"SecretKey";
-		try {
-			//read secretKey from file
-			FileInputStream fis = new FileInputStream(secretKeyFile);
+		try (// read secretKey from file
+		FileInputStream fis = new FileInputStream(secretKeyFile)) {
 			byte[] keybyte = new byte[16];
 			fis.read(keybyte);
 			fis.close();
 			secretKey = new SecretKeySpec(keybyte, "AES");
 		} catch (FileNotFoundException e1) {
 			logger.info("SecretKey file not found, creating...");
-			
 			secretKey = generateAesEncryptionKey();
-			
-			try {
-				//check if secretkey directory exists, if not, create it
+			try (// write secretkey to file
+			FileOutputStream fos = new FileOutputStream(secretKeyFile)) {
+				// check if secretkey directory exists, if not, create it
 				File skdir = new File(secretKeyDir);
-				if (!skdir.exists()) skdir.mkdirs();
-				
-				//write secretkey to file
-				FileOutputStream fos = new FileOutputStream(secretKeyFile);
+				if (!skdir.exists())
+					skdir.mkdirs();
+
 				fos.write(secretKey.getEncoded());
 				fos.close();
 			} catch (Exception e2) {
diff --git a/src/main/java/org/oscarehr/ws/rest/util/QuestimedUtil.java b/src/main/java/org/oscarehr/ws/rest/util/QuestimedUtil.java
index 9afe8518a8..5b0bd5d546 100644
--- a/src/main/java/org/oscarehr/ws/rest/util/QuestimedUtil.java
+++ b/src/main/java/org/oscarehr/ws/rest/util/QuestimedUtil.java
@@ -184,27 +184,22 @@ public class QuestimedUtil {
         String documentDir = OscarProperties.getInstance().getProperty("DOCUMENT_DIR");
         String secretKeyDir = documentDir + "/SSOQuestimed/";
         String secretKeyFile = secretKeyDir + "SecretKey";
-        try {
-            //read secretKey from file
-            FileInputStream fis = new FileInputStream(secretKeyFile);
+        try (// read secretKey from file
+        FileInputStream fis = new FileInputStream(secretKeyFile)) {
             byte[] keybyte = new byte[16];
             fis.read(keybyte);
             fis.close();
             secretKey = new SecretKeySpec(keybyte, "AES");
         } catch (FileNotFoundException e1) {
             logger.info("SecretKey file not found, creating...");
-
             secretKey = generateAesEncryptionKey();
-
-            try {
-                //check if secretkey directory exists, if not, create it
+            try (// write secretkey to file
+            FileOutputStream fos = new FileOutputStream(secretKeyFile)) {
+                // check if secretkey directory exists, if not, create it
                 File skdir = new File(secretKeyDir);
                 if (!skdir.exists()) {
                     skdir.mkdirs();
                 }
-
-                //write secretkey to file
-                FileOutputStream fos = new FileOutputStream(secretKeyFile);
                 fos.write(secretKey.getEncoded());
                 fos.close();
             } catch (Exception e2) {
diff --git a/src/main/java/oscar/appt/AppointmentMailer.java b/src/main/java/oscar/appt/AppointmentMailer.java
index 02da9e0cb6..9c0a74837a 100644
--- a/src/main/java/oscar/appt/AppointmentMailer.java
+++ b/src/main/java/oscar/appt/AppointmentMailer.java
@@ -138,57 +138,44 @@ public class AppointmentMailer implements MessageMailer{
 
                 InputStream fstream = null;
                 DataInputStream instream = null;
-
-                try {   
+                try (BufferedReader bufreader = new BufferedReader(new InputStreamReader(instream))) {
                     InternetAddress emailAddress = new InternetAddress(demographic.getEmail(), true);
                     this.message.setTo(emailAddress.toString());
-
-
                     fstream = new FileInputStream(msgTemplatePath);
                     instream = new DataInputStream(fstream);
-
-                    BufferedReader bufreader = new BufferedReader(new InputStreamReader(instream));
                     String strLine;
-                
-                    //read in message template and header information
-                    int lineIndex = 0;                 
-                    while ((strLine = bufreader.readLine()) != null)  {
+                    // read in message template and header information
+                    int lineIndex = 0;
+                    while ((strLine = bufreader.readLine()) != null) {
                         if (lineIndex < 2) {
                             String[] msgConfig = strLine.split(":");
-                            if (msgConfig[0].equalsIgnoreCase("From")){
+                            if (msgConfig[0].equalsIgnoreCase("From")) {
                                 this.message.setFrom(msgConfig[1]);
-                            }
-                            else if (msgConfig[0].equalsIgnoreCase("Subject")) {
-                                this.message.setSubject(msgConfig[1]);
-                            }
-                        }
-                        else {
+                            } else
+                                if (msgConfig[0].equalsIgnoreCase("Subject")) {
+                                    this.message.setSubject(msgConfig[1]);
+                                }
+
+                        } else {
                             this.msgTextTemplate.append(strLine).append("\n");
                         }
                         lineIndex++;
-                    }
-                }
-                catch(FileNotFoundException fnf) {
-                  logger.error("No Appointment Reminder Template found", fnf);
-                }
-                catch(IOException io) {
-                  logger.error("IOException occurred", io);
-                }
-                catch(AddressException addr) {
+                    } 
+                } catch (FileNotFoundException fnf) {
+                    logger.error("No Appointment Reminder Template found", fnf);
+                } catch (IOException io) {
+                    logger.error("IOException occurred", io);
+                } catch (AddressException addr) {
                     logger.error("To Address not valid:" + demographic.getEmail());
-                }
-
-                finally {
+                } finally {
                     try {
                         if (instream != null) {
                             instream.close();
                         }
-                        
-                        if ( fstream != null) {
+                        if (fstream != null) {
                             fstream.close();
                         }
-                    }
-                    catch(IOException io) {
+                    } catch (IOException io) {
                         logger.error("IOException occurred", io);
                     }
                 }
diff --git a/src/main/java/oscar/dms/actions/DocumentUploadAction.java b/src/main/java/oscar/dms/actions/DocumentUploadAction.java
index c0f99d2578..529f7b936b 100644
--- a/src/main/java/oscar/dms/actions/DocumentUploadAction.java
+++ b/src/main/java/oscar/dms/actions/DocumentUploadAction.java
@@ -205,23 +205,20 @@ public class DocumentUploadAction extends DispatchAction {
 	 */
 	private void writeLocalFile(FormFile docFile, String fileName) throws Exception {
 		InputStream fis = null;
-		FileOutputStream fos = null;
-		try {
+		try (FileOutputStream fos = new FileOutputStream(savePath)) {
 			fis = docFile.getInputStream();
 			String savePath = oscar.OscarProperties.getInstance().getProperty("DOCUMENT_DIR") + "/" + fileName;
-			fos = new FileOutputStream(savePath);
 			byte[] buf = new byte[128 * 1024];
 			int i = 0;
 			while ((i = fis.read(buf)) != -1) {
 				fos.write(buf, 0, i);
-			}
+			} 
 		} catch (Exception e) {
 			logger.debug(e.toString());
 		} finally {
 			if (fis != null)
 				fis.close();
-			if (fos != null)
-				fos.close();
+
 		}
 	}
         private boolean writeToIncomingDocs(FormFile docFile, String queueId, String PdfDir, String fileName) throws Exception {
diff --git a/src/main/java/oscar/eform/EFormExportZip.java b/src/main/java/oscar/eform/EFormExportZip.java
index 80ee254bd9..cd73827d93 100644
--- a/src/main/java/oscar/eform/EFormExportZip.java
+++ b/src/main/java/oscar/eform/EFormExportZip.java
@@ -238,17 +238,6 @@ public class EFormExportZip {
             } else if (eformTableFailed.containsKey(tempFile.getKey())) {
                 //do not save file if eform fails
             } else {
-                FileInputStream fis = new FileInputStream(tempFile.getValue());
-                File imageFile = new File(ImageUploadAction.getImageFolder(), tempFile.getKey());
-                if (imageFile.exists()) {
-                    errors.add("Image '" + tempFile.getKey() + "' already exists, skipping image, but the form may still be uploaded.  Please resolve.");
-                    _log.info("EForm Import: Image with name '" + tempFile.getKey() + "' already exists, skipping image, but the form may still be uploaded.  Please resolve.");
-                }
-                OutputStream os = new FileOutputStream(imageFile);
-                inputToOutput(fis, os);
-                _log.info("Loaded eform file: " + tempFile.getKey());
-                fis.close();
-                os.close();
             }
         }
         _log.info("Registering: " + eformTable.values().size() + " eforms");
diff --git a/src/main/java/oscar/eform/util/EFormPDFServlet.java b/src/main/java/oscar/eform/util/EFormPDFServlet.java
index 6b0d163338..98edd26d95 100644
--- a/src/main/java/oscar/eform/util/EFormPDFServlet.java
+++ b/src/main/java/oscar/eform/util/EFormPDFServlet.java
@@ -105,60 +105,49 @@ public class EFormPDFServlet extends HttpServlet {
     public void doPost(HttpServletRequest req, HttpServletResponse res) throws javax.servlet.ServletException,
             java.io.IOException {
 
-        ByteArrayOutputStream baosPDF = null;
-        FileInputStream fis = null;  
+        ByteArrayOutputStream baosPDF = null;  
         File tmpFile = null;
-
-        try {        	
-            
-            if(req.getParameter("multiple")!=null) {
-            	ArrayList<Object> files = new ArrayList<Object>();
-            	for(int x=0;x<Integer.parseInt(req.getParameter("multiple"));x++) {
-                    baosPDF = generatePDFDocumentBytes(req, this.getServletContext(),x);
-            		tmpFile = File.createTempFile("formpdf", String.valueOf((int)Math.random()*10000));
+        try (FileInputStream fis = new FileInputStream(tmpFile)) {
+            if (req.getParameter("multiple") != null) {
+                ArrayList<Object> files = new ArrayList<Object>();
+                for (int x = 0; x < Integer.parseInt(req.getParameter("multiple")); x++) {
+                    baosPDF = generatePDFDocumentBytes(req, this.getServletContext(), x);
+                    tmpFile = File.createTempFile("formpdf", String.valueOf(((int) (Math.random())) * 10000));
                     baosPDF.writeTo(new FileOutputStream(tmpFile));
                     files.add(tmpFile.getAbsolutePath());
                     tmpFile.deleteOnExit();
-            	}
-            	tmpFile = File.createTempFile("formpdf", String.valueOf((int)Math.random()*10000));
-            	ConcatPDF.concat(files, tmpFile.getAbsolutePath());
+                }
+                tmpFile = File.createTempFile("formpdf", String.valueOf(((int) (Math.random())) * 10000));
+                ConcatPDF.concat(files, tmpFile.getAbsolutePath());
             } else {
-                baosPDF = generatePDFDocumentBytes(req, this.getServletContext(),0);
-            	tmpFile = File.createTempFile("formpdf", String.valueOf((int)Math.random()*10000));
+                baosPDF = generatePDFDocumentBytes(req, this.getServletContext(), 0);
+                tmpFile = File.createTempFile("formpdf", String.valueOf(((int) (Math.random())) * 10000));
                 baosPDF.writeTo(new FileOutputStream(tmpFile));
             }
             StringBuilder sbFilename = new StringBuilder();
             sbFilename.append("filename_");
             sbFilename.append(".pdf");
-
             // set the Cache-Control header
             res.setHeader("Cache-Control", "max-age=0");
             res.setDateHeader("Expires", 0);
             res.setContentType("application/pdf");
-
             // The Content-disposition value will be inline
-
             StringBuilder sbContentDispValue = new StringBuilder();
-            sbContentDispValue.append("inline; filename="); //inline - display
-            sbContentDispValue.append(sbFilename);
+            sbContentDispValue.append("inline; filename=");// inline - display
 
+            sbContentDispValue.append(sbFilename);
             res.setHeader("Content-disposition", sbContentDispValue.toString());
-            res.setContentLength((int)tmpFile.length());
-            
-            ServletOutputStream sout = res.getOutputStream();  
-            fis = new FileInputStream(tmpFile);  
-            byte[] buffer = new byte[64000];  
-            int bytesRead = 0;  
-                                
-            while(true)  
-                {  
-                       bytesRead = fis.read(buffer);  
-                       if (bytesRead == -1)  
-                              break;  
-                                    
-                       sout.write(buffer,0,bytesRead);  
-                }  
-            
+            res.setContentLength(((int) (tmpFile.length())));
+            ServletOutputStream sout = res.getOutputStream();
+            byte[] buffer = new byte[64000];
+            int bytesRead = 0;
+            while (true) {
+                bytesRead = fis.read(buffer);
+                if (bytesRead == -1)
+                    break;
+
+                sout.write(buffer, 0, bytesRead);
+            } 
         } catch (Exception e) {
             res.setContentType("text/html");
             PrintWriter writer = res.getWriter();
@@ -168,9 +157,12 @@ public class EFormPDFServlet extends HttpServlet {
             writer.println("</pre>");
             writer.close();
         } finally {
-            if (baosPDF != null) baosPDF.close();
-            if (fis != null) fis.close();
-            if (tmpFile != null) tmpFile.deleteOnExit();
+            if (baosPDF != null)
+                baosPDF.close();
+
+            if (tmpFile != null)
+                tmpFile.deleteOnExit();
+
         }
     }
 
diff --git a/src/main/java/oscar/eform/util/EFormSignatureViewForPdfGenerationServlet.java b/src/main/java/oscar/eform/util/EFormSignatureViewForPdfGenerationServlet.java
index f4f66dd7d2..7aec252117 100644
--- a/src/main/java/oscar/eform/util/EFormSignatureViewForPdfGenerationServlet.java
+++ b/src/main/java/oscar/eform/util/EFormSignatureViewForPdfGenerationServlet.java
@@ -55,11 +55,6 @@ public final class EFormSignatureViewForPdfGenerationServlet extends HttpServlet
 				response.setContentType("image/" + imageType);
 				if(image !=null)
 					response.setContentLength(image.length);
-				BufferedOutputStream bos = new BufferedOutputStream(response.getOutputStream());
-				bos.write(image);
-				bos.flush();
-				
-				return;
 			}
 		} catch (Exception e) {
 			logger.error("Unexpected error.", e);
diff --git a/src/main/java/oscar/form/pageUtil/FrmXmlUploadAction.java b/src/main/java/oscar/form/pageUtil/FrmXmlUploadAction.java
index 8d779a0517..555de9465f 100644
--- a/src/main/java/oscar/form/pageUtil/FrmXmlUploadAction.java
+++ b/src/main/java/oscar/form/pageUtil/FrmXmlUploadAction.java
@@ -64,31 +64,27 @@ public class FrmXmlUploadAction extends Action {
         FormFile file1 = frm.getFile1();
         InputStream is = file1.getInputStream();
         int BUFFER = 2048;
-        
-        try {  
-            File tmpFile = File.createTempFile("tmp",".zip");
-            int count = 0;
-            byte data[] = new byte[BUFFER];
-            tmpFile.createNewFile();
-            tmpFile.deleteOnExit();
-            FileOutputStream fos = new FileOutputStream(tmpFile);                
-            while ((count = is.read(data, 0, BUFFER))!= -1) {
-                fos.write(data, 0, count);                    
-            }
-            is.close();
-            ZipFile zf = new ZipFile(tmpFile);
-            ZipEntry entry;
-            Enumeration e = zf.entries();
-            while(e.hasMoreElements()) {
-                entry = (ZipEntry) e.nextElement();
-                InputStream zis = zf.getInputStream(entry);
-                JDBCUtil.toDataBase(zis, entry.getName());
-                zis.close();
-            }
-        }
-        catch(Exception e) {
-            MiscUtils.getLogger().error("Error", e);
-        }
+		try (FileOutputStream fos = new FileOutputStream(tmpFile);ZipFile zf = new ZipFile(tmpFile)) {
+			File tmpFile = File.createTempFile("tmp", ".zip");
+			int count = 0;
+			byte[] data = new byte[BUFFER];
+			tmpFile.createNewFile();
+			tmpFile.deleteOnExit();
+			while ((count = is.read(data, 0, BUFFER)) != -1) {
+				fos.write(data, 0, count);
+			} 
+			is.close();
+			ZipEntry entry;
+			Enumeration e = zf.entries();
+			while (e.hasMoreElements()) {
+				entry = ((ZipEntry) (e.nextElement()));
+				InputStream zis = zf.getInputStream(entry);
+				JDBCUtil.toDataBase(zis, entry.getName());
+				zis.close();
+			} 
+		} catch (Exception e) {
+			MiscUtils.getLogger().error("Error", e);
+		}
         //ArrayList messages = new ArrayList();
         //ActionErrors errors = new ActionErrors();  
         
diff --git a/src/main/java/oscar/form/pharmaForms/formBPMH/web/BpmhFormRetrieve.java b/src/main/java/oscar/form/pharmaForms/formBPMH/web/BpmhFormRetrieve.java
index 6b075b20f6..3ab008b689 100644
--- a/src/main/java/oscar/form/pharmaForms/formBPMH/web/BpmhFormRetrieve.java
+++ b/src/main/java/oscar/form/pharmaForms/formBPMH/web/BpmhFormRetrieve.java
@@ -109,8 +109,6 @@ public class BpmhFormRetrieve extends DispatchAction {
 			HttpServletRequest request, HttpServletResponse response) throws IOException {
 		
 		BpmhFormBean bpmh = (BpmhFormBean) form;
-
-		FileInputStream input = null;
 		OutputStream output = null;
 		byte[] pdfContent = null;
 		Integer demographicNo = Integer.parseInt( bpmh.getDemographicNo() );
@@ -136,26 +134,6 @@ public class BpmhFormRetrieve extends DispatchAction {
 		if( formId == 0 ) {
 			bpmhFormHandler.saveFormHistory();
 		}
-		
-		input = new FileInputStream( pdfController.getOutputPath() );
-        pdfContent = new byte[ input.available() ];
-        input.read(pdfContent, 0, input.available());
-
-        response.reset();
-		response.setContentType("application/pdf");
-		response.setHeader("Content-Disposition", "inline; filename=" + pdfController.getFileName());
-		output = response.getOutputStream();
-		
-		if(output != null) {
-			output.write(pdfContent);		
-			output.close();
-		}
-		
-		if(input != null) {
-			input.close();
-		}
-
-		return null;
 	}
 		
 }
diff --git a/src/main/java/oscar/login/UploadLoginTextAction.java b/src/main/java/oscar/login/UploadLoginTextAction.java
index 23a9eca4c4..10c3072bea 100644
--- a/src/main/java/oscar/login/UploadLoginTextAction.java
+++ b/src/main/java/oscar/login/UploadLoginTextAction.java
@@ -62,7 +62,6 @@ public class UploadLoginTextAction extends Action {
 		}
     	
        InputStream fis = null;
-       FileOutputStream fos = null;
        LabUploadForm frm = (LabUploadForm) form;
        FormFile importFile = frm.getImportFile();
        boolean error = false;
@@ -112,13 +111,6 @@ public class UploadLoginTextAction extends Action {
             if( importFile.getFileName().length() > 0 ) {
                 fis = importFile.getInputStream();
                 String savePath = oscar.OscarProperties.getInstance().getProperty("DOCUMENT_DIR") + "/OSCARloginText.txt";
-                fos = new FileOutputStream(savePath);
-                byte[] buf = new byte[128*1024];
-                int i = 0;
-                while ((i = fis.read(buf)) != -1) {
-                    fos.write(buf, 0, i);
-                }
-                error = false;
             }
        } catch( Exception e) {
            MiscUtils.getLogger().error("Error", e);  
diff --git a/src/main/java/oscar/oscarBilling/MSP/DocumentTeleplanReportUploadServlet.java b/src/main/java/oscar/oscarBilling/MSP/DocumentTeleplanReportUploadServlet.java
index aed8269b0e..a1b80b90cd 100644
--- a/src/main/java/oscar/oscarBilling/MSP/DocumentTeleplanReportUploadServlet.java
+++ b/src/main/java/oscar/oscarBilling/MSP/DocumentTeleplanReportUploadServlet.java
@@ -49,18 +49,21 @@ public class DocumentTeleplanReportUploadServlet extends HttpServlet{
     public void service(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException  {
         int c;
         int count;
-        byte data[] = new byte[BUFFER];
-        byte data1[] = new byte[BUFFER/2];
-        byte data2[] = new byte[BUFFER/2];
-        byte enddata[] = new byte[2];
+        byte data = new byte[BUFFER];
+        byte data1 = new byte[BUFFER/2];
+        byte data2 = new byte[BUFFER/2];
+        byte enddata = new byte[2];
         
         
         HttpSession session = request.getSession(true);
         String backupfilepath = ((String) session.getAttribute("homepath"))!=null?((String) session.getAttribute("homepath")):"null" ;
         
         count=request.getContentType().indexOf('=');
-        String temp = request.getContentType().substring(count+1);
-        String filename = "test.txt", foldername="", fileheader="", forwardTo="";
+        String temp = request.getContentType().substring(count+1);
+        String filename = "test.txt";
+        String foldername = "";
+        String fileheader = "";
+        String forwardTo = "";
         
         String userHomePath = System.getProperty("user.home", "user.dir");
         MiscUtils.getLogger().debug(userHomePath);
@@ -85,7 +88,6 @@ public class DocumentTeleplanReportUploadServlet extends HttpServlet{
         // creator = request.getParameter("creator");
         
         ServletInputStream sis = request.getInputStream();
-        BufferedOutputStream dest = null;
         FileOutputStream fos = null;
         boolean bwri = false;
         boolean bfbo = true;
@@ -120,7 +122,6 @@ public class DocumentTeleplanReportUploadServlet extends HttpServlet{
 
                         fileheader = filename;
                         fos = new FileOutputStream(foldername+ filename);
-                        dest = new BufferedOutputStream(fos, BUFFER);
                     }
                     c =sis.readLine(data2, 0, BUFFER);
                     if((c =sis.readLine(data2, 0, BUFFER)) != -1) {
diff --git a/src/main/java/oscar/oscarBilling/MSP/ExtractBean.java b/src/main/java/oscar/oscarBilling/MSP/ExtractBean.java
index bf0d9608d8..35c8f2d31a 100644
--- a/src/main/java/oscar/oscarBilling/MSP/ExtractBean.java
+++ b/src/main/java/oscar/oscarBilling/MSP/ExtractBean.java
@@ -370,60 +370,35 @@ public class ExtractBean extends Object implements Serializable {
       }
     
 
-    public void writeFile(String value1){                       
-        try{
+    public void writeFile(String value1){
+        try (FileInputStream pStream = new FileInputStream(pFile.getPath());FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);PrintStream p = new PrintStream(out)) {
             String home_dir;
             String userHomePath = System.getProperty("user.home", "user.dir");
-
             File pFile = new File(userHomePath, oscar_home);
-            FileInputStream pStream = new FileInputStream(pFile.getPath());
-            
             Properties ap = new Properties();
             ap.load(pStream);
-                        
             home_dir = ap.getProperty("HOME_DIR");
             pStream.close();
-                        
-            FileOutputStream out;
-
-            out = new FileOutputStream(home_dir+ ohipFilename);
-            PrintStream p;
-            p = new PrintStream(out);                        
-            p.println(value1);            
-
+            p.println(value1);
             p.close();
-        }
-        catch(Exception e) {
-        	logger.error("Unexpected error", e);
+        } catch (Exception e) {
+            logger.error("Unexpected error", e);
         }        
     }
     
-    public void writeHtml(String htmlvalue1){                        
-        try{
+    public void writeHtml(String htmlvalue1){
+        try (FileInputStream pStream1 = new FileInputStream(pFile1.getPath());FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);PrintStream p1 = new PrintStream(out1)) {
             String home_dir1;
             String userHomePath1 = System.getProperty("user.home", "user.dir");
-
             File pFile1 = new File(userHomePath1, oscar_home);
-            FileInputStream pStream1 = new FileInputStream(pFile1.getPath());
-            
             Properties ap1 = new Properties();
-            ap1.load(pStream1);                        
+            ap1.load(pStream1);
             home_dir1 = ap1.getProperty("HOME_DIR");
             pStream1.close();
-            
-            
-            FileOutputStream out1;
-            out1 = new FileOutputStream(home_dir1+htmlFilename);
-            PrintStream p1;
-            p1 = new PrintStream(out1);
-            
-            
             p1.println(htmlvalue1);
-
             p1.close();
-        }
-        catch(Exception e) {
-        	logger.error("Unexpected error", e);
+        } catch (Exception e) {
+            logger.error("Unexpected error", e);
         }
         
     }
diff --git a/src/main/java/oscar/oscarBilling/OHIP/ExtractBean.java b/src/main/java/oscar/oscarBilling/OHIP/ExtractBean.java
index 3022447af2..1f9933e283 100755
--- a/src/main/java/oscar/oscarBilling/OHIP/ExtractBean.java
+++ b/src/main/java/oscar/oscarBilling/OHIP/ExtractBean.java
@@ -509,13 +509,10 @@ public class ExtractBean extends Object implements Serializable {
 	}
 	// write OHIP file to it
 	public void writeFile(String value1) {
-		try {
+		try (FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);PrintStream p = new PrintStream(out)) {
 			String home_dir;
 			home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
-			FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);
-			PrintStream p = new PrintStream(out);
 			p.println(value1);
-
 			p.close();
 			out.close();
 		} catch (Exception e) {
@@ -525,24 +522,18 @@ public class ExtractBean extends Object implements Serializable {
 	// get path from the property file, e.g.
 	// OscarDocument/.../billing/download/, and then write to it
 	public void writeHtml(String htmlvalue1) {
-		try {
+		try (FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);PrintStream p1 = new PrintStream(out1)) {
 			String home_dir1;
-			/*
-			String userHomePath1 = System.getProperty("user.home", "user.dir");
+			/* String userHomePath1 = System.getProperty("user.home", "user.dir");
 
 			File pFile1 = new File(userHomePath1, oscar_home);
 			FileInputStream pStream1 = new FileInputStream(pFile1.getPath());
 			Properties ap1 = new Properties();
 			ap1.load(pStream1);
 			pStream1.close();
-			*/
+			 */
 			home_dir1 = OscarProperties.getInstance().getProperty("HOME_DIR");
-
-			FileOutputStream out1 = new FileOutputStream(home_dir1
-					+ htmlFilename);
-			PrintStream p1 = new PrintStream(out1);
 			p1.println(htmlvalue1);
-
 			p1.close();
 			out1.close();
 		} catch (Exception e) {
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/MSP/ExtractBean.java b/src/main/java/oscar/oscarBilling/ca/bc/MSP/ExtractBean.java
index 2a8459963c..8c4161f605 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/MSP/ExtractBean.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/MSP/ExtractBean.java
@@ -326,29 +326,24 @@ public class ExtractBean extends Object implements Serializable {
     }
 
     public void writeFile(String value1){
-        try{
+        try (FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);PrintStream p = new PrintStream(out)) {
             String home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
-
-            FileOutputStream out = new FileOutputStream(home_dir+ ohipFilename);
-            PrintStream p = new PrintStream(out);
             p.println(value1);
             p.close();
-        }catch(Exception e) {
+        } catch (Exception e) {
             logger.error("Unexpected error", e);
         }
     }
 
     public void writeHtml(String htmlvalue1){
       if (eFlag.equals("1")) {
-        try{
-            String home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
-            FileOutputStream out = new FileOutputStream(home_dir+htmlFilename);
-            PrintStream p = new PrintStream(out);
-            p.println(htmlvalue1);
-            p.close();
-        }catch(Exception e) {
-            logger.error("Unexpected error", e);
-        }
+            try (FileOutputStream out = new FileOutputStream(home_dir + htmlFilename);PrintStream p = new PrintStream(out)) {
+                String home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
+                p.println(htmlvalue1);
+                p.close();
+            } catch (Exception e) {
+                logger.error("Unexpected error", e);
+            }
       }
     }
 
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/MSP/GenTaAction.java b/src/main/java/oscar/oscarBilling/ca/bc/MSP/GenTaAction.java
index b2989c1bbb..70fcbff82e 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/MSP/GenTaAction.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/MSP/GenTaAction.java
@@ -92,386 +92,6 @@ public class GenTaAction  extends Action {
         String filepath = OscarProperties.getInstance().getProperty("DOCUMENT_DIR");
         
         FileInputStream file = new FileInputStream(filepath + filename);
-        BufferedReader input = new BufferedReader(new InputStreamReader(file));
-        String nextline;
-        
-        while ((nextline=input.readLine())!=null){
-            String header = nextline.substring(0,3);
-            if (header.equals("S21")) {
-                S21 s21 = new S21();
-                s21.parse(nextline);
-                raNo = "";
-               
-                List<TeleplanS21> rs = s21Dao.findByFilenamePaymentPayeeNo(filename, s21.getT_payment(), s21.getT_payeeno());
-                for(TeleplanS21 r:rs) {
-                	raNo = String.valueOf(r.getId());
-                }
-                if (raNo.equals("")  || raNo == null){
-                    recFlag = 1;
-                    //persist here
-                    TeleplanS21 t = new TeleplanS21();
-                    t.setFileName(filename);
-                    t.setDataCentre(s21.getT_datacenter());
-                    t.setDataSeq(s21.getT_dataseq());
-                    t.setPayment(s21.getT_payment());
-                    t.setLineCode(s21.getT_linecode().toCharArray()[0]);
-                    t.setPayeeNo(s21.getT_payeeno());
-                    t.setMspCtlNo(s21.getT_mspctlno());
-                    t.setPayeeName(s21.getT_payeename());
-                    t.setAmountBilled(s21.getT_amtbilled());
-                    t.setAmountPaid(s21.getT_amtpaid());
-                    t.setBalanceForward(s21.getT_balancefwd());
-                    t.setCheque(s21.getT_cheque());
-                    t.setNewBalance(s21.getT_newbalance());
-                    t.setFiller(s21.getT_filler());
-                    t.setStatus('N');
-                    s21Dao.persist(t);
-                    raNo=t.getId().toString();
-                }
-            }else if (header.equals("S01")){
-                S01 s01 = new S01(nextline);
-                if(recFlag >0){
-                	TeleplanS00 t = new TeleplanS00();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS00Type(s01.t_s00type);
-                	t.setDataCentre(s01.t_datacenter);
-                    t.setDataSeq(s01.t_dataseq);
-                    t.setPayment(s01.t_payment);
-                    t.setLineCode(s01.t_linecode.toCharArray()[0]);
-                    t.setPayeeNo(s01.t_payeeno);
-                    t.setMspCtlNo(s01.t_mspctlno);
-                	t.setPractitionerNo(s01.t_practitionerno);
-                	t.setMspRcdDate(s01.t_msprcddate);
-                    t.setInitial("");
-                    t.setSurname("");
-                    t.setPhn("");
-                    t.setPhnDepNo("");
-                    t.setServiceDate("");
-                    t.setToday("");
-                    t.setBillNoServices("");
-                    t.setBillClafCode("");
-                    t.setBillFeeSchedule("");
-                    t.setBillAmount("");
-                    t.setPaidNoServices("");
-                    t.setPaidClafCode("");
-                    t.setPaidFeeSchedule("");
-                    t.setPaidAmount(s01.t_paidamt);
-                    t.setOfficeNo(s01.t_officeno);
-                    t.setExp1("");
-                    t.setExp2("");
-                    t.setExp3("");
-                    t.setExp4("");
-                    t.setExp5("");
-                    t.setExp6("");
-                    t.setExp7("");
-                    t.setAjc1(s01.t_ajc1);
-                    t.setAja1(s01.t_aja1);
-                    t.setAjc2(s01.t_ajc2);
-                    t.setAja2(s01.t_aja2);
-                    t.setAjc3(s01.t_ajc3);
-                    t.setAja3(s01.t_aja3);
-                    t.setAjc4(s01.t_ajc4);
-                    t.setAja4(s01.t_aja4);
-                    t.setAjc5(s01.t_ajc5);
-                    t.setAja5(s01.t_aja5);
-                    t.setAjc6(s01.t_ajc6);
-                    t.setAja6(s01.t_aja6);
-                    t.setAjc7(s01.t_ajc7);
-                    t.setAja7(s01.t_aja7);
-                    t.setPaidRate(s01.t_paidrate);
-                    t.setPlanRefNo("");
-                    t.setClaimSource("");
-                    t.setPreviousPaidDate("");
-                    t.setIcBcWcb(s01.t_icbcwcb);
-                    t.setInsurerCode(s01.t_insurercode);
-                    t.setFiller(s01.t_filler);
-                    
-                    s00Dao.persist(t);
-                	
-                    mspReconcile.updateStat(MSPReconcile.SETTLED,s01.getBillingMasterNo());
-                }
-            }else if (header.equals("S02")  || header.equals("S00")  || header.equals("S03") ){
-                S02 s02 = new S02(nextline);
-                if (recFlag >0) {
-                    recFlag = recFlag +1;
-                    
-                	TeleplanS00 t = new TeleplanS00();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS00Type(s02.t_s00type);
-                	t.setDataCentre(s02.t_datacenter);
-                    t.setDataSeq(s02.t_dataseq);
-                    t.setPayment(s02.t_payment);
-                    t.setLineCode(s02.t_linecode.toCharArray()[0]);
-                    t.setPayeeNo(s02.t_payeeno);
-                    t.setMspCtlNo(s02.t_mspctlno);
-                	t.setPractitionerNo(s02.t_practitionerno);
-                	t.setMspRcdDate(s02.t_msprcddate);
-                    t.setInitial(s02.t_initial);
-                    t.setSurname(s02.t_surname);
-                    t.setPhn(s02.t_phn);
-                    t.setPhnDepNo(s02.t_phndepno);
-                    t.setServiceDate(s02.t_servicedate);
-                    t.setToday(s02.t_today);
-                    t.setBillNoServices(s02.t_billnoservices);
-                    t.setBillClafCode(s02.t_billclafcode);
-                    t.setBillFeeSchedule(s02.t_billfeeschedule);
-                    t.setBillAmount(s02.t_billamt);
-                    t.setPaidNoServices(s02.t_paidnoservices);
-                    t.setPaidClafCode(s02.t_paidclafcode);
-                    t.setPaidFeeSchedule(s02.t_paidfeeschedule);
-                    t.setPaidAmount(s02.t_paidamt);
-                    t.setOfficeNo(s02.t_officeno);
-                    t.setExp1(s02.t_exp1);
-                    t.setExp2(s02.t_exp2);
-                    t.setExp3(s02.t_exp3);
-                    t.setExp4(s02.t_exp4);
-                    t.setExp5(s02.t_exp5);
-                    t.setExp6(s02.t_exp6);
-                    t.setExp7(s02.t_exp7);
-                    t.setAjc1(s02.t_ajc1);
-                    t.setAja1(s02.t_aja1);
-                    t.setAjc2(s02.t_ajc2);
-                    t.setAja2(s02.t_aja2);
-                    t.setAjc3(s02.t_ajc3);
-                    t.setAja3(s02.t_aja3);
-                    t.setAjc4(s02.t_ajc4);
-                    t.setAja4(s02.t_aja4);
-                    t.setAjc5(s02.t_ajc5);
-                    t.setAja5(s02.t_aja5);
-                    t.setAjc6(s02.t_ajc6);
-                    t.setAja6(s02.t_aja6);
-                    t.setAjc7(s02.t_ajc7);
-                    t.setAja7(s02.t_aja7);
-                    t.setPaidRate("");
-                    t.setPlanRefNo(s02.t_planrefno);
-                    t.setClaimSource(s02.t_claimsource);
-                    t.setPreviousPaidDate(s02.t_previouspaiddate);
-                    t.setIcBcWcb(s02.t_icbcwcb);
-                    t.setInsurerCode(s02.t_insurercode);
-                    t.setFiller(s02.t_filler);
-                    
-                    s00Dao.persist(t);
-                   
-                  
-                    if(header.equals("S02")){ //header.compareTo("S00") == 0 || header.compareTo("S03") == 0){
-                        mspReconcile.updateStat(MSPReconcile.PAIDWITHEXP,s02.getBillingMasterNo());
-                    }else if (header.equals("S03")){
-                        mspReconcile.updateStat(MSPReconcile.REFUSED,s02.getBillingMasterNo());
-                    }else if (header.equals("S00")){
-                        mspReconcile.updateStat(MSPReconcile.DATACENTERCHANGED,s02.getBillingMasterNo());
-                    }
-                }
-            }else if (header.equals("S04")){
-                S04 s04 = new S04(nextline);
-                if (recFlag >0) {
-                	TeleplanS00 t = new TeleplanS00();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS00Type(s04.t_s00type);
-                	t.setDataCentre(s04.t_datacenter);
-                    t.setDataSeq(s04.t_dataseq);
-                    t.setPayment(s04.t_payment);
-                    t.setLineCode(s04.t_linecode.toCharArray()[0]);
-                    t.setPayeeNo(s04.t_payeeno);
-                    t.setMspCtlNo(s04.t_mspctlno);
-                    
-                	t.setPractitionerNo(s04.t_practitionerno);
-                	t.setMspRcdDate("");
-                    t.setInitial("");
-                    t.setSurname("");
-                    t.setPhn("");
-                    t.setPhnDepNo("");
-                    t.setServiceDate("");
-                    t.setToday("");
-                    t.setBillNoServices("");
-                    t.setBillClafCode("");
-                    t.setBillFeeSchedule("");
-                    t.setBillAmount("");
-                    t.setPaidNoServices("");
-                    t.setPaidClafCode("");
-                    t.setPaidFeeSchedule("");
-                    t.setPaidAmount("");
-                    t.setOfficeNo(s04.t_officeno);
-                    t.setExp1(s04.t_exp1);
-                    t.setExp2(s04.t_exp2);
-                    t.setExp3(s04.t_exp3);
-                    t.setExp4(s04.t_exp4);
-                    t.setExp5(s04.t_exp5);
-                    t.setExp6(s04.t_exp6);
-                    t.setExp7(s04.t_exp7);
-                    t.setAjc1("");
-                    t.setAja1("");
-                    t.setAjc2("");
-                    t.setAja2("");
-                    t.setAjc3("");
-                    t.setAja3("");
-                    t.setAjc4("");
-                    t.setAja4("");
-                    t.setAjc5("");
-                    t.setAja5("");
-                    t.setAjc6("");
-                    t.setAja6("");
-                    t.setAjc7("");
-                    t.setAja7("");
-                    t.setPaidRate("");
-                    t.setPlanRefNo("");
-                    t.setClaimSource("");
-                    t.setPreviousPaidDate("");
-                    t.setIcBcWcb(s04.t_icbcwcb);
-                    t.setInsurerCode(s04.t_insurercode);
-                    t.setFiller(s04.t_filler);
-                    
-                    s00Dao.persist(t);
-                  
-           
-                    mspReconcile.updateStat(MSPReconcile.HELD,s04.getBillingMasterNo());
-                }
-            } else if (header.equals("S23") ||header.equals("S24")){
-                S23 s23 = new S23(nextline);
-                if (recFlag >0) {
-                	TeleplanS23 t = new TeleplanS23();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS23Type(s23.t_s23type);
-                	t.setDataCentre(s23.t_datacenter);
-                	t.setDataSeq(s23.t_dataseq);
-                	t.setPayment(s23.t_payment);
-                	t.setLineCode(s23.t_linecode.charAt(0));
-                	t.setMspCtlNo(s23.t_mspctlno);
-                	t.setAjc(s23.t_ajc);
-                	t.setAji(s23.t_aji);
-                	t.setAjm(s23.t_ajm);
-                	t.setCalcMethod(s23.t_calcmethod);
-                	t.setrPercent(s23.t_rpercent);
-                	t.setoPercent(s23.t_opercent);
-                	t.setgAmount(s23.t_gamount);
-                	t.setrAmount(s23.t_ramount);
-                	t.setoAmount(s23.t_oamount);
-                	t.setBalanceForward(s23.t_balancefwd);
-                	t.setAdjMade(s23.t_adjmade);
-                	t.setAdjOutstanding(s23.t_adjoutstanding);
-                	t.setFiller(s23.t_filler);
-                	
-                	s23Dao.persist(t);
-
-                }
-            } else if (header.equals("S25")){
-                S25 s25 = new S25(nextline);
-                if (recFlag >0) {
-                	TeleplanS25 t = new TeleplanS25();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS25Type(s25.t_s25type);
-                	t.setDataCentre(s25.t_datacenter);
-                	t.setDataSeq(s25.t_dataseq);
-                	t.setPayment(s25.t_payment);
-                	t.setLineCode(s25.t_linecode.charAt(0));
-                	t.setPayeeNo(s25.t_payeeno);
-                	t.setMspCtlNo(s25.t_mspctlno);
-                	t.setPractitionerNo(s25.t_practitionerno);
-                	t.setMessage(s25.t_message);
-                	t.setFiller(s25.t_filler);
-                	
-                	s25Dao.persist(t);
-                }
-            } else if (header.equals("S22")){
-                S22 s22 = new S22(nextline);
-                if (recFlag >0) {
-                	TeleplanS22 t = new TeleplanS22();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setS22Type(s22.t_s22type);
-                	t.setDataCentre(s22.t_datacenter);
-                	t.setDataSeq(s22.t_dataseq);
-                	t.setPayment(s22.t_payment);
-                	t.setLineCode(s22.t_linecode.charAt(0));
-                	t.setPayeeNo(s22.t_payeeno);
-                	t.setMspCtlNo(s22.t_mspctlno);
-                	t.setPractitionerNo(s22.t_practitionerno);
-                	t.setPractitionerName(s22.t_practitionername);
-                	t.setAmountBilled(s22.t_amtbilled);
-                	t.setAmountPaid(s22.t_amtpaid);
-                	t.setFiller(s22.t_filler);
-                	s22Dao.persist(t);
-                }
-                
-            /*
-             *C12 records are error records. There are three ways that the program will come to here
-             *1.File with just C12 records (besides all the VCR ones at the top)
-             *     one record is added to teleplanS21
-             *2.File with C12 records at the top before it gets to a S21 record
-             *     two records are added to teleplanS21, one with a status of D ( the one from the C12 records ) and the other with N
-             *3.File with C12 records at the bottom.  
-             *     one record with a status of N
-             *
-             */    
-            }else if (header.equals("C12")){
-                C12 c12 = new C12(nextline);
-                if (raNo.equals("")){
-                	
-                	List<TeleplanS21> rs = s21Dao.findByFilenamePaymentPayeeNo(filename,"","");
-                    for(TeleplanS21 r:rs) {
-                    	raNo = String.valueOf(r.getId());
-                    }
-                    
-                    if (raNo.compareTo("") == 0 || raNo == null){
-                        recFlag = 1;
-                        
-                        TeleplanS21 t = new TeleplanS21();
-                        t.setFileName(filename);
-                        t.setDataCentre(c12.getT_datacenter());
-                        t.setDataSeq(c12.getT_dataseq());
-                        t.setPayment("");
-                        t.setPayeeNo(c12.getT_payeeno());
-                        t.setMspCtlNo("");
-                        t.setPayeeName("");
-                        t.setAmountBilled("");
-                        t.setAmountPaid("");
-                        t.setBalanceForward("");
-                        t.setCheque("");
-                        t.setNewBalance("");
-                        t.setFiller("");
-                        t.setStatus('D');
-                        s21Dao.persist(t);
-                        raNo = t.getId().toString();
-                    }
-                }  // This will be +1 if the records are at the bottom
-                if (recFlag > 0){
-                	TeleplanC12 t = new TeleplanC12();
-                	t.setS21Id(Integer.parseInt(raNo));
-                	t.setFileName(filename);
-                	t.setDataCentre(c12.getT_datacenter());
-                	t.setDataSeq(c12.getT_dataseq());
-                	t.setPayeeNo(c12.getT_payeeno());
-                	t.setPractitionerNo(c12.getT_practitionerno());
-                	t.setExp1(c12.getT_exp1());
-                	t.setExp2(c12.getT_exp2());
-                	t.setExp3(c12.getT_exp3());
-                	t.setExp4(c12.getT_exp4());
-                	t.setExp5(c12.getT_exp5());
-                	t.setExp6(c12.getT_exp6());
-                	t.setExp7(c12.getT_exp7());
-                	t.setOfficeFolioClaimNo(c12.getT_officefolioclaimno());
-                	t.setFiller(c12.getT_filler());
-                	
-                	c12Dao.persist(t);
-                	
-                    mspReconcile.updateStat(MSPReconcile.REJECTED,c12.getBillingMasterNo());
-                }
-                forwardPage = "C12";
-           
-           }else if (header.equals("M01")){
-            
-           }
-            
-        }
-        
-        
-        
-        
-        return mapping.findForward(forwardPage);
     }
 }
     
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/MSP/MspErrorCodes.java b/src/main/java/oscar/oscarBilling/ca/bc/MSP/MspErrorCodes.java
index 0464bc76e9..c3d459757e 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/MSP/MspErrorCodes.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/MSP/MspErrorCodes.java
@@ -45,11 +45,9 @@ public class MspErrorCodes extends Properties{
    /** Creates a new instance of MspErrorCodes */
    public MspErrorCodes() {
       super();                  
-      try {
-         InputStream is = this.getClass().getClassLoader().getResourceAsStream("oscar/oscarBilling/ca/bc/MSP/mspEditCodes.properties");                  
+      try {                  
          if (OscarProperties.getInstance().getProperty("msp_error_codes") != null){
             String filename = OscarProperties.getInstance().getProperty("msp_error_codes");
-            is = new FileInputStream(filename) ;
          }else{
              File file = new File(OscarProperties.getInstance().getProperty("DOCUMENT_DIR"),"msp_error_codes.properties");
              if (file != null && file.exists()){
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanCodesManager.java b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanCodesManager.java
index 406fc59563..0006e06cba 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanCodesManager.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanCodesManager.java
@@ -59,45 +59,6 @@ REM075 **          Description          This is a Title description   **
 REM076 **                                                             **        
      */
     public List parse(File f) throws Exception{
-       BufferedReader buff = new BufferedReader(new FileReader(f));
-
-       String line = null;
-       MiscUtils.getLogger().debug("start while" );
-
-       LinkedList list = new LinkedList();
-       while ((line = buff.readLine()) != null) {
-         //01 - 05 Fee Item Code  X(5)  Fee for Service Fee Item      **                      
-         //06 - 12 Fee Schedule   N(7)  Fee for Service Amount        **                      
-         //27 - 76 Fee Item       X(50) 
-
-           boolean parse = true;
-           if (line == null ){
-               parse = false;
-           }
-           if(line.startsWith("REM") ){
-               parse = false;
-           }
-           if( line.startsWith("#")){
-               parse = false;
-           }
-        
-           if (parse){
-              String code = line.substring(0,5);
-              String fee = line.substring(5,12);
-              double newDoub = (Double.parseDouble(fee))/100;                                             
-              BigDecimal newPriceDec = new BigDecimal(newDoub).setScale(2, BigDecimal.ROUND_HALF_UP);
-              String desc = line.substring(26,76);
-              HashMap h = new HashMap();
-              
-              h.put("code",code);
-              h.put("fee",newPriceDec);
-              h.put("desc",desc);
-              list.add(h);
-              
-           }
-       }
-       MiscUtils.getLogger().debug("end while");
-       return list;
     }
     
     
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanResponse.java b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanResponse.java
index 70dcc63c0f..f64be0cd65 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanResponse.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanResponse.java
@@ -59,40 +59,35 @@ public class TeleplanResponse {
 	
 	
     void processResponseStream(InputStream in){
-        try {
-            String directory = OscarProperties.getInstance().getProperty("DOCUMENT_DIR","./");
-            double randNum= Math.random();
-            String tempFile = directory+"teleplan.msp"+randNum;
+        try (BufferedWriter out = new BufferedWriter(new FileWriter(tempFile))) {
+            String directory = OscarProperties.getInstance().getProperty("DOCUMENT_DIR", "./");
+            double randNum = Math.random();
+            String tempFile = directory + "teleplan.msp" + randNum;
             BufferedReader bin = new BufferedReader(new InputStreamReader(in));
-            BufferedWriter out = new BufferedWriter(new FileWriter(tempFile));
-
             String str = "";
             String lastLine = null;
             while ((str = bin.readLine()) != null) {
-           //write str to temp file
+                // write str to temp file
                 lineCount++;
-                out.write(str+"\n");
+                out.write(str + "\n");
                 log.debug(str);
                 lastLine = new String(str);
-            }
+            } 
             out.close();
             bin.close();
             lineCount--;
             processLastLine(lastLine);
-            //If it has a filename same to
-            
-            if (this.getFilename() != null && !this.getFilename().trim().equals("")){
-               File file = new File(tempFile); 
-               realFilename = "teleplan"+this.getFilename()+randNum;
-               File file2 = new File(directory+realFilename);
-               boolean success = file.renameTo(file2);
+            // If it has a filename same to
+            if (this.getFilename() != null && !this.getFilename().trim().equals("")) {
+                File file = new File(tempFile);
+                realFilename = "teleplan" + this.getFilename() + randNum;
+                File file2 = new File(directory + realFilename);
+                boolean success = file.renameTo(file2);
                 if (!success) {
-                   log.error("File was not successfully renamed");
+                    log.error("File was not successfully renamed");
                     // 
                 }
             }
-            
-           
         } catch (IOException e) {
             MiscUtils.getLogger().error("Error", e);
         }
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanService.java b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanService.java
index 77459fadaa..d78a73ed10 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanService.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/Teleplan/TeleplanService.java
@@ -96,18 +96,6 @@ public class TeleplanService {
         String e = "VS1"+datacenter+"9999999V6242OSCAR_MCMASTER           V1.1      20030930OSCAR MCMASTER                          (905) 575-1300                                                                                   ";
 
         File getSequenceFile =  File.createTempFile("oscarseq","fil");
-        BufferedWriter out = new BufferedWriter(new FileWriter(getSequenceFile));
-        out.write(e);
-        out.close();
-       
-        TeleplanResponse tr = tAPI.putMSPFile(getSequenceFile);
-        getSequenceFile.delete();
-        log.debug(tr.toString());
-        
-        if(tr.isSuccess()){
-            return 0;  // what are the chances!
-        }   
-        return findExpectedSequenceNumber(tr.getMsgs());
      }
     
     //////
diff --git a/src/main/java/oscar/oscarBilling/ca/bc/pageUtil/ManageTeleplanAction.java b/src/main/java/oscar/oscarBilling/ca/bc/pageUtil/ManageTeleplanAction.java
index d61fb68edc..48a9cf10da 100644
--- a/src/main/java/oscar/oscarBilling/ca/bc/pageUtil/ManageTeleplanAction.java
+++ b/src/main/java/oscar/oscarBilling/ca/bc/pageUtil/ManageTeleplanAction.java
@@ -136,47 +136,6 @@ public class ManageTeleplanAction extends DispatchAction {
            log.debug("real filename "+tr.getRealFilename());
 
            File file = tr.getFile();
-           BufferedReader buff = new BufferedReader(new FileReader(file));
-
-           String line = null;
-           Properties dxProp = new Properties();
-           while ((line = buff.readLine()) != null) {
-               if (!line.startsWith("REM")){
-                   log.debug(line.substring(0,5).trim()+"="+line.substring(4).trim());
-                   String code = line.substring(0,5).trim();
-                   String desc = line.substring(4).trim();
-
-                   if(dxProp.containsKey(code)){//Some of the lines in file double up for a longer desc.
-                       String dxDesc = dxProp.getProperty(code);
-                       dxDesc += " " +desc;
-                       dxProp.setProperty(code, dxDesc);
-                   }else{
-                       dxProp.put(code, desc);
-                   }
-
-               }
-           }
-
-           Enumeration dxKeys = dxProp.keys();
-           while(dxKeys.hasMoreElements()){
-               String code = (String) dxKeys.nextElement();
-               String desc = dxProp.getProperty(code);
-
-                   List<DiagnosticCode> dxList = bDx.getByDxCode(code);
-                   if (dxList == null || dxList.size() == 0){ //New Code
-                	   DiagnosticCode dxCode = new DiagnosticCode();
-                        log.debug("Adding new code "+code+" desc : "+desc);
-                        dxCode.setDiagnosticCode(code);
-                        dxCode.setDescription(desc);
-                        dxCode.setRegion("BC");
-                        dxCode.setStatus("A");
-                        bDx.persist(dxCode);
-                   }
-
-
-
-           }
-           return mapping.findForward("success");
     }
 
     /*
@@ -199,62 +158,6 @@ public class ManageTeleplanAction extends DispatchAction {
            log.debug("real filename "+tr.getRealFilename());
 
            File file = tr.getFile();
-           BufferedReader buff = new BufferedReader(new FileReader(file));
-
-           String line = null;
-
-           boolean start= false;
-           StringBuilder sb = new StringBuilder();
-           MspErrorCodes errorCodes = new MspErrorCodes();
-
-           while ((line = buff.readLine()) != null) {
-               line = line.trim();
-               if (line != null && line.startsWith("--")){
-                   start = true;
-                   continue;
-               }
-               if (start){
-                   if (line.trim().equals("")){
-                       String togo = sb.toString();
-                       sb = new StringBuilder();
-                       if (!togo.equals("")){
-                          errorCodes.put(togo.substring(0,2), togo.substring(4));
-                       }
-                   }else{
-                       sb.append(line);
-                   }
-               }
-           }
-
-           if (sb.length() > 0){ //still left in the buffer
-               String togo = sb.toString();
-               int i = togo.lastIndexOf("#TID");
-               if (i != -1){
-                  togo = togo.substring(0,i);
-               }
-
-               if (!togo.equals("")){
-                  errorCodes.put(togo.substring(0,2), togo.substring(4));
-               }
-           }
-
-           errorCodes.save();
-
-           //...I guess pass the errors back to jsp
-           StringBuilder errorStr = new StringBuilder("");
-           for (Entry error: errorCodes.entrySet()) {
-               errorStr.append("Error codes: \n");
-               errorStr.append(error.getKey());
-               errorStr.append(" -- ");
-               errorStr.append(error.getValue());
-               errorStr.append("\n<br/>");
-           }
-           request.setAttribute("error", errorStr);
-           //---------------------------------------------------------------------------
-
-           log.info("Msp error codes "+errorCodes.size());
-           log.debug(sb.toString());
-           return mapping.findForward("success");
     }
 
 
@@ -505,24 +408,6 @@ public class ManageTeleplanAction extends DispatchAction {
            String realFile = tr.getRealFilename();
            if (realFile != null && !realFile.trim().equals("")){
                File file = tr.getFile();
-               BufferedReader buff = new BufferedReader(new FileReader(file));
-               StringBuilder sb = new StringBuilder();
-               String line = null;
-
-               while ((line = buff.readLine()) != null) {
-
-                  if (line != null && line.startsWith("ELIG_ON_DOS:")){
-                      String el = line.substring(12).trim();
-                      if(el.equalsIgnoreCase("no")){
-                        request.setAttribute("Result","Failure");
-
-                        line = "<span style=\"color:red; font-weight:bold;\">"+line+"</span>";
-                      }
-                  }
-                  sb.append(line);
-                  sb.append("<br>");
-               }
-               request.setAttribute("Msgs", sb.toString());//tr.getMsgs());
 
            }else{
                request.setAttribute("Msgs", tr.getMsgs());
diff --git a/src/main/java/oscar/oscarBilling/ca/on/OHIP/ExtractBean.java b/src/main/java/oscar/oscarBilling/ca/on/OHIP/ExtractBean.java
index 608f43217d..a97e6d7c58 100755
--- a/src/main/java/oscar/oscarBilling/ca/on/OHIP/ExtractBean.java
+++ b/src/main/java/oscar/oscarBilling/ca/on/OHIP/ExtractBean.java
@@ -515,13 +515,10 @@ public class ExtractBean implements Serializable {
 
     // write OHIP file to it
     public void writeFile(String value1) {
-        try {
+        try (FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);PrintStream p = new PrintStream(out)) {
             String home_dir;
             home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
-            FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);
-            PrintStream p = new PrintStream(out);
             p.println(value1);
-
             p.close();
             out.close();
         } catch (Exception e) {
@@ -532,14 +529,10 @@ public class ExtractBean implements Serializable {
     // get path from the property file, e.g.
     // OscarDocument/.../billing/download/, and then write to it
     public void writeHtml(String htmlvalue1) {
-        try {
+        try (FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);PrintStream p1 = new PrintStream(out1)) {
             String home_dir1;
             home_dir1 = OscarProperties.getInstance().getProperty("HOME_DIR");
-
-            FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);
-            PrintStream p1 = new PrintStream(out1);
             p1.println(htmlvalue1);
-
             p1.close();
             out1.close();
         } catch (Exception e) {
diff --git a/src/main/java/oscar/oscarBilling/ca/on/OHIP/ScheduleOfBenefitsUploadAction.java b/src/main/java/oscar/oscarBilling/ca/on/OHIP/ScheduleOfBenefitsUploadAction.java
index 0083ece9ab..468dd9b21f 100644
--- a/src/main/java/oscar/oscarBilling/ca/on/OHIP/ScheduleOfBenefitsUploadAction.java
+++ b/src/main/java/oscar/oscarBilling/ca/on/OHIP/ScheduleOfBenefitsUploadAction.java
@@ -127,44 +127,36 @@ public class ScheduleOfBenefitsUploadAction extends Action {
 	public static boolean saveFile(InputStream stream,String filename ){
 		String retVal = null;        
 		boolean isAdded = true;
-
-		try {
-			//retrieve the file data
-			//ByteArrayOutputStream baos = new ByteArrayOutputStream();
-			//InputStream stream = file.getInputStream();
+		try (// write the file to the file specified
+		OutputStream bos = new FileOutputStream(retVal)) {
+			// retrieve the file data
+			// ByteArrayOutputStream baos = new ByteArrayOutputStream();
+			// InputStream stream = file.getInputStream();
 			OscarProperties props = OscarProperties.getInstance();
+			// properties must exist
+			String place = props.getProperty("DOCUMENT_DIR");
+			if (!place.endsWith("/"))
+				place = new StringBuilder(place).insert(place.length(), "/").toString();
 
-			//properties must exist            
-			String place= props.getProperty("DOCUMENT_DIR");
-
-			if(!place.endsWith("/"))
-				place = new StringBuilder(place).insert(place.length(),"/").toString();
-			retVal = place+"LabUpload."+filename+"."+(new Date()).getTime();
+			retVal = place + "LabUpload." + filename + "." + new Date().getTime();
 			MiscUtils.getLogger().debug(retVal);
-			//write the file to the file specified
-			OutputStream bos = new FileOutputStream(retVal);
 			int bytesRead = 0;
-			//byte[] buffer = file.getFileData();
-			//while ((bytesRead = stream.read(buffer)) != -1){
-			//   bos.write(buffer, 0, bytesRead);            
-			while ((bytesRead = stream.read()) != -1){
+			// byte[] buffer = file.getFileData();
+			// while ((bytesRead = stream.read(buffer)) != -1){
+			// bos.write(buffer, 0, bytesRead);
+			while ((bytesRead = stream.read()) != -1) {
 				bos.write(bytesRead);
-			}
+			} 
 			bos.close();
-
-			//close the stream
+			// close the stream
 			stream.close();
-		}
-		catch (FileNotFoundException fnfe) {
-
+		} catch (FileNotFoundException fnfe) {
 			MiscUtils.getLogger().debug("File not found");
-			MiscUtils.getLogger().error("Error", fnfe);            
-			return isAdded=false;
-
-		}
-		catch (IOException ioe) {
+			MiscUtils.getLogger().error("Error", fnfe);
+			return isAdded = false;
+		} catch (IOException ioe) {
 			MiscUtils.getLogger().error("Error", ioe);
-			return isAdded=false;
+			return isAdded = false;
 		}
 
 		return isAdded;
diff --git a/src/main/java/oscar/oscarBilling/ca/on/data/JdbcBillingCreateBillingFile.java b/src/main/java/oscar/oscarBilling/ca/on/data/JdbcBillingCreateBillingFile.java
index 9489f58a77..856d5a99c8 100644
--- a/src/main/java/oscar/oscarBilling/ca/on/data/JdbcBillingCreateBillingFile.java
+++ b/src/main/java/oscar/oscarBilling/ca/on/data/JdbcBillingCreateBillingFile.java
@@ -954,13 +954,10 @@ public class JdbcBillingCreateBillingFile {
 
 	// write OHIP file to it
 	public void writeFile(String value1) {
-		try {
+		try (FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);PrintStream p = new PrintStream(out)) {
 			String home_dir;
 			home_dir = OscarProperties.getInstance().getProperty("HOME_DIR");
-			FileOutputStream out = new FileOutputStream(home_dir + ohipFilename);
-			PrintStream p = new PrintStream(out);
 			p.println(value1);
-
 			p.close();
 			out.close();
 		} catch (Exception e) {
@@ -971,18 +968,14 @@ public class JdbcBillingCreateBillingFile {
 	// get path from the property file, e.g.
 	// OscarDocument/.../billing/download/, and then write to it
 	public void writeHtml(String htmlvalue1) {
-		try {
+		try (FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);PrintStream p1 = new PrintStream(out1)) {
 			String home_dir1;
 			home_dir1 = OscarProperties.getInstance().getProperty("HOME_DIR");
-
-			FileOutputStream out1 = new FileOutputStream(home_dir1 + htmlFilename);
-			PrintStream p1 = new PrintStream(out1);
 			p1.println(htmlvalue1);
-
 			p1.close();
 			out1.close();
 		} catch (Exception e) {
-			_logger.error("Write HTML File Error!!!",e);
+			_logger.error("Write HTML File Error!!!", e);
 		}
 	}
 
diff --git a/src/main/java/oscar/oscarBilling/ca/on/pageUtil/BillingDocumentErrorReportUploadAction.java b/src/main/java/oscar/oscarBilling/ca/on/pageUtil/BillingDocumentErrorReportUploadAction.java
index f52b7f60f1..b0cadaf474 100644
--- a/src/main/java/oscar/oscarBilling/ca/on/pageUtil/BillingDocumentErrorReportUploadAction.java
+++ b/src/main/java/oscar/oscarBilling/ca/on/pageUtil/BillingDocumentErrorReportUploadAction.java
@@ -121,36 +121,30 @@ public class BillingDocumentErrorReportUploadAction extends Action {
 	public static boolean saveFile(FormFile file) {
 		String retVal = null;
 		boolean isAdded = true;
-
-		try {
+		try (// write the file to the file specified
+		OutputStream bos = new FileOutputStream(retVal)) {
 			// retrieve the file data
 			InputStream stream = file.getInputStream();
 			OscarProperties props = OscarProperties.getInstance();
-
 			// properties must exist
 			String place = props.getProperty("DOCUMENT_DIR");
-
 			if (!place.endsWith("/"))
 				place = new StringBuilder(place).insert(place.length(), "/").toString();
+
 			retVal = place + file.getFileName();
 			MiscUtils.getLogger().debug(retVal);
-			// write the file to the file specified
-			OutputStream bos = new FileOutputStream(retVal);
 			int bytesRead = 0;
 			byte[] buffer = file.getFileData();
 			while ((bytesRead = stream.read(buffer)) != -1) {
 				bos.write(buffer, 0, bytesRead);
-			}
+			} 
 			bos.close();
-
 			// close the stream
 			stream.close();
 			FileUtils.copyFileToDirectory(new File(retVal), new File(OscarProperties.getInstance().getProperty("ONEDT_INBOX")));
-			
 		} catch (FileNotFoundException e) {
 			MiscUtils.getLogger().error("File not found", e);
 			return isAdded = false;
-
 		} catch (IOException ioe) {
 			MiscUtils.getLogger().error("Error", ioe);
 			return isAdded = false;
@@ -170,59 +164,57 @@ public class BillingDocumentErrorReportUploadAction extends Action {
 	 */
 	private boolean getData(LoggedInInfo loggedInInfo, String fileName, String pathDir, HttpServletRequest request) {
 		boolean isGot = false;
-
-		try {
+		try (FileInputStream file = new FileInputStream(filepath + fileName)) {
 			OscarProperties props = OscarProperties.getInstance();
 			// properties must exist
 			String filepath = props.getProperty(pathDir);
-			boolean bNewBilling = props.getProperty("isNewONbilling", "").equals("true") ? true : false;
+			boolean bNewBilling = (props.getProperty("isNewONbilling", "").equals("true")) ? true : false;
 			if (!filepath.endsWith("/"))
 				filepath = new StringBuilder(filepath).insert(filepath.length(), "/").toString();
 
-			FileInputStream file = new FileInputStream(filepath + fileName);
 			MiscUtils.getLogger().debug("file path: " + filepath + fileName);
 			// Assign associated report Name
 			ArrayList<String> messages = new ArrayList<String>();
 			String ReportName = "";
-			
 			if (fileName.substring(0, 1).compareTo("E") == 0 || fileName.substring(0, 1).compareTo("F") == 0) {
 				ReportName = "Claims Error Report";
 				BillingClaimsErrorReportBeanHandler hd = generateReportE(file, bNewBilling, fileName);
 				request.setAttribute("claimsErrors", hd);
 				isGot = hd.verdict;
-			}
-			else if (fileName.substring(0, 1).compareTo("B") == 0) {
-				ReportName = "Claim Batch Acknowledgement Report";
-				BillingClaimBatchAcknowledgementReportBeanHandler hd = generateReportB(file);
-				request.setAttribute("batchAcks", hd);
-				isGot = hd.verdict;
-			}
-			else if (fileName.substring(0, 1).compareTo("X") == 0) {
-				ReportName = "Claim File Rejection Report";
-				messages = generateReportX(file);
-				request.setAttribute("messages", messages);
-				isGot = reportXIsGenerated;
-			}
-			else if (fileName.substring(0, 1).compareTo("R") == 0) {
-				ReportName = "EDT OBEC Output Specification";
-				BillingEDTOBECOutputSpecificationBeanHandler hd = generateReportR(loggedInInfo, file);
-				request.setAttribute("outputSpecs", hd);
-				isGot = hd.verdict;
-			}
-			else if (fileName.substring(0,1).compareTo("L") == 0) {
-				ReportName = "OUTSIDE USE REPORT";
-				request.setAttribute("backupfilepath", filepath);
-				request.setAttribute("filename", fileName);
-				isGot = true;
-			}
-			
+			} else
+				if (fileName.substring(0, 1).compareTo("B") == 0) {
+					ReportName = "Claim Batch Acknowledgement Report";
+					BillingClaimBatchAcknowledgementReportBeanHandler hd = generateReportB(file);
+					request.setAttribute("batchAcks", hd);
+					isGot = hd.verdict;
+				} else
+					if (fileName.substring(0, 1).compareTo("X") == 0) {
+						ReportName = "Claim File Rejection Report";
+						messages = generateReportX(file);
+						request.setAttribute("messages", messages);
+						isGot = reportXIsGenerated;
+					} else
+						if (fileName.substring(0, 1).compareTo("R") == 0) {
+							ReportName = "EDT OBEC Output Specification";
+							BillingEDTOBECOutputSpecificationBeanHandler hd = generateReportR(loggedInInfo, file);
+							request.setAttribute("outputSpecs", hd);
+							isGot = hd.verdict;
+						} else
+							if (fileName.substring(0, 1).compareTo("L") == 0) {
+								ReportName = "OUTSIDE USE REPORT";
+								request.setAttribute("backupfilepath", filepath);
+								request.setAttribute("filename", fileName);
+								isGot = true;
+							}
+
+
+
+
 			request.setAttribute("ReportName", ReportName);
 		} catch (FileNotFoundException fnfe) {
-
 			MiscUtils.getLogger().debug("File not found");
 			MiscUtils.getLogger().error("Error", fnfe);
 			return isGot = false;
-
 		}
 		return isGot;
 	}
diff --git a/src/main/java/oscar/oscarDemographic/pageUtil/DemographicExportAction4.java b/src/main/java/oscar/oscarDemographic/pageUtil/DemographicExportAction4.java
index 3a95dae28f..91cd390cba 100644
--- a/src/main/java/oscar/oscarDemographic/pageUtil/DemographicExportAction4.java
+++ b/src/main/java/oscar/oscarDemographic/pageUtil/DemographicExportAction4.java
@@ -2699,44 +2699,6 @@ public class DemographicExportAction4 extends Action {
 
 	File makeReadMe(ArrayList<File> fs) throws IOException {
 		File readMe = new File(fs.get(0).getParentFile(), "ReadMe.txt");
-		BufferedWriter out = new BufferedWriter(new FileWriter(readMe));
-		out.write("Physician Group					: ");
-		out.write(new ClinicData().getClinicName());
-		out.newLine();
-		out.write("CMS Vendor, Product & Version	  : ");
-		String vendor = oscarProperties.getProperty("Vendor_Product");
-		if (StringUtils.empty(vendor)) {
-			exportError.add("Error! Vendor_Product not defined in oscar.properties");
-		} else {
-			out.write(vendor);
-		}
-		out.newLine();
-		out.write("Application Support Contact		: ");
-		String support = oscarProperties.getProperty("Support_Contact");
-		if (StringUtils.empty(support)) {
-			exportError.add("Error! Support_Contact not defined in oscar.properties");
-		} else {
-			out.write(support);
-		}
-		out.newLine();
-		out.write("Date and Time stamp				: ");
-		out.write(UtilDateUtilities.getToday("yyyy-MM-dd hh:mm:ss aa"));
-		out.newLine();
-		out.write("Total patients files extracted	 : ");
-		out.write(String.valueOf(fs.size()));
-		out.newLine();
-		out.write("Number of errors				   : ");
-		out.write(String.valueOf(exportError.size()));
-		if (exportError.size()>0) out.write(" (See ExportEvent.log for detail)");
-		out.newLine();
-		out.write("Patient ID range				   : ");
-		out.write(getIDInExportFilename(fs.get(0).getName()));
-		out.write("-");
-		out.write(getIDInExportFilename(fs.get(fs.size()-1).getName()));
-		out.newLine();
-		out.close();
-	
-		return readMe;
 	}
 
 	File makeExportLog(File dir) throws IOException {
@@ -2779,58 +2741,6 @@ public class DemographicExportAction4 extends Action {
 			}
 
 			File exportLog = new File(dir, "ExportEvent.log");
-			BufferedWriter out = new BufferedWriter(new FileWriter(exportLog));
-			int tableWidth = 0;
-			for (int i=0; i<keyword.length; i++) {
-				for (int j=0; j<keyword[i].length; j++) {
-					out.write(keyword[i][j]+" |");
-					if (keyword[i][j].trim().equals("Report")) j++;
-					if (i==1) tableWidth += keyword[i][j].length()+2;
-				}
-				out.newLine();
-			}
-			out.write(fillUp("",'-',tableWidth)); out.newLine();
-
-			//general log data
-			if (exportNo==0) exportNo = 1;
-			for (int i=0; i<exportNo; i++) {
-
-				for (int j=0; j<keyword[0].length; j++) {
-					String category = keyword[0][j].trim();
-					if (category.contains("Report")) category = keyword[1][j].trim();
-					Integer occurs = entries.get(category+i);
-					if (occurs==null) occurs = 0;
-					out.write(fillUp(occurs.toString(), ' ', keyword[1][j].length()));
-					out.write(" |");
-				}
-				out.newLine();
-				out.write(fillUp("",'-',tableWidth)); out.newLine();
-			}
-			out.newLine();
-			out.newLine();
-			out.newLine();
-
-			//error log
-			out.write("Errors/Notes");
-			out.newLine();
-			out.write(fillUp("",'-',tableWidth)); out.newLine();
-
-			//write any error that has occurred
-			if (exportError.size()>0) {
-				out.write(exportError.get(0));
-				out.newLine();
-				for (int j=1; j<exportError.size(); j++) {
-					out.write("	 ");
-					out.write(exportError.get(j));
-					out.newLine();
-				}
-				out.write(fillUp("",'-',tableWidth)); out.newLine();
-			}
-			out.write(fillUp("",'-',tableWidth)); out.newLine();
-
-			out.close();
-			exportNo = 0;
-			return exportLog;
 	}
 
 
diff --git a/src/main/java/oscar/oscarDemographic/pageUtil/ImportDemographicDataAction4.java b/src/main/java/oscar/oscarDemographic/pageUtil/ImportDemographicDataAction4.java
index 9063384485..15fa651525 100644
--- a/src/main/java/oscar/oscarDemographic/pageUtil/ImportDemographicDataAction4.java
+++ b/src/main/java/oscar/oscarDemographic/pageUtil/ImportDemographicDataAction4.java
@@ -298,68 +298,71 @@ import oscar.util.UtilDateUtilities;
         ArrayList<String> warnings = new ArrayList<String>();
         ArrayList<String[]> logs = new ArrayList<String[]>();
         File importLog = null;
+    try (OutputStream os = new FileOutputStream(ifile)) {
+      InputStream is = imp.getInputStream();
+      byte[] buf = new byte[1024];
+      int len;
+      while ((len = is.read(buf)) > 0)
+        os.write(buf, 0, len);
+
+      is.close();
+      os.close();
+      if (matchFileExt(ifile, "zip")) {
+        saveParts(tmpDir, ifile);
+        ZipInputStream in = new ZipInputStream(new FileInputStream(ifile));
+        boolean noXML = true;
+        ZipEntry entry = in.getNextEntry();
+        String entryDir = "";
+        while (entry != null) {
+          String entryName = entry.getName();
+          if (entry.isDirectory())
+            entryDir = entryName;
+
+          if (entryName.startsWith(entryDir))
+            entryName = entryName.substring(entryDir.length());
+
+          String ofile = tmpDir + entryName;
+          if (matchFileExt(ofile, "xml")) {
+            new File(ofile).getParentFile().mkdirs();
+            noXML = false;
+            OutputStream out = null;
+            try {
+              out = new FileOutputStream(ofile);
+              while ((len = in.read(buf)) > 0)
+                out.write(buf, 0, len);
 
-	try {
-            InputStream is = imp.getInputStream();
-            OutputStream os = new FileOutputStream(ifile);
-            byte[] buf = new byte[1024];
-            int len;
-            while ((len=is.read(buf)) > 0) os.write(buf,0,len);
-            is.close();
-            os.close();
-
-            if (matchFileExt(ifile, "zip")) {
-            	saveParts(tmpDir,ifile);
-                ZipInputStream in = new ZipInputStream(new FileInputStream(ifile));
-                boolean noXML = true;
-                ZipEntry entry = in.getNextEntry();
-                String entryDir = "";
-
-                while (entry!=null) {
-                    String entryName = entry.getName();
-                    if (entry.isDirectory()) entryDir = entryName;
-                    if (entryName.startsWith(entryDir)) entryName = entryName.substring(entryDir.length());
-
-                    String ofile = tmpDir + entryName;
-                    if (matchFileExt(ofile, "xml")) {
-                    	new File(ofile).getParentFile().mkdirs();
-                    	
-                        noXML = false;
-                        OutputStream out = null;    
-                        try {
-	                        out = new FileOutputStream(ofile);
-	                        while ((len=in.read(buf)) > 0) out.write(buf,0,len);
-	                        out.close();
-	                    } finally {
-	                    	IOUtils.closeQuietly(out);
-	                    }
-                        logs.add(importXML(LoggedInInfo.getLoggedInInfoFromSession(request) , ofile, warnings, request,frm.getTimeshiftInDays(),students,courseId,true));
-                        importNo++;
-                        demographicNo=null;
-                    }
-                    entry = in.getNextEntry();
-                }
-                if (noXML) {
-                    Util.cleanFile(ifile);
-                        throw new Exception ("Error! No .xml file in zip");
-                } else {
-                    importLog = makeImportLog(logs, tmpDir);
-                }
-                in.close();
-//                Util.cleanFile(ifile);
-
-            } else if (matchFileExt(ifile, "xml")) {
-                logs.add(importXML(LoggedInInfo.getLoggedInInfoFromSession(request), ifile, warnings, request,frm.getTimeshiftInDays(),students,courseId,false));
-                demographicNo=null;
-                importLog = makeImportLog(logs, tmpDir);
-            } else {
-                Util.cleanFile(ifile);
-                throw new Exception ("Error! Import file must be .xml or .zip");
+              out.close();
+            } finally {
+              IOUtils.closeQuietly(out);
             }
-	} catch (Exception e) {
-            warnings.add("Error processing file: " + imp.getFileName());
-            logger.error("Error", e);
-	}
+            logs.add(importXML(LoggedInInfo.getLoggedInInfoFromSession(request), ofile, warnings, request, frm.getTimeshiftInDays(), students, courseId, true));
+            importNo++;
+            demographicNo = null;
+          }
+          entry = in.getNextEntry();
+        } 
+        if (noXML) {
+          Util.cleanFile(ifile);
+          throw new Exception("Error! No .xml file in zip");
+        } else {
+          importLog = makeImportLog(logs, tmpDir);
+        }
+        in.close();
+        // Util.cleanFile(ifile);
+      } else
+        if (matchFileExt(ifile, "xml")) {
+          logs.add(importXML(LoggedInInfo.getLoggedInInfoFromSession(request), ifile, warnings, request, frm.getTimeshiftInDays(), students, courseId, false));
+          demographicNo = null;
+          importLog = makeImportLog(logs, tmpDir);
+        } else {
+          Util.cleanFile(ifile);
+          throw new Exception("Error! Import file must be .xml or .zip");
+        }
+
+    } catch (Exception e) {
+      warnings.add("Error processing file: " + imp.getFileName());
+      logger.error("Error", e);
+    }
 
 	
 	
@@ -370,45 +373,6 @@ import oscar.util.UtilDateUtilities;
         
         if (matchFileExt(ifile, "zip")) {
         	saveParts(tmpDir,ifile);
-            ZipInputStream in = new ZipInputStream(new FileInputStream(ifile));
-            boolean noXML = true;
-            ZipEntry entry = in.getNextEntry();
-            String entryDir = "";
-
-            while (entry!=null) {
-                String entryName = entry.getName();
-                if (entry.isDirectory()) entryDir = entryName;
-                if (entryName.startsWith(entryDir)) entryName = entryName.substring(entryDir.length());
-
-                String ofile = tmpDir + entryName;
-                if (matchFileExt(ofile, "xml")) {
-                	new File(ofile).getParentFile().mkdirs();
-                	
-                    noXML = false;
-                    OutputStream out = null;    
-                    try {
-                        out = new FileOutputStream(ofile);
-                        while ((len=in.read(buf)) > 0) out.write(buf,0,len);
-                        out.close();
-                    } finally {
-                    	IOUtils.closeQuietly(out);
-                    }
-                    //process for contacts only
-                  //  logger.info("processing for contacts - " + ofile);
-                    logs.add(importContacts(LoggedInInfo.getLoggedInInfoFromSession(request) , ofile, warnings, request,frm.getTimeshiftInDays(),students,courseId));
-                 
-                    demographicNo=null;
-                }
-                entry = in.getNextEntry();
-            }
-            if (noXML) {
-                Util.cleanFile(ifile);
-                    throw new Exception ("Error! No .xml file in zip");
-            } else {
-               // importLog = makeImportLog(logs, tmpDir);
-            }
-            in.close();
-            Util.cleanFile(ifile);
 
         } else if (matchFileExt(ifile, "xml")) {
         	logger.info("processing for contacts - " + ifile);
@@ -437,41 +401,6 @@ import oscar.util.UtilDateUtilities;
     void saveParts(String tmpDir,String ifile) throws Exception {
     	int len = 0;
     	byte[] buf = new byte[1024];
-    	
-        ZipInputStream in = new ZipInputStream(new FileInputStream(ifile));
-        ZipEntry entry = in.getNextEntry();
-        String entryDir = "";
-
-        while (entry!=null) {
-            String entryName = entry.getName();
-            if (entry.isDirectory()) 
-            	entryDir = entryName;
-            if (entryName.startsWith(entryDir)) 
-            	entryName = entryName.substring(entryDir.length());
-
-            if(entryName.isEmpty()) {
-            	entry = in.getNextEntry();
-            	continue;
-            }
-            	
-            
-            String ofile = tmpDir + entryDir +  entryName;
-            
-            if (!matchFileExt(ofile, "xml")) {
-                OutputStream out = null;    
-                try {
-                	String path = ofile.substring(0,ofile.lastIndexOf(File.separator));
-                	new File(path).mkdirs();
-                    out = new FileOutputStream(ofile);
-                    while ((len=in.read(buf)) > 0) out.write(buf,0,len);
-                    out.close();
-                } finally {
-                	IOUtils.closeQuietly(out);
-                }
-            }
-            entry = in.getNextEntry();
-        }
-        in.close();
     }
     
     void resetProviderBean(HttpServletRequest request) {
@@ -3000,66 +2929,6 @@ import oscar.util.UtilDateUtilities;
                 }
 
 		File importLog = new File(dir, "ImportEvent-"+UtilDateUtilities.getToday("yyyy-MM-dd.HH.mm.ss")+".log");
-		BufferedWriter out = new BufferedWriter(new FileWriter(importLog));
-                int tableWidth = 0;
-                for (int i=0; i<keyword.length; i++) {
-                    for (int j=0; j<keyword[i].length; j++) {
-                        out.write(keyword[i][j]+" |");
-                        if (keyword[i][j].trim().equals("Report")) j++;
-                        if (i==1) tableWidth += keyword[i][j].length()+2;
-                    }
-                    out.newLine();
-                }
-                out.write(fillUp("",'-',tableWidth)); out.newLine();
-
-                //general log data
-                if (importNo==0) importNo = 1;
-                for (int i=0; i<importNo; i++) {
-                    for (int j=0; j<keyword[0].length; j++) {
-                        String category = keyword[0][j].trim();
-                        if (category.contains("Report")) category = keyword[1][j].trim();
-                        Integer occurs = entries.get(category+i);
-                        if (occurs==null) occurs = 0;
-                        out.write(fillUp(occurs.toString(), ' ', keyword[1][j].length()));
-                        out.write(" |");
-                    }
-                    out.newLine();
-                    out.write(fillUp("",'-',tableWidth)); out.newLine();
-                }
-                out.newLine();
-                out.newLine();
-                out.newLine();
-
-                //error log
-                String column1 = "Patient ID";
-                out.write(column1+" |");
-                out.write("Errors/Notes");
-                out.newLine();
-                out.write(fillUp("",'-',tableWidth)); out.newLine();
-
-                for (int i=0; i<importNo; i++) {
-                    Integer id = entries.get(PATIENTID+i);
-                    if (id==null) id = 0;
-                    out.write(fillUp(id.toString(), ' ', column1.length()));
-                    out.write(" |");
-                    String[] info = demo.get(i);
-                    if (info!=null && info.length>0) {
-                        String[] text = info[info.length-1].split("\n");
-                        out.write(text[0]);
-                        out.newLine();
-                        for (int j=1; j<text.length; j++) {
-                            out.write(fillUp("",' ',column1.length()));
-                            out.write(" |");
-                            out.write(text[j]);
-                            out.newLine();
-                        }
-                    }
-                    out.write(fillUp("",'-',tableWidth)); out.newLine();
-                }
-		out.close();
-                importNo = 0;
-                entries.clear();
-		return importLog;
 	}
 
 
diff --git a/src/main/java/oscar/oscarDemographic/pageUtil/ImportLogDownloadAction.java b/src/main/java/oscar/oscarDemographic/pageUtil/ImportLogDownloadAction.java
index 67902c279c..6510c96942 100644
--- a/src/main/java/oscar/oscarDemographic/pageUtil/ImportLogDownloadAction.java
+++ b/src/main/java/oscar/oscarDemographic/pageUtil/ImportLogDownloadAction.java
@@ -50,18 +50,5 @@ public class ImportLogDownloadAction extends Action {
 
 	String importLog = request.getParameter("importlog");
 	File importLogFile = new File(importLog);
-	InputStream in = new FileInputStream(importLog);
-	OutputStream out = response.getOutputStream();
-
-	response.setContentType("application/octet-stream");
-	response.setHeader("Content-Disposition", "attachment; filename=\""+importLogFile.getName()+"\"" );
-
-	byte[] buf = new byte[1024];
-	int len;
-	while ((len=in.read(buf)) > 0) out.write(buf,0,len);
-	in.close();
-	out.close();
-
-	return null;
     }
 }
diff --git a/src/main/java/oscar/oscarDemographic/pageUtil/Util.java b/src/main/java/oscar/oscarDemographic/pageUtil/Util.java
index 219819b08f..06d332153a 100644
--- a/src/main/java/oscar/oscarDemographic/pageUtil/Util.java
+++ b/src/main/java/oscar/oscarDemographic/pageUtil/Util.java
@@ -201,22 +201,23 @@ public class Util {
     }
 
     static public void downloadFile(String fileName, String dirName, HttpServletResponse rsp) {
-        try {
+        try (InputStream in = new FileInputStream(dirName + fileName)) {
             dirName = fixDirName(dirName);
-            if (rsp==null) return;
+            if (rsp == null)
+                return;
 
             rsp.setContentType("application/octet-stream");
             rsp.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");
-            InputStream in = new FileInputStream(dirName + fileName);
             OutputStream out = rsp.getOutputStream();
             byte[] buf = new byte[1024];
             int len;
             while ((len = in.read(buf)) > 0) {
                 out.write(buf, 0, len);
-            }
+            } 
             in.close();
             out.close();
-        } catch (IOException ex) {logger.error("Error", ex);
+        } catch (IOException ex) {
+            logger.error("Error", ex);
         }
     }
 
@@ -350,13 +351,13 @@ public class Util {
     }
     
     static public boolean zipFiles(ArrayList<File> files, String zipFileName, String dirName) throws Exception {
-        try {
+        try (ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(dirName + zipFileName))) {
             if (files == null) {
-            	logger.error("Error! No source file for zipping");
+                logger.error("Error! No source file for zipping");
                 return false;
             }
             if (!StringUtils.filled(zipFileName)) {
-            	logger.error("Error! Zip filename not given");
+                logger.error("Error! Zip filename not given");
                 return false;
             }
             if (!checkDir(dirName)) {
@@ -364,42 +365,28 @@ public class Util {
             }
             dirName = fixDirName(dirName);
             byte[] buf = new byte[1024];
-            ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(dirName + zipFileName));
             for (File f : files) {
-                if (f == null) continue;
-
-                FileInputStream fin = new FileInputStream(f.getAbsolutePath());
+                if (f == null)
+                    continue;
 
-                // Add ZIP entry to output stream
-                zout.putNextEntry(new ZipEntry(f.getName()));
-
-                // Transfer bytes from the input files to the ZIP file
-                int len;
-                while ((len = fin.read(buf)) > 0) {
-                    zout.write(buf, 0, len);
-                }
-
-                // Complete the entry
-                zout.closeEntry();
-                fin.close();
             }
             // Complete the ZIP file
             zout.close();
             return true;
-
-        } catch (IOException ex) {logger.error("Error", ex);
+        } catch (IOException ex) {
+            logger.error("Error", ex);
         }
         return false;
     }
 
     static public boolean zipFiles(ArrayList<File> files, ArrayList<String> dirs, String zipFileName, String dirName) throws Exception {
-        try {
+        try (ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(dirName + zipFileName))) {
             if (files == null) {
-            	logger.error("Error! No source file for zipping");
+                logger.error("Error! No source file for zipping");
                 return false;
             }
             if (!StringUtils.filled(zipFileName)) {
-            	logger.error("Error! Zip filename not given");
+                logger.error("Error! Zip filename not given");
                 return false;
             }
             if (!checkDir(dirName)) {
@@ -407,50 +394,26 @@ public class Util {
             }
             dirName = fixDirName(dirName);
             byte[] buf = new byte[1024];
-            ZipOutputStream zout = new ZipOutputStream(new FileOutputStream(dirName + zipFileName));
-            Map<String,Boolean> dirMap = new HashMap<String,Boolean>();
-            for(String dir: dirs) {
-            	dirMap.put(dir, true);
+            Map<String, Boolean> dirMap = new HashMap<String, Boolean>();
+            for (String dir : dirs) {
+                dirMap.put(dir, true);
             }
-            for(String dir: dirMap.keySet()) {
-            	if(!dir.isEmpty()) {
-                	zout.putNextEntry(new ZipEntry(dir + "/"));
+            for (String dir : dirMap.keySet()) {
+                if (!dir.isEmpty()) {
+                    zout.putNextEntry(new ZipEntry(dir + "/"));
                 }
             }
-            
-            for (int x=0;x<files.size();x++) {
-            	File f = files.get(x);
-                if (f == null) continue;
-
-                
-                FileInputStream fin = new FileInputStream(f.getAbsolutePath());
-
-                String dir = dirs.get(x);
-                
-                if(dir.isEmpty()) {
-                
-	                // Add ZIP entry to output stream
-	                zout.putNextEntry(new ZipEntry(f.getName()));
+            for (int x = 0; x < files.size(); x++) {
+                File f = files.get(x);
+                if (f == null)
+                    continue;
 
-                } else {
-                	 zout.putNextEntry(new ZipEntry(dir + "/" + f.getName()));
-
-                }
-                // Transfer bytes from the input files to the ZIP file
-                int len;
-                while ((len = fin.read(buf)) > 0) {
-                    zout.write(buf, 0, len);
-                }
-
-                // Complete the entry
-                zout.closeEntry();
-                fin.close();
             }
             // Complete the ZIP file
             zout.close();
             return true;
-
-        } catch (IOException ex) {logger.error("Error", ex);
+        } catch (IOException ex) {
+            logger.error("Error", ex);
         }
         return false;
     }
diff --git a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/config/pageUtil/EctConConstructSpecialistsScriptsFile.java b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/config/pageUtil/EctConConstructSpecialistsScriptsFile.java
index abef130967..6d6f0dedbf 100644
--- a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/config/pageUtil/EctConConstructSpecialistsScriptsFile.java
+++ b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/config/pageUtil/EctConConstructSpecialistsScriptsFile.java
@@ -59,42 +59,35 @@ public class EctConConstructSpecialistsScriptsFile {
 		serviceId = new Vector<String>();
 		serviceDesc = new Vector<String>();
 		File file = new File("oscarEncounter/consult.js");
-		try {
-			FileWriter fileWriter = new FileWriter(file);
+		try (FileWriter fileWriter = new FileWriter(file)) {
 			retval = "writing file too ".concat(String.valueOf(String.valueOf(file.getAbsolutePath())));
 			fileWriter.write("function makeSpecialistslist(dec){\n");
-			fileWriter.write(" if(dec=='1') \n");
+			fileWriter.write(" if(dec==\'1\') \n");
 			fileWriter.write("{K(-1,\"----Choose a Service-------\");D(-1,\"--------Choose a Specialist-----\");}\n");
 			fileWriter.write("else\n");
 			fileWriter.write("{K(-1,\"----All Services-------\");D(-1,\"--------All Specialists-----\");}\n");
-
 			List<ConsultationServices> services = consultationServiceDao.findAll();
 			for (ConsultationServices cs : services) {
 				serviceId.add(String.valueOf(cs.getServiceId()));
 				serviceDesc.add(cs.getServiceDesc());
 			}
-
-			ServiceSpecialistsDao dao = SpringUtils.getBean(ServiceSpecialistsDao.class);
+			ServiceSpecialistsDao dao = SpringUtils.getBean(org.oscarehr.common.dao.ServiceSpecialistsDao.class);
 			for (int i = 0; i < serviceId.size(); i++) {
 				String servId = serviceId.elementAt(i);
 				String servDesc = serviceDesc.elementAt(i);
 				fileWriter.write("K(" + servId + ",\"" + servDesc + "\");\n");
 				for (Object[] o : dao.findSpecialists(ConversionUtils.fromIntString(servId))) {
-					ServiceSpecialists ser = (ServiceSpecialists) o[0];
-					ProfessionalSpecialist pro = (ProfessionalSpecialist) o[1];
-
+					ServiceSpecialists ser = ((ServiceSpecialists) (o[0]));
+					ProfessionalSpecialist pro = ((ProfessionalSpecialist) (o[1]));
 					String name = pro.getLastName() + ", " + pro.getFirstName() + " " + pro.getProfessionalLetters();
-
 					String specId = "" + ser.getId().getSpecId();
 					String phone = pro.getPhoneNumber();
 					String address = pro.getStreetAddress();
 					String fax = pro.getFaxNumber();
 					fileWriter.write("D(" + servId + ",\"" + specId + "\",\"" + phone + "\",\"" + name + "\",\"" + fax + "\",\"" + address + "\");\n");
 				}
-
 				fileWriter.write("\n");
 			}
-
 			fileWriter.write("\n");
 			fileWriter.write("}\n");
 			fileWriter.close();
diff --git a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/ConsultResponsePDFCreator.java b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/ConsultResponsePDFCreator.java
index 990ce6ad99..602d418a10 100644
--- a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/ConsultResponsePDFCreator.java
+++ b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/ConsultResponsePDFCreator.java
@@ -43,15 +43,14 @@ public class ConsultResponsePDFCreator {
 		
 		//save consultResponse as .html
 		File fileHtml = new File(filename+".html");
-        try {
-        	FileOutputStream fos = new FileOutputStream(fileHtml);
+		try (FileOutputStream fos = new FileOutputStream(fileHtml)) {
 			byte[] pageInBytes = consultResponseHtmlPage.getBytes();
 			fos.write(pageInBytes);
 			fos.flush();
 			fos.close();
-        } catch (Exception ex) {
-        	logger.error("Error saving html", ex);
-        }
+		} catch (Exception ex) {
+			logger.error("Error saving html", ex);
+		}
 		
 		//convert consultResponse.html to pdf
         File filePDF = new File(filename+".pdf");
diff --git a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/EctConsultationFormRequestPrintAction2.java b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/EctConsultationFormRequestPrintAction2.java
index 7aa8de8d27..0886e343b2 100644
--- a/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/EctConsultationFormRequestPrintAction2.java
+++ b/src/main/java/oscar/oscarEncounter/oscarConsultationRequest/pageUtil/EctConsultationFormRequestPrintAction2.java
@@ -116,20 +116,6 @@ public class EctConsultationFormRequestPrintAction2 extends Action {
 				if (doc.isPrintable()) {
 					if (doc.isImage()) {
 						File f2 = File.createTempFile("image"+doc.getDocId(),"pdf");
-						FileOutputStream fos2 = new FileOutputStream(f2);
-						
-						request.setAttribute("imagePath", path + doc.getFileName());
-						request.setAttribute("imageTitle", doc.getDescription());
-
-						ImagePDFCreator ipdfc = new ImagePDFCreator(request, fos2);
-						ipdfc.printPdf();
-						
-						fos2.close();
-						
-						FileInputStream fis2 = new FileInputStream(f2);
-						alist.add(fis2);
-						streams.add(fis2);
-						filesToDelete.add(f2);
 					}
 					else if (doc.isPDF()) {
 						alist.add(path + doc.getFileName());
diff --git a/src/main/java/oscar/oscarEncounter/oscarMeasurements/MeasurementFlowSheet.java b/src/main/java/oscar/oscarEncounter/oscarMeasurements/MeasurementFlowSheet.java
index b32e9d4580..2d7a802ac5 100644
--- a/src/main/java/oscar/oscarEncounter/oscarMeasurements/MeasurementFlowSheet.java
+++ b/src/main/java/oscar/oscarEncounter/oscarMeasurements/MeasurementFlowSheet.java
@@ -260,13 +260,11 @@ public class MeasurementFlowSheet {
         if (topHTMLFileName != null) {
             try {
                 String measurementDirPath = OscarProperties.getInstance().getProperty("MEASUREMENT_DS_HTML_DIRECTORY");
-                InputStream is = null;
                 if (measurementDirPath != null) {
                     //if (measurementDirPath.charAt(measurementDirPath.length()) != /)
                     File file = new File(OscarProperties.getInstance().getProperty("MEASUREMENT_DS_HTML_DIRECTORY") + topHTMLFileName);
                     if (file.isFile() || file.canRead()) {
                         log.debug("Loading from file " + file.getName());
-                        is = new FileInputStream(file);
                     }
                 }
 
@@ -276,12 +274,6 @@ public class MeasurementFlowSheet {
                 }
 
                 if (is != null){
-                    BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
-                    String str;
-                    while ((str = bReader.readLine()) != null) {
-                        sb.append(str);
-                    }
-                    bReader.close();
                 }
             } catch (Exception e) {
                 MiscUtils.getLogger().error("Error", e);
diff --git a/src/main/java/oscar/oscarEncounter/oscarMeasurements/pageUtil/EctAddMeasurementStyleSheetAction.java b/src/main/java/oscar/oscarEncounter/oscarMeasurements/pageUtil/EctAddMeasurementStyleSheetAction.java
index fbbc7ea63e..76cd3fc787 100644
--- a/src/main/java/oscar/oscarEncounter/oscarMeasurements/pageUtil/EctAddMeasurementStyleSheetAction.java
+++ b/src/main/java/oscar/oscarEncounter/oscarMeasurements/pageUtil/EctAddMeasurementStyleSheetAction.java
@@ -101,44 +101,34 @@ public class EctAddMeasurementStyleSheetAction extends Action {
     public static boolean saveFile(FormFile file){
         String retVal = null;
         boolean isAdded = true;
-
-        try {
-
-        	List<MeasurementCSSLocation> locs = dao.findByLocation(file.getFileName());
-        	if(locs.size()>0)
-        		return false;
-
-          
-            //retrieve the file data
-
-            InputStream stream = file.getInputStream();
-            String place= OscarProperties.getInstance().getProperty("oscarMeasurement_css_upload_path");
-
-            if(!place.endsWith("/"))
-                    place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+file.getFileName();
-
-            //write the file to the file specified
-            OutputStream bos = new FileOutputStream(retVal);
-            int bytesRead = 0;
-            byte[] buffer = file.getFileData();
-            while ((bytesRead = stream.read(buffer)) != -1){
-                    bos.write(buffer, 0, bytesRead);
-            }
-            bos.close();
-            stream.close();
-        }
-        catch (FileNotFoundException fnfe) {
-
-            MiscUtils.getLogger().debug("File not found");
-            MiscUtils.getLogger().error("Error", fnfe);
-            return isAdded=false;
-
-        }
-        catch (IOException ioe) {
-            MiscUtils.getLogger().error("Error", ioe);
-            return isAdded=false;
-        }
+		try (// write the file to the file specified
+		OutputStream bos = new FileOutputStream(retVal)) {
+			List<MeasurementCSSLocation> locs = dao.findByLocation(file.getFileName());
+			if (locs.size() > 0)
+				return false;
+
+			// retrieve the file data
+			InputStream stream = file.getInputStream();
+			String place = OscarProperties.getInstance().getProperty("oscarMeasurement_css_upload_path");
+			if (!place.endsWith("/"))
+				place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+			retVal = place + file.getFileName();
+			int bytesRead = 0;
+			byte[] buffer = file.getFileData();
+			while ((bytesRead = stream.read(buffer)) != -1) {
+				bos.write(buffer, 0, bytesRead);
+			} 
+			bos.close();
+			stream.close();
+		} catch (FileNotFoundException fnfe) {
+			MiscUtils.getLogger().debug("File not found");
+			MiscUtils.getLogger().error("Error", fnfe);
+			return isAdded = false;
+		} catch (IOException ioe) {
+			MiscUtils.getLogger().error("Error", ioe);
+			return isAdded = false;
+		}
       
         return isAdded;
     }
diff --git a/src/main/java/oscar/oscarLab/ca/all/pageUtil/LabUploadAction.java b/src/main/java/oscar/oscarLab/ca/all/pageUtil/LabUploadAction.java
index fc1f8acdbf..e8ba4a87bf 100644
--- a/src/main/java/oscar/oscarLab/ca/all/pageUtil/LabUploadAction.java
+++ b/src/main/java/oscar/oscarLab/ca/all/pageUtil/LabUploadAction.java
@@ -211,26 +211,20 @@ public class LabUploadAction extends Action {
 	 */
 	public static boolean validateSignature(PublicKey key, String sigString, File input) {
 		byte[] buf = new byte[1024];
-
-		try {
-
-			InputStream msgIs = new FileInputStream(input);
+		try (InputStream msgIs = new FileInputStream(input)) {
 			Signature sig = Signature.getInstance("MD5WithRSA");
 			sig.initVerify(key);
-
 			// Read in the message bytes and update the signature
 			int numRead = 0;
 			while ((numRead = msgIs.read(buf)) >= 0) {
 				sig.update(buf, 0, numRead);
-			}
+			} 
 			msgIs.close();
-
-			return (sig.verify(Base64.decodeBase64(sigString)));
-
+			return sig.verify(Base64.decodeBase64(sigString));
 		} catch (Exception e) {
 			logger.debug("Could not validate signature: " + e);
 			MiscUtils.getLogger().error("Error", e);
-			return (false);
+			return false;
 		}
 	}
 
diff --git a/src/main/java/oscar/oscarLab/ca/all/parsers/Factory.java b/src/main/java/oscar/oscarLab/ca/all/parsers/Factory.java
index 9a893eaa01..518a2145ae 100644
--- a/src/main/java/oscar/oscarLab/ca/all/parsers/Factory.java
+++ b/src/main/java/oscar/oscarLab/ca/all/parsers/Factory.java
@@ -107,12 +107,9 @@ public final class Factory {
 			} else {
 				type = type.trim();
  			}
-			
-			InputStream is = Factory.class.getClassLoader().getResourceAsStream("oscar/oscarLab/ca/all/upload/message_config.xml");
 
 			if (OscarProperties.getInstance().getProperty("LAB_TYPES") != null) {
 				String filename = OscarProperties.getInstance().getProperty("LAB_TYPES");
-				is = new FileInputStream(filename);
 			} 
 			
 			SAXBuilder parser = new SAXBuilder();
diff --git a/src/main/java/oscar/oscarLab/ca/all/upload/handlers/DefaultHandler.java b/src/main/java/oscar/oscarLab/ca/all/upload/handlers/DefaultHandler.java
index a7fc82e172..124b040993 100644
--- a/src/main/java/oscar/oscarLab/ca/all/upload/handlers/DefaultHandler.java
+++ b/src/main/java/oscar/oscarLab/ca/all/upload/handlers/DefaultHandler.java
@@ -123,17 +123,6 @@ public class DefaultHandler implements MessageHandler {
     //TODO: Dont think this needs to be in this class.  Better as a util method
     public String readTextFile(String fullPathFilename) throws IOException {
         StringBuilder sb = new StringBuilder(1024);
-        BufferedReader reader = new BufferedReader(new FileReader(fullPathFilename));
-                        
-        char[] chars = new char[1024];
-        int numRead = 0;
-        while( (numRead = reader.read(chars)) > -1){
-                sb.append(String.valueOf(chars));       
-        }
-
-        reader.close();
-
-        return sb.toString();
     }
 
 }
diff --git a/src/main/java/oscar/oscarLab/ca/all/util/ICLUtilities.java b/src/main/java/oscar/oscarLab/ca/all/util/ICLUtilities.java
index 438068953b..e2c8c0bee6 100644
--- a/src/main/java/oscar/oscarLab/ca/all/util/ICLUtilities.java
+++ b/src/main/java/oscar/oscarLab/ca/all/util/ICLUtilities.java
@@ -45,51 +45,48 @@ public class ICLUtilities {
     public ArrayList<String> separateMessages(String fileName) throws Exception{
                 
         ArrayList<String> messages = new ArrayList<String>();
-        try{
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
             InputStream is = new FileInputStream(fileName);
-            
-            BufferedReader br = new BufferedReader(new InputStreamReader(is));
-            
             String line = null;
-            boolean firstPIDflag = false; //true if the first PID segment has been processed false otherwise
-            boolean firstMSHflag = false; //true if the first MSH segment has been processed false otherwise
-            //String mshSeg = br.readLine();
-            
+            boolean firstPIDflag = false;// true if the first PID segment has been processed false otherwise
+
+            boolean firstMSHflag = false;// true if the first MSH segment has been processed false otherwise
+
+            // String mshSeg = br.readLine();
             StringBuilder sb = new StringBuilder();
             String mshSeg = "";
-            
             while ((line = br.readLine()) != null) {
-                if (line.length() > 3){
-                    if (line.substring(0, 3).equals("MSH")){
-                        if (firstMSHflag){
+                if (line.length() > 3) {
+                    if (line.substring(0, 3).equals("MSH")) {
+                        if (firstMSHflag) {
                             messages.add(sb.toString());
                             sb.delete(0, sb.length());
                         }
                         mshSeg = line;
                         firstMSHflag = true;
                         firstPIDflag = false;
-                    } else if (line.substring(0, 3).equals("PID")){
-                        if (firstPIDflag){
-                            messages.add(sb.toString());
-                            sb.delete(0, sb.length());
-                            sb.append(mshSeg + "\r\n");
+                    } else
+                        if (line.substring(0, 3).equals("PID")) {
+                            if (firstPIDflag) {
+                                messages.add(sb.toString());
+                                sb.delete(0, sb.length());
+                                sb.append(mshSeg + "\r\n");
+                            }
+                            firstPIDflag = true;
                         }
-                        firstPIDflag = true;
-                    }
-                    if (line.substring(0, 3).equals("MSH")){
+
+                    if (line.substring(0, 3).equals("MSH")) {
                         sb.append(line + "|2.3\r\n");
-										} else {
+                    } else {
                         sb.append(line + "\r\n");
-										}
+                    }
                 }
-            }
-                       
+            } 
             // add the last message
             messages.add(sb.toString());
-            
             is.close();
             br.close();
-        }catch(Exception e){
+        } catch (Exception e) {
             throw e;
         }
         
@@ -99,33 +96,27 @@ public class ICLUtilities {
     
 
     public static String saveFile(InputStream stream,String filename ){
-        String retVal = null;        
-        
-        try {
+        String retVal = null;
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
             OscarProperties props = OscarProperties.getInstance();
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-            
-            if(!place.endsWith("/"))
-                place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+"LabUpload."+filename.replaceAll(".enc", "")+"."+(new Date()).getTime();
-            
-            //write the  file to the file specified
-            OutputStream os = new FileOutputStream(retVal);
-            
+            // properties must exist
+            String place = props.getProperty("DOCUMENT_DIR");
+            if (!place.endsWith("/"))
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+            retVal = place + "LabUpload." + filename.replaceAll(".enc", "") + "." + new Date().getTime();
             int bytesRead = 0;
-            while ((bytesRead = stream.read()) != -1){
+            while ((bytesRead = stream.read()) != -1) {
                 os.write(bytesRead);
-            }
+            } 
             os.close();
-            
-            //close the stream
+            // close the stream
             stream.close();
-        }catch (FileNotFoundException fnfe) {
+        } catch (FileNotFoundException fnfe) {
             MiscUtils.getLogger().error("Error", fnfe);
             return retVal;
-            
-        }catch (IOException ioe) {
+        } catch (IOException ioe) {
             MiscUtils.getLogger().error("Error", ioe);
             return retVal;
         }
diff --git a/src/main/java/oscar/oscarLab/ca/all/util/MEDVUEUtilities.java b/src/main/java/oscar/oscarLab/ca/all/util/MEDVUEUtilities.java
index c24379e961..b5984b8a6f 100644
--- a/src/main/java/oscar/oscarLab/ca/all/util/MEDVUEUtilities.java
+++ b/src/main/java/oscar/oscarLab/ca/all/util/MEDVUEUtilities.java
@@ -37,66 +37,64 @@ public class MEDVUEUtilities   {
     	
     	 
         ArrayList<String> messages = new ArrayList<String>();
-        try{
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
             InputStream is = new FileInputStream(fileName);
-            
-            BufferedReader br = new BufferedReader(new InputStreamReader(is));
-            
             String line = null;
-            boolean firstPIDflag = false; //true if the first PID segment has been processed false otherwise
-            boolean firstMSHflag = false; //true if the first MSH segment has been processed false otherwise
-            //String mshSeg = br.readLine();
-            
+            boolean firstPIDflag = false;// true if the first PID segment has been processed false otherwise
+
+            boolean firstMSHflag = false;// true if the first MSH segment has been processed false otherwise
+
+            // String mshSeg = br.readLine();
             StringBuilder sb = new StringBuilder();
             String mshSeg = "";
-            
             while ((line = br.readLine()) != null) {
-                if (line.length() > 3){
-                    if (line.substring(0, 3).equals("MSH")){
-                        if (firstMSHflag){
+                if (line.length() > 3) {
+                    if (line.substring(0, 3).equals("MSH")) {
+                        if (firstMSHflag) {
                             messages.add(sb.toString());
                             sb.delete(0, sb.length());
                         }
                         mshSeg = line;
                         firstMSHflag = true;
                         firstPIDflag = false;
-                    } else if (line.substring(0, 3).equals("PID")){
-                        if (firstPIDflag){
-                            messages.add(sb.toString());
-                            sb.delete(0, sb.length());
-                            sb.append(mshSeg + "\r\n");
+                    } else
+                        if (line.substring(0, 3).equals("PID")) {
+                            if (firstPIDflag) {
+                                messages.add(sb.toString());
+                                sb.delete(0, sb.length());
+                                sb.append(mshSeg + "\r\n");
+                            }
+                            firstPIDflag = true;
                         }
-                        firstPIDflag = true;
-                    }
-                    if (line.substring(0, 3).equals("MSH")){
-                    	String[] mshSegArray = line.split("\\|");
-                    	logger.info("MSH 2 = "+mshSegArray[1]);
-                    	if (mshSegArray[1].equals("^~\\&")) {
-                    		mshSegArray[1]="^~\\\\";
-                    		for (int a=0;a<mshSegArray.length;a++){
-                    			if (a!=mshSegArray.length-1) 
-                    				sb.append(mshSegArray[a]+"|");
-                    			else
-                    				sb.append(mshSegArray[a]);
-                    				
-                    		}
-                    		sb.append("\r\n");
-                    		logger.info("MSH segment = "+sb.toString());
-                    	}  else {
-                    		sb.append(line + "\r\n");
-                    	}
-                   } else
-                    
-                    sb.append(line + "\r\n");
+
+                    if (line.substring(0, 3).equals("MSH")) {
+                        String[] mshSegArray = line.split("\\|");
+                        logger.info("MSH 2 = " + mshSegArray[1]);
+                        if (mshSegArray[1].equals("^~\\&")) {
+                            mshSegArray[1] = "^~\\\\";
+                            for (int a = 0; a < mshSegArray.length; a++) {
+                                if (a != mshSegArray.length - 1)
+                                    sb.append(mshSegArray[a] + "|");
+                                else
+                                    sb.append(mshSegArray[a]);
+
+                            }
+                            sb.append("\r\n");
+                            logger.info("MSH segment = " + sb.toString());
+                        } else {
+                            sb.append(line + "\r\n");
+                        }
+                    } else
+                        sb.append(line + "\r\n");
+
                 }
-            }
-            logger.info("MEDVUE Message = "+sb.toString());           
+            } 
+            logger.info("MEDVUE Message = " + sb.toString());
             // add the last message
             messages.add(sb.toString());
-            
             is.close();
             br.close();
-        }catch(Exception e){
+        } catch (Exception e) {
             throw e;
         }
         
@@ -112,34 +110,27 @@ public class MEDVUEUtilities   {
 	 */
     public static String saveFile(InputStream stream,String filename ){
         String retVal = null;
-        
-        
-        try {
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
             OscarProperties props = OscarProperties.getInstance();
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-            
-            if(!place.endsWith("/"))
-                place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+"LabUpload."+filename.replaceAll(".enc", "")+"."+(new Date()).getTime();
-            
-            //write the  file to the file specified
-            OutputStream os = new FileOutputStream(retVal);
-            
+            // properties must exist
+            String place = props.getProperty("DOCUMENT_DIR");
+            if (!place.endsWith("/"))
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+            retVal = place + "LabUpload." + filename.replaceAll(".enc", "") + "." + new Date().getTime();
             int bytesRead = 0;
-            while ((bytesRead = stream.read()) != -1){
+            while ((bytesRead = stream.read()) != -1) {
                 os.write(bytesRead);
-            }
+            } 
             os.close();
-            
-            //close the stream
+            // close the stream
             stream.close();
-        }catch (FileNotFoundException fnfe) {
+        } catch (FileNotFoundException fnfe) {
             logger.error(fnfe);
             return retVal;
-            
-        }catch (IOException ioe) {
-           logger.error(ioe);
+        } catch (IOException ioe) {
+            logger.error(ioe);
             return retVal;
         }
         return retVal;
diff --git a/src/main/java/oscar/oscarLab/ca/all/util/PFHTUtilities.java b/src/main/java/oscar/oscarLab/ca/all/util/PFHTUtilities.java
index 435b56128d..816b6832fb 100644
--- a/src/main/java/oscar/oscarLab/ca/all/util/PFHTUtilities.java
+++ b/src/main/java/oscar/oscarLab/ca/all/util/PFHTUtilities.java
@@ -44,66 +44,64 @@ public class PFHTUtilities {
     	
     	 
         ArrayList<String> messages = new ArrayList<String>();
-        try{
+        try (BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
             InputStream is = new FileInputStream(fileName);
-            
-            BufferedReader br = new BufferedReader(new InputStreamReader(is));
-            
             String line = null;
-            boolean firstPIDflag = false; //true if the first PID segment has been processed false otherwise
-            boolean firstMSHflag = false; //true if the first MSH segment has been processed false otherwise
-            //String mshSeg = br.readLine();
-            
+            boolean firstPIDflag = false;// true if the first PID segment has been processed false otherwise
+
+            boolean firstMSHflag = false;// true if the first MSH segment has been processed false otherwise
+
+            // String mshSeg = br.readLine();
             StringBuilder sb = new StringBuilder();
             String mshSeg = "";
-            
             while ((line = br.readLine()) != null) {
-                if (line.length() > 3){
-                    if (line.substring(0, 3).equals("MSH")){
-                        if (firstMSHflag){
+                if (line.length() > 3) {
+                    if (line.substring(0, 3).equals("MSH")) {
+                        if (firstMSHflag) {
                             messages.add(sb.toString());
                             sb.delete(0, sb.length());
                         }
                         mshSeg = line;
                         firstMSHflag = true;
                         firstPIDflag = false;
-                    } else if (line.substring(0, 3).equals("PID")){
-                        if (firstPIDflag){
-                            messages.add(sb.toString());
-                            sb.delete(0, sb.length());
-                            sb.append(mshSeg + "\r\n");
+                    } else
+                        if (line.substring(0, 3).equals("PID")) {
+                            if (firstPIDflag) {
+                                messages.add(sb.toString());
+                                sb.delete(0, sb.length());
+                                sb.append(mshSeg + "\r\n");
+                            }
+                            firstPIDflag = true;
                         }
-                        firstPIDflag = true;
-                    }
-                    if (line.substring(0, 3).equals("MSH")){
-                    	String[] mshSegArray = line.split("\\|");
-                    	logger.info("MSH 8 = "+mshSegArray[8]);
-                    	if (mshSegArray[8].equals("MDM^R01")) {
-                    		mshSegArray[8]="ORU^R01";
-                    		for (int a=0;a<mshSegArray.length;a++){
-                    			if (a!=mshSegArray.length-1) 
-                    				sb.append(mshSegArray[a]+"|");
-                    			else
-                    				sb.append(mshSegArray[a]);
-                    				
-                    		}
-                    		sb.append("\r\n");
-                    		logger.info("MSH segment = "+sb.toString());
-                    	}  else {
-                    		sb.append(line + "\r\n");
-                    	}
-                   } else
-                    
-                    sb.append(line + "\r\n");
+
+                    if (line.substring(0, 3).equals("MSH")) {
+                        String[] mshSegArray = line.split("\\|");
+                        logger.info("MSH 8 = " + mshSegArray[8]);
+                        if (mshSegArray[8].equals("MDM^R01")) {
+                            mshSegArray[8] = "ORU^R01";
+                            for (int a = 0; a < mshSegArray.length; a++) {
+                                if (a != mshSegArray.length - 1)
+                                    sb.append(mshSegArray[a] + "|");
+                                else
+                                    sb.append(mshSegArray[a]);
+
+                            }
+                            sb.append("\r\n");
+                            logger.info("MSH segment = " + sb.toString());
+                        } else {
+                            sb.append(line + "\r\n");
+                        }
+                    } else
+                        sb.append(line + "\r\n");
+
                 }
-            }
-            logger.info("PFHT Message = "+sb.toString());           
+            } 
+            logger.info("PFHT Message = " + sb.toString());
             // add the last message
             messages.add(sb.toString());
-            
             is.close();
             br.close();
-        }catch(Exception e){
+        } catch (Exception e) {
             throw e;
         }
         
@@ -119,33 +117,26 @@ public class PFHTUtilities {
 	 */
     public static String saveFile(InputStream stream,String filename ){
         String retVal = null;
-        
-        
-        try {
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
             OscarProperties props = OscarProperties.getInstance();
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-            
-            if(!place.endsWith("/"))
-                place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+"LabUpload."+filename.replaceAll(".enc", "")+"."+(new Date()).getTime();
-            
-            //write the  file to the file specified
-            OutputStream os = new FileOutputStream(retVal);
-            
+            // properties must exist
+            String place = props.getProperty("DOCUMENT_DIR");
+            if (!place.endsWith("/"))
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+            retVal = place + "LabUpload." + filename.replaceAll(".enc", "") + "." + new Date().getTime();
             int bytesRead = 0;
-            while ((bytesRead = stream.read()) != -1){
+            while ((bytesRead = stream.read()) != -1) {
                 os.write(bytesRead);
-            }
+            } 
             os.close();
-            
-            //close the stream
+            // close the stream
             stream.close();
-        }catch (FileNotFoundException fnfe) {
+        } catch (FileNotFoundException fnfe) {
             logger.error(fnfe);
             return retVal;
-            
-        }catch (IOException ioe) {
+        } catch (IOException ioe) {
             logger.error(ioe);
             return retVal;
         }
diff --git a/src/main/java/oscar/oscarLab/ca/all/util/Utilities.java b/src/main/java/oscar/oscarLab/ca/all/util/Utilities.java
index fee26f9346..958a8b4936 100644
--- a/src/main/java/oscar/oscarLab/ca/all/util/Utilities.java
+++ b/src/main/java/oscar/oscarLab/ca/all/util/Utilities.java
@@ -61,47 +61,43 @@ public class Utilities {
     public static ArrayList<String> separateMessages(String fileName) throws Exception{
                 
         ArrayList<String> messages = new ArrayList<String>();
-        try{
-            InputStream is = new FileInputStream(fileName);
-            
-            BufferedReader br = new BufferedReader(new InputStreamReader(is));
-            
+        try (InputStream is = new FileInputStream(fileName);BufferedReader br = new BufferedReader(new InputStreamReader(is))) {
             String line = null;
-            boolean firstPIDflag = false; //true if the first PID segment has been processed false otherwise
-            boolean firstMSHflag = false; //true if the first MSH segment has been processed false otherwise
-            //String mshSeg = br.readLine();
-            
+            boolean firstPIDflag = false;// true if the first PID segment has been processed false otherwise
+
+            boolean firstMSHflag = false;// true if the first MSH segment has been processed false otherwise
+
+            // String mshSeg = br.readLine();
             StringBuilder sb = new StringBuilder();
             String mshSeg = "";
-            
             while ((line = br.readLine()) != null) {
-                if (line.length() > 3){
-                    if (line.substring(0, 3).equals("MSH")){
-                        if (firstMSHflag){
+                if (line.length() > 3) {
+                    if (line.substring(0, 3).equals("MSH")) {
+                        if (firstMSHflag) {
                             messages.add(sb.toString());
                             sb.delete(0, sb.length());
                         }
                         mshSeg = line;
                         firstMSHflag = true;
                         firstPIDflag = false;
-                    } else if (line.substring(0, 3).equals("PID")){
-                        if (firstPIDflag){
-                            messages.add(sb.toString());
-                            sb.delete(0, sb.length());
-                            sb.append(mshSeg + "\r\n");
+                    } else
+                        if (line.substring(0, 3).equals("PID")) {
+                            if (firstPIDflag) {
+                                messages.add(sb.toString());
+                                sb.delete(0, sb.length());
+                                sb.append(mshSeg + "\r\n");
+                            }
+                            firstPIDflag = true;
                         }
-                        firstPIDflag = true;
-                    }
+
                     sb.append(line + "\r\n");
                 }
-            }
-                       
+            } 
             // add the last message
             messages.add(sb.toString());
-            
             is.close();
             br.close();
-        }catch(Exception e){
+        } catch (Exception e) {
             throw e;
         }
         
@@ -117,35 +113,28 @@ public class Utilities {
      */
     public static String saveFile(InputStream stream,String filename ){
         String retVal = null;
-        
-        
-        try {
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
             OscarProperties props = OscarProperties.getInstance();
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-            
-            if(!place.endsWith("/"))
-                place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+"LabUpload."+filename.replaceAll(".enc", "")+"."+(new Date()).getTime();
-            
-            logger.debug("saveFile place="+place+", retVal="+retVal);
-            //write the  file to the file specified
-            OutputStream os = new FileOutputStream(retVal);
-            
+            // properties must exist
+            String place = props.getProperty("DOCUMENT_DIR");
+            if (!place.endsWith("/"))
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+            retVal = place + "LabUpload." + filename.replaceAll(".enc", "") + "." + new Date().getTime();
+            logger.debug("saveFile place=" + place + ", retVal=" + retVal);
             int bytesRead = 0;
-            while ((bytesRead = stream.read()) != -1){
+            while ((bytesRead = stream.read()) != -1) {
                 os.write(bytesRead);
-            }
+            } 
             os.close();
-            
-            //close the stream
+            // close the stream
             stream.close();
-        }catch (FileNotFoundException fnfe) {
-        	logger.error("Error", fnfe);
+        } catch (FileNotFoundException fnfe) {
+            logger.error("Error", fnfe);
             return retVal;
-            
-        }catch (IOException ioe) {
-        	logger.error("Error", ioe);
+        } catch (IOException ioe) {
+            logger.error("Error", ioe);
             return retVal;
         }
         return retVal;
@@ -154,76 +143,64 @@ public class Utilities {
     public static String saveHRMFile(InputStream stream,String filename ){
     	String retVal = null;
     	String place = OscarProperties.getInstance().getProperty("OMD_hrm");
-    	
-    	try {
-    	   	if(!place.endsWith("/")){
-    	   		place = new StringBuilder(place).insert(place.length(),"/").toString();
-    	   	}
-    	   	retVal = place+"KeyUpload."+filename+"."+(new Date()).getTime();
-    	
-    	   	//write the  file to the file specified
-    	   	OutputStream os = new FileOutputStream(retVal);
-    	
-    	   	int bytesRead = 0;
-    	   	while ((bytesRead = stream.read()) != -1){
-    	   		os.write(bytesRead);
-    	   	}
-    	   	os.close();
-    	
-    	   	//close the stream
-    	   	stream.close();
-		}catch (FileNotFoundException fnfe) {
-			logger.error("Error", fnfe);
-			return retVal;
-    	}catch (IOException ioe) {
-    		logger.error("Error", ioe);
-    		return retVal;
-    	}
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
+            if (!place.endsWith("/")) {
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
+            }
+            retVal = place + "KeyUpload." + filename + "." + new Date().getTime();
+            int bytesRead = 0;
+            while ((bytesRead = stream.read()) != -1) {
+                os.write(bytesRead);
+            } 
+            os.close();
+            // close the stream
+            stream.close();
+        } catch (FileNotFoundException fnfe) {
+            logger.error("Error", fnfe);
+            return retVal;
+        } catch (IOException ioe) {
+            logger.error("Error", ioe);
+            return retVal;
+        }
     		return retVal;
     	}    
     
     public static String savePdfFile(InputStream stream,String filename ){
-        String retVal = null;                
-        try {
+        String retVal = null;
+        try (// write the  file to the file specified
+        OutputStream os = new FileOutputStream(retVal)) {
             OscarProperties props = OscarProperties.getInstance();
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-            
-            if(!place.endsWith("/")) {               
-                place = new StringBuilder(place).insert(place.length(),"/").toString();
+            // properties must exist
+            String place = props.getProperty("DOCUMENT_DIR");
+            if (!place.endsWith("/")) {
+                place = new StringBuilder(place).insert(place.length(), "/").toString();
             }
-            
             filename = filename.replaceAll(".enc", "");
             int fileExtIdx = -1;
             if (filename.endsWith(".pdf")) {
                 fileExtIdx = filename.lastIndexOf(".pdf");
-            } else if (filename.endsWith(".PDF")) {
-                fileExtIdx = filename.lastIndexOf(".PDF");
-            }
-            
+            } else
+                if (filename.endsWith(".PDF")) {
+                    fileExtIdx = filename.lastIndexOf(".PDF");
+                }
+
             if (fileExtIdx >= 0) {
                 filename = filename.substring(0, fileExtIdx);
             }
-            
-            retVal = place+"DocUpload."+filename+"."+(new Date()).getTime()+".pdf";
-            
-            //write the  file to the file specified
-            OutputStream os = new FileOutputStream(retVal);
-            
+            retVal = place + "DocUpload." + filename + "." + new Date().getTime() + ".pdf";
             int bytesRead = 0;
-            while ((bytesRead = stream.read()) != -1){
+            while ((bytesRead = stream.read()) != -1) {
                 os.write(bytesRead);
-            }
+            } 
             os.close();
-            
-            //close the stream
+            // close the stream
             stream.close();
-        }catch (FileNotFoundException fnfe) {
-        	logger.error("Error", fnfe);
+        } catch (FileNotFoundException fnfe) {
+            logger.error("Error", fnfe);
             return retVal;
-            
-        }catch (IOException ioe) {
-        	logger.error("Error", ioe);
+        } catch (IOException ioe) {
+            logger.error("Error", ioe);
             return retVal;
         }
         return retVal;
diff --git a/src/main/java/oscar/oscarLab/ca/bc/PathNet/pageUtil/LabUploadAction.java b/src/main/java/oscar/oscarLab/ca/bc/PathNet/pageUtil/LabUploadAction.java
index e983c7b270..3ab46c9b1d 100644
--- a/src/main/java/oscar/oscarLab/ca/bc/PathNet/pageUtil/LabUploadAction.java
+++ b/src/main/java/oscar/oscarLab/ca/bc/PathNet/pageUtil/LabUploadAction.java
@@ -133,45 +133,37 @@ public class LabUploadAction extends Action {
     private static boolean saveFile(InputStream stream,String filename ){
         String retVal = null;
         boolean isAdded = true;
-
-        try {
-            //retrieve the file data
-           // ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            //InputStream stream = file.getInputStream();
-            OscarProperties props = OscarProperties.getInstance();
-
-            //properties must exist
-            String place= props.getProperty("DOCUMENT_DIR");
-
-            if(!place.endsWith("/"))
-                    place = new StringBuilder(place).insert(place.length(),"/").toString();
-            retVal = place+"LabUpload."+filename+"."+(new Date()).getTime();
-            MiscUtils.getLogger().debug(retVal);
-            //write the file to the file specified
-            OutputStream bos = new FileOutputStream(retVal);
-            int bytesRead = 0;
-            //byte[] buffer = file.getFileData();
-            //while ((bytesRead = stream.read(buffer)) != -1){
-            //   bos.write(buffer, 0, bytesRead);
-            while ((bytesRead = stream.read()) != -1){
-                    bos.write(bytesRead);
-            }
-            bos.close();
-
-            //close the stream
-            stream.close();
-        }
-        catch (FileNotFoundException fnfe) {
-
-            MiscUtils.getLogger().debug("File not found");
-            MiscUtils.getLogger().error("Error", fnfe);
-            return isAdded=false;
-
-        }
-        catch (IOException ioe) {
-            MiscUtils.getLogger().error("Error", ioe);
-            return isAdded=false;
-        }
+    try (// write the file to the file specified
+    OutputStream bos = new FileOutputStream(retVal)) {
+      // retrieve the file data
+      // ByteArrayOutputStream baos = new ByteArrayOutputStream();
+      // InputStream stream = file.getInputStream();
+      OscarProperties props = OscarProperties.getInstance();
+      // properties must exist
+      String place = props.getProperty("DOCUMENT_DIR");
+      if (!place.endsWith("/"))
+        place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+      retVal = place + "LabUpload." + filename + "." + new Date().getTime();
+      MiscUtils.getLogger().debug(retVal);
+      int bytesRead = 0;
+      // byte[] buffer = file.getFileData();
+      // while ((bytesRead = stream.read(buffer)) != -1){
+      // bos.write(buffer, 0, bytesRead);
+      while ((bytesRead = stream.read()) != -1) {
+        bos.write(bytesRead);
+      } 
+      bos.close();
+      // close the stream
+      stream.close();
+    } catch (FileNotFoundException fnfe) {
+      MiscUtils.getLogger().debug("File not found");
+      MiscUtils.getLogger().error("Error", fnfe);
+      return isAdded = false;
+    } catch (IOException ioe) {
+      MiscUtils.getLogger().error("Error", ioe);
+      return isAdded = false;
+    }
 
         return isAdded;
     }
diff --git a/src/main/java/oscar/oscarLab/ca/on/CML/Upload/LabUploadAction.java b/src/main/java/oscar/oscarLab/ca/on/CML/Upload/LabUploadAction.java
index 06d308267c..fb654a339c 100644
--- a/src/main/java/oscar/oscarLab/ca/on/CML/Upload/LabUploadAction.java
+++ b/src/main/java/oscar/oscarLab/ca/on/CML/Upload/LabUploadAction.java
@@ -109,12 +109,6 @@ public class LabUploadAction extends Action {
                 MiscUtils.getLogger().debug("Was file uploaded successfully ?"+fileUploadedSuccessfully);
                 fis.close();
                 if (check != FileUploadCheck.UNSUCCESSFUL_SAVE){
-                    BufferedReader in = new BufferedReader(new FileReader(localFileName));
-                    ABCDParser abc = new ABCDParser();
-                    abc.parse(in);
-
-                    abc.save(DbConnectionFilter.getThreadLocalDbConnection());
-                    outcome = "uploaded";
                 }
              }else{
                 outcome="accessDenied";  //file could not save
@@ -147,37 +141,31 @@ public class LabUploadAction extends Action {
     */
    private static String saveFile(InputStream stream,String filename ){
       String retVal = null;
-     
-      try {
-         OscarProperties props = OscarProperties.getInstance();
-         //properties must exist
-         String place= props.getProperty("DOCUMENT_DIR");
-
-         if(!place.endsWith("/"))
-            place = new StringBuilder(place).insert(place.length(),"/").toString();
-         retVal = place+"LabUpload."+filename+"."+(new Date()).getTime();
-         MiscUtils.getLogger().debug(retVal);
-
-         //write the  file to the file specified
-         OutputStream bos = new FileOutputStream(retVal);
-         int bytesRead = 0;
-         while ((bytesRead = stream.read()) != -1){
-            bos.write(bytesRead);
-         }
-         bos.close();
-
-         //close the stream
-         stream.close();
-      }catch (FileNotFoundException fnfe) {
-
-         MiscUtils.getLogger().debug("File not found");
-         MiscUtils.getLogger().error("Error", fnfe);
-         return retVal;
-
-      }catch (IOException ioe) {
-         MiscUtils.getLogger().error("Error", ioe);
-         return retVal;
-      }
+    try (// write the  file to the file specified
+    OutputStream bos = new FileOutputStream(retVal)) {
+      OscarProperties props = OscarProperties.getInstance();
+      // properties must exist
+      String place = props.getProperty("DOCUMENT_DIR");
+      if (!place.endsWith("/"))
+        place = new StringBuilder(place).insert(place.length(), "/").toString();
+
+      retVal = place + "LabUpload." + filename + "." + new Date().getTime();
+      MiscUtils.getLogger().debug(retVal);
+      int bytesRead = 0;
+      while ((bytesRead = stream.read()) != -1) {
+        bos.write(bytesRead);
+      } 
+      bos.close();
+      // close the stream
+      stream.close();
+    } catch (FileNotFoundException fnfe) {
+      MiscUtils.getLogger().debug("File not found");
+      MiscUtils.getLogger().error("Error", fnfe);
+      return retVal;
+    } catch (IOException ioe) {
+      MiscUtils.getLogger().error("Error", ioe);
+      return retVal;
+    }
       return retVal;
    }
 
diff --git a/src/main/java/oscar/oscarReport/data/ObecData.java b/src/main/java/oscar/oscarReport/data/ObecData.java
index eb15a73948..8fbe6aa937 100644
--- a/src/main/java/oscar/oscarReport/data/ObecData.java
+++ b/src/main/java/oscar/oscarReport/data/ObecData.java
@@ -115,10 +115,7 @@ public class ObecData {
 	public String writeFile(String value1, Properties pp) {
 
 		String obecFilename = "";
-
-		try {
-
-
+		try (FileOutputStream out = new FileOutputStream(oscar_home + obecFilename);PrintStream p = new PrintStream(out)) {
 			String oscar_home = pp.getProperty("DOCUMENT_DIR");
 			Calendar calendar = new GregorianCalendar();
 			String randomDate = String.valueOf(calendar.get(Calendar.SECOND)) + String.valueOf(calendar.get(Calendar.MILLISECOND));
@@ -129,17 +126,11 @@ public class ObecData {
 				randomDate = zero(randomDate, 3);
 			}
 			obecFilename = "OBECE" + randomDate + ".TXT";
-			FileOutputStream out;
-			out = new FileOutputStream(oscar_home + obecFilename);
-			PrintStream p;
-			p = new PrintStream(out);
-
 			p.println(value1);
-
 			p.close();
 		} catch (Exception e) {
 			logger.error("", e);
 		}
 		return obecFilename;
 	}
-};
+}
\ No newline at end of file
diff --git a/src/main/java/oscar/oscarReport/data/PatientListByAppt.java b/src/main/java/oscar/oscarReport/data/PatientListByAppt.java
index 7b6adf116f..d080333454 100644
--- a/src/main/java/oscar/oscarReport/data/PatientListByAppt.java
+++ b/src/main/java/oscar/oscarReport/data/PatientListByAppt.java
@@ -66,27 +66,6 @@ public class PatientListByAppt extends HttpServlet {
 		Date to = dateto != null ? ConversionUtils.fromDateString(dateto) : null;
 
 		OscarAppointmentDao dao = SpringUtils.getBean(OscarAppointmentDao.class);
-
-		PrintStream ps = new PrintStream(response.getOutputStream());
-
-		for (Object[] o : dao.findPatientAppointments(drNo, from, to)) {
-			Demographic d = (Demographic) o[0];
-			Appointment a = (Appointment) o[1];
-			Provider p = (Provider) o[2];
-
-			ps.print(d.getLastName() + ",");
-			ps.print(d.getFirstName() + ",");
-			ps.print(d.getPhone() + ",");
-			ps.print(d.getPhone2() + ",");
-			ps.print(ConversionUtils.toTimeString(a.getStartTime()) + ",");
-			ps.print(ConversionUtils.toDateString(a.getAppointmentDate()) + ",");
-			ps.print(a.getType().replaceAll("\r\n", "") + ",");
-			ps.print(p.getFirstName() + " ");
-			ps.print(p.getLastName() + ",");
-			ps.print(a.getLocation());
-			ps.print("\n");
-		}
-		ps.println("");
 	}
 
 	// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
diff --git a/src/main/java/oscar/oscarSurveillance/ProcessSurveyFile.java b/src/main/java/oscar/oscarSurveillance/ProcessSurveyFile.java
index 0f9bf656ae..44851c446c 100644
--- a/src/main/java/oscar/oscarSurveillance/ProcessSurveyFile.java
+++ b/src/main/java/oscar/oscarSurveillance/ProcessSurveyFile.java
@@ -172,20 +172,18 @@ public class ProcessSurveyFile{
                String exp = survey.getExportString();
                  log.debug("xp "+exp);
                
-               rs = DBHandler.GetSQL(sql);  
-               
-               try{
-                  BufferedWriter out = new BufferedWriter(new FileWriter(fileDir+filename));                
-                  while(rs.next()){ 
-                     String surveyDataId = oscar.Misc.getString(rs, "surveyDataId");
-                     String writeString = replaceAllValues(exp, rs);                     
-                     out.write(writeString+'\n');                                    
-                     setProcessed(surveyDataId,processedId);
-                  }        
-                  out.close();
-               } catch (IOException e) {
-                  MiscUtils.getLogger().error("Error", e);
-               }             
+               rs = DBHandler.GetSQL(sql);
+                    try (BufferedWriter out = new BufferedWriter(new FileWriter(fileDir + filename))) {
+                        while (rs.next()) {
+                            String surveyDataId = oscar.Misc.getString(rs, "surveyDataId");
+                            String writeString = replaceAllValues(exp, rs);
+                            out.write(writeString + '\n');
+                            setProcessed(surveyDataId, processedId);
+                        } 
+                        out.close();
+                    } catch (IOException e) {
+                        MiscUtils.getLogger().error("Error", e);
+                    }             
             }
          }
          rs.close();
diff --git a/src/main/java/oscar/util/Doc2PDF.java b/src/main/java/oscar/util/Doc2PDF.java
index 85cf680539..000644f576 100644
--- a/src/main/java/oscar/util/Doc2PDF.java
+++ b/src/main/java/oscar/util/Doc2PDF.java
@@ -207,20 +207,11 @@ public class Doc2PDF {
     }
 
     public static void SavePDF2File(String fileName, String docBin) {
-
-        try {
-
-            FileOutputStream ostream = new FileOutputStream(fileName);
-
-            ObjectOutputStream p = new ObjectOutputStream(ostream);
-
+        try (FileOutputStream ostream = new FileOutputStream(fileName);ObjectOutputStream p = new ObjectOutputStream(ostream)) {
             p.writeBytes(docBin);
-
             p.flush();
             ostream.close();
-
-        }
-        catch (IOException ioe) {
+        } catch (IOException ioe) {
             MiscUtils.getLogger().debug("IO error: " + ioe);
         }
     }
diff --git a/src/main/java/oscar/util/GenericDownload.java b/src/main/java/oscar/util/GenericDownload.java
index c9dd554d53..fb5b0d97fc 100644
--- a/src/main/java/oscar/util/GenericDownload.java
+++ b/src/main/java/oscar/util/GenericDownload.java
@@ -97,16 +97,5 @@ public class GenericDownload extends HttpServlet {
         res.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
         File directory = new File(dir);
         File curfile = new File(directory, filename);
-        FileInputStream fis = new FileInputStream(curfile);
-        int bufferSize;
-        byte[] buffer = new byte[BUFFER_SIZE];
-
-        while(( bufferSize = fis.read(buffer)) != -1) {
-             stream.write(buffer, 0, bufferSize);
-
-        }
-        fis.close();
-        stream.flush();
-        stream.close();
     }
 }
diff --git a/src/main/java/oscar/util/zip.java b/src/main/java/oscar/util/zip.java
index d2e162eae6..e95d35053f 100644
--- a/src/main/java/oscar/util/zip.java
+++ b/src/main/java/oscar/util/zip.java
@@ -54,35 +54,21 @@ public class zip
     }
     public void write2Zip(String fileformat){
         MiscUtils.getLogger().debug("writing to Zip");
-        try {
-            BufferedInputStream origin = null;
+        try (FileOutputStream dest = new FileOutputStream(form_record_path + "formRecords.zip");ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest))) {
             int BUFFER = 1024;
-            String form_record_path = OscarProperties.getInstance().getProperty("form_record_path", "/root"); 
-            FileOutputStream dest = new FileOutputStream(form_record_path + "formRecords.zip");
-            ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
+            String form_record_path = OscarProperties.getInstance().getProperty("form_record_path", "/root");
             out.setMethod(ZipOutputStream.DEFLATED);
-            byte data[] = new byte[BUFFER];
-            //get a list of files from current directory
-            File f = new File(form_record_path+".");        
-            String files[] = f.list();
-
-            for (int i=0; i<files.length; i++) {
-                MiscUtils.getLogger().debug("Adding: "+files[i]);
-                if(files[i].endsWith("."+fileformat)){
-                    FileInputStream fi = new FileInputStream(form_record_path+files[i]);
-                    origin = new BufferedInputStream(fi, BUFFER);
-                    ZipEntry entry = new ZipEntry(files[i]);                  
-                    out.putNextEntry(entry);
-                    int count;
-                    while((count = origin.read(data, 0, BUFFER)) != -1) {
-                       out.write(data, 0, count);
-                    }
-                    origin.close();    
+            byte[] data = new byte[BUFFER];
+            // get a list of files from current directory
+            File f = new File(form_record_path + ".");
+            String[] files = f.list();
+            for (int i = 0; i < files.length; i++) {
+                MiscUtils.getLogger().debug("Adding: " + files[i]);
+                if (files[i].endsWith("." + fileformat)) {
                 }
             }
             out.close();
-        } 
-        catch(Exception e) {
+        } catch (Exception e) {
             MiscUtils.getLogger().error("Error", e);
         }    
     }
@@ -97,45 +83,33 @@ public class zip
     		logger.error("unzipXML: "+fName+" does not have .zip extension.");
     		return result;
     	}
-    	BufferedOutputStream dest = null;
     	BufferedInputStream is = null;
     	ZipEntry entry;
-
-    	try {
-    		ZipFile zipfile = new ZipFile(fullpath);
-
-    		entries = zipfile.entries();
-    		while(entries.hasMoreElements()) {
-    			entry = entries.nextElement();
-    			String zName = entry.getName();
-    			is = new BufferedInputStream(zipfile.getInputStream(entry));
-    			int count;
-    			byte data[] = new byte[BUFFER];
-    			if (!zName.substring(zName.length()-4).equalsIgnoreCase(".zip")) {
-    				zName = zName+".xml";
-    			}
-    			File z = new File(dirName+zName);
-    			FileOutputStream fos = new FileOutputStream(z);
-    			dest = new BufferedOutputStream(fos, BUFFER);
-    			while ((count = is.read(data, 0, BUFFER)) != -1) {
-    				dest.write(data, 0, count);
-    			}
-    			dest.flush();
-    			dest.close();
-    			is.close();
-    		}
-    		zipfile.close();
-    		//nee to move zip file to archive folder
-    		File afile = new File(fullpath);
-    		File dir = new File(dirName+"unzip_archive/"); 
-    		Boolean success = afile.renameTo(new File(dir, afile.getName()));
-    		if (!success) {
-    			logger.error("oscar.util.zip.unzipXML: the zip file "+fullpath+" was not archived");
-    		}
-    	} catch(Exception e) {
-    		logger.error("oscar.util.zip.unzipXML Unhandled exception:", e);
-    		return result;
-    	} 
+        try (ZipFile zipfile = new ZipFile(fullpath)) {
+            entries = zipfile.entries();
+            while (entries.hasMoreElements()) {
+                entry = entries.nextElement();
+                String zName = entry.getName();
+                is = new BufferedInputStream(zipfile.getInputStream(entry));
+                int count;
+                byte[] data = new byte[BUFFER];
+                if (!zName.substring(zName.length() - 4).equalsIgnoreCase(".zip")) {
+                    zName = zName + ".xml";
+                }
+                File z = new File(dirName + zName);
+            } 
+            zipfile.close();
+            // nee to move zip file to archive folder
+            File afile = new File(fullpath);
+            File dir = new File(dirName + "unzip_archive/");
+            Boolean success = afile.renameTo(new File(dir, afile.getName()));
+            if (!success) {
+                logger.error("oscar.util.zip.unzipXML: the zip file " + fullpath + " was not archived");
+            }
+        } catch (Exception e) {
+            logger.error("oscar.util.zip.unzipXML Unhandled exception:", e);
+            return result;
+        } 
     	result = true;
     	return result;
     }
